
STM32L451CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  0002ebac  2**0
                  CONTENTS
  4 .ARM          00000000  080046f0  080046f0  0002ebac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f0  080046f0  0002ebac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000ebac  20000000  080046f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b44  2000ebac  080132a4  0002ebac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f6f0  080132a4  0002f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002ebac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ae8  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003223  00000000  00000000  000486c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  0004b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0004ce80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cdd  00000000  00000000  0004e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134b6  00000000  00000000  00071f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8d72  00000000  00000000  000853f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0015e165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  0015e258  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000d34  00000000  00000000  00163c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000ebac 	.word	0x2000ebac
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004698 	.word	0x08004698

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000ebb0 	.word	0x2000ebb0
 80001d0:	08004698 	.word	0x08004698

080001d4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2224      	movs	r2, #36	; 0x24
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f004 fa51 	bl	8004688 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80001e6:	4b12      	ldr	r3, [pc, #72]	; (8000230 <MX_DAC1_Init+0x5c>)
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <MX_DAC1_Init+0x60>)
 80001ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80001ec:	4810      	ldr	r0, [pc, #64]	; (8000230 <MX_DAC1_Init+0x5c>)
 80001ee:	f001 f8cc 	bl	800138a <HAL_DAC_Init>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80001f8:	f000 fdfc 	bl	8000df4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000200:	2304      	movs	r3, #4
 8000202:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	4619      	mov	r1, r3
 8000216:	4806      	ldr	r0, [pc, #24]	; (8000230 <MX_DAC1_Init+0x5c>)
 8000218:	f001 f9a6 	bl	8001568 <HAL_DAC_ConfigChannel>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000222:	f000 fde7 	bl	8000df4 <Error_Handler>
  }

}
 8000226:	bf00      	nop
 8000228:	3728      	adds	r7, #40	; 0x28
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	2000f1ec 	.word	0x2000f1ec
 8000234:	40007400 	.word	0x40007400

08000238 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <HAL_DAC_MspInit+0xcc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d14f      	bne.n	80002fa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800025a:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 800025c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800025e:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000264:	6593      	str	r3, [r2, #88]	; 0x58
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800026a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a24      	ldr	r2, [pc, #144]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800028a:	2310      	movs	r3, #16
 800028c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800028e:	2303      	movs	r3, #3
 8000290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	4619      	mov	r1, r3
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f001 ffa2 	bl	80021e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002a6:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <HAL_DAC_MspInit+0xd8>)
 80002a8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002ac:	2206      	movs	r2, #6
 80002ae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002d4:	2220      	movs	r2, #32
 80002d6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002e0:	f001 fd8a 	bl	8001df8 <HAL_DMA_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80002ea:	f000 fd83 	bl	8000df4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80002fa:	bf00      	nop
 80002fc:	3728      	adds	r7, #40	; 0x28
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40007400 	.word	0x40007400
 8000308:	40021000 	.word	0x40021000
 800030c:	2000f200 	.word	0x2000f200
 8000310:	40020030 	.word	0x40020030

08000314 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000318:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 800031a:	4a2c      	ldr	r2, [pc, #176]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 800031c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800031e:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 8000326:	2201      	movs	r2, #1
 8000328:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 800032c:	2200      	movs	r2, #0
 800032e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 8000338:	2240      	movs	r2, #64	; 0x40
 800033a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 800033e:	2201      	movs	r2, #1
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000342:	4821      	ldr	r0, [pc, #132]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 8000344:	f001 fb00 	bl	8001948 <HAL_DFSDM_FilterInit>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 800034e:	f000 fd51 	bl	8000df4 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000352:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000354:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000356:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800035a:	2201      	movs	r2, #1
 800035c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 25;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000366:	2219      	movs	r2, #25
 8000368:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000384:	2204      	movs	r2, #4
 8000386:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000390:	220a      	movs	r2, #10
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 8000396:	2200      	movs	r2, #0
 8000398:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 80003a2:	f001 fa11 	bl	80017c8 <HAL_DFSDM_ChannelInit>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80003ac:	f000 fd22 	bl	8000df4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80003b0:	2201      	movs	r2, #1
 80003b2:	2101      	movs	r1, #1
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_DFSDM1_Init+0xb4>)
 80003b6:	f001 fba1 	bl	8001afc <HAL_DFSDM_FilterConfigRegChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80003c0:	f000 fd18 	bl	8000df4 <Error_Handler>
  }

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000f248 	.word	0x2000f248
 80003cc:	40016100 	.word	0x40016100
 80003d0:	2000f2e4 	.word	0x2000f2e4
 80003d4:	40016000 	.word	0x40016000

080003d8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80003f0:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <HAL_DFSDM_FilterMspInit+0x104>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d136      	bne.n	8000466 <HAL_DFSDM_FilterMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x108>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a38      	ldr	r2, [pc, #224]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x108>)
 8000400:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000402:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x108>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d10b      	bne.n	8000422 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800040a:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800040e:	4a35      	ldr	r2, [pc, #212]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000414:	6613      	str	r3, [r2, #96]	; 0x60
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA5     ------> DFSDM1_CKOUT
    PA7     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800044a:	2306      	movs	r3, #6
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f001 fec6 	bl	80021e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <HAL_DFSDM_FilterMspInit+0x104>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3301      	adds	r3, #1
 8000462:	4a1e      	ldr	r2, [pc, #120]	; (80004dc <HAL_DFSDM_FilterMspInit+0x104>)
 8000464:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x110>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d131      	bne.n	80004d4 <HAL_DFSDM_FilterMspInit+0xfc>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 8000472:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x118>)
 8000474:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 8000490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000494:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 8000498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800049c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004a0:	2220      	movs	r2, #32
 80004a2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004a6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80004aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004ae:	f001 fca3 	bl	8001df8 <HAL_DMA_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <HAL_DFSDM_FilterMspInit+0xe4>
    {
      Error_Handler();
 80004b8:	f000 fc9c 	bl	8000df4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
 80004ce:	4a07      	ldr	r2, [pc, #28]	; (80004ec <HAL_DFSDM_FilterMspInit+0x114>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80004d4:	bf00      	nop
 80004d6:	3728      	adds	r7, #40	; 0x28
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000ebcc 	.word	0x2000ebcc
 80004e0:	2000ebc8 	.word	0x2000ebc8
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40016100 	.word	0x40016100
 80004ec:	2000f29c 	.word	0x2000f29c
 80004f0:	40020044 	.word	0x40020044

080004f4 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <HAL_DFSDM_ChannelMspInit+0x98>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d136      	bne.n	8000582 <HAL_DFSDM_ChannelMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x9c>)
 800051c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10b      	bne.n	800053e <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052a:	4a1a      	ldr	r2, [pc, #104]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800052c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000530:	6613      	str	r3, [r2, #96]	; 0x60
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA5     ------> DFSDM1_CKOUT
    PA7     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000566:	2306      	movs	r3, #6
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f001 fe38 	bl	80021e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_DFSDM_ChannelMspInit+0x98>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_DFSDM_ChannelMspInit+0x98>)
 8000580:	6013      	str	r3, [r2, #0]
  }
}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000ebcc 	.word	0x2000ebcc
 8000590:	2000ebc8 	.word	0x2000ebc8
 8000594:	40021000 	.word	0x40021000

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6493      	str	r3, [r2, #72]	; 0x48
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_DMA_Init+0x48>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200d      	movs	r0, #13
 80005bc:	f000 feaf 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005c0:	200d      	movs	r0, #13
 80005c2:	f000 fec8 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200e      	movs	r0, #14
 80005cc:	f000 fea7 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005d0:	200e      	movs	r0, #14
 80005d2:	f000 fec0 	bl	8001356 <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_GPIO_Init+0xa8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_GPIO_Init+0xa8>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_GPIO_Init+0xa8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0xa8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <MX_GPIO_Init+0xa8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_GPIO_Init+0xa8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000634:	f001 ff52 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <MX_GPIO_Init+0xac>)
 8000640:	f001 ff4c 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	4619      	mov	r1, r3
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f001 fdc2 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xac>)
 800067e:	f001 fdb3 	bl	80021e8 <HAL_GPIO_Init>

}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	48000400 	.word	0x48000400

08000694 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f001 ff36 	bl	8002540 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 fb8b 	bl	8000df4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f002 f903 	bl	80028ec <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fb82 	bl	8000df4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f002 f945 	bl	8002982 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 fb79 	bl	8000df4 <Error_Handler>
  }

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000f31c 	.word	0x2000f31c
 800070c:	40005400 	.word	0x40005400
 8000710:	10808dd3 	.word	0x10808dd3

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_I2C_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d127      	bne.n	8000786 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_I2C_MspInit+0x80>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074e:	23c0      	movs	r3, #192	; 0xc0
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000752:	2312      	movs	r3, #18
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800075e:	2304      	movs	r3, #4
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_I2C_MspInit+0x84>)
 800076a:	f001 fd3d 	bl	80021e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_I2C_MspInit+0x80>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000778:	6593      	str	r3, [r2, #88]	; 0x58
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_I2C_MspInit+0x80>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40005400 	.word	0x40005400
 8000794:	40021000 	.word	0x40021000
 8000798:	48000400 	.word	0x48000400

0800079c <main>:
int gainDB[5] = {10,10,5,6,7};
void TestBlinking(void);


int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
	HAL_Init();
 80007a2:	f000 fc4a 	bl	800103a <HAL_Init>
	SystemClock_Config();
 80007a6:	f000 faad 	bl	8000d04 <SystemClock_Config>
	MX_GPIO_Init();
 80007aa:	f7ff ff1b 	bl	80005e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80007ae:	f7ff fef3 	bl	8000598 <MX_DMA_Init>
	MX_I2C1_Init();
 80007b2:	f7ff ff6f 	bl	8000694 <MX_I2C1_Init>
	MX_DFSDM1_Init();
 80007b6:	f7ff fdad 	bl	8000314 <MX_DFSDM1_Init>
	MX_DAC1_Init();
 80007ba:	f7ff fd0b 	bl	80001d4 <MX_DAC1_Init>
	MX_TIM6_Init();
 80007be:	f000 fbbd 	bl	8000f3c <MX_TIM6_Init>


	HAL_TIM_Base_Start(&htim6);
 80007c2:	4899      	ldr	r0, [pc, #612]	; (8000a28 <main+0x28c>)
 80007c4:	f003 fafa 	bl	8003dbc <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80007c8:	2100      	movs	r1, #0
 80007ca:	4898      	ldr	r0, [pc, #608]	; (8000a2c <main+0x290>)
 80007cc:	f000 fdff 	bl	80013ce <HAL_DAC_Start>
	TestBlinking();
 80007d0:	f000 fa7e 	bl	8000cd0 <TestBlinking>
	//10*(gainDB[0]+10)  ==> first 10 is for (5*NUMSTAGES)  , second 10 is for -10 to 10 gainDB
	arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 80007d4:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <main+0x294>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4a93      	ldr	r2, [pc, #588]	; (8000a34 <main+0x298>)
 80007e6:	441a      	add	r2, r3
 80007e8:	4b93      	ldr	r3, [pc, #588]	; (8000a38 <main+0x29c>)
 80007ea:	2103      	movs	r1, #3
 80007ec:	4893      	ldr	r0, [pc, #588]	; (8000a3c <main+0x2a0>)
 80007ee:	f003 ff1b 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 80007f2:	4b8f      	ldr	r3, [pc, #572]	; (8000a30 <main+0x294>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80007fa:	4613      	mov	r3, r2
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <main+0x2a4>)
 8000804:	441a      	add	r2, r3
 8000806:	4b8f      	ldr	r3, [pc, #572]	; (8000a44 <main+0x2a8>)
 8000808:	2103      	movs	r1, #3
 800080a:	488f      	ldr	r0, [pc, #572]	; (8000a48 <main+0x2ac>)
 800080c:	f003 ff0c 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000810:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <main+0x294>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000818:	4613      	mov	r3, r2
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	1a9b      	subs	r3, r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4a8a      	ldr	r2, [pc, #552]	; (8000a4c <main+0x2b0>)
 8000822:	441a      	add	r2, r3
 8000824:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <main+0x2b4>)
 8000826:	2103      	movs	r1, #3
 8000828:	488a      	ldr	r0, [pc, #552]	; (8000a54 <main+0x2b8>)
 800082a:	f003 fefd 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 800082e:	4b80      	ldr	r3, [pc, #512]	; (8000a30 <main+0x294>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000836:	4613      	mov	r3, r2
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4a86      	ldr	r2, [pc, #536]	; (8000a58 <main+0x2bc>)
 8000840:	441a      	add	r2, r3
 8000842:	4b86      	ldr	r3, [pc, #536]	; (8000a5c <main+0x2c0>)
 8000844:	2103      	movs	r1, #3
 8000846:	4886      	ldr	r0, [pc, #536]	; (8000a60 <main+0x2c4>)
 8000848:	f003 feee 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 800084c:	4b78      	ldr	r3, [pc, #480]	; (8000a30 <main+0x294>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000854:	4613      	mov	r3, r2
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	1a9b      	subs	r3, r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4a81      	ldr	r2, [pc, #516]	; (8000a64 <main+0x2c8>)
 800085e:	441a      	add	r2, r3
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <main+0x2cc>)
 8000862:	2103      	movs	r1, #3
 8000864:	4881      	ldr	r0, [pc, #516]	; (8000a6c <main+0x2d0>)
 8000866:	f003 fedf 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>

	if (HAL_I2C_IsDeviceReady(&hi2c1, AMPLIFIER_ADDRESS, 1, 10) == HAL_OK){
 800086a:	230a      	movs	r3, #10
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000872:	487f      	ldr	r0, [pc, #508]	; (8000a70 <main+0x2d4>)
 8000874:	f001 fef3 	bl	800265e <HAL_I2C_IsDeviceReady>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <main+0xe6>
			TestBlinking();
 800087e:	f000 fa27 	bl	8000cd0 <TestBlinking>
		}
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	497b      	ldr	r1, [pc, #492]	; (8000a74 <main+0x2d8>)
 8000886:	487c      	ldr	r0, [pc, #496]	; (8000a78 <main+0x2dc>)
 8000888:	f001 f97e 	bl	8001b88 <HAL_DFSDM_FilterRegularStart_DMA>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <main+0xfa>
	{
		Error_Handler();
 8000892:	f000 faaf 	bl	8000df4 <Error_Handler>
	}
	/*if(HAL_OK != HAL_DFSDM_FilterRegularMsbStart_DMA(&hdfsdm1_filter0, RecBuff, AUDIO_REC))
		{
			Error_Handler();
		}*/
	HAL_UART_Receive_DMA(&huart1, Uart_array, 2);
 8000896:	2202      	movs	r2, #2
 8000898:	4978      	ldr	r1, [pc, #480]	; (8000a7c <main+0x2e0>)
 800089a:	4879      	ldr	r0, [pc, #484]	; (8000a80 <main+0x2e4>)
 800089c:	f003 fbbe 	bl	800401c <HAL_UART_Receive_DMA>
	while (1)
	{
		if((DmaRightRecHalfBuffCplt == 1))
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <main+0x2e8>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d17a      	bne.n	800099e <main+0x202>
		{

			for(i = 0; i < AUDIO_REC/2; i++)
 80008a8:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <main+0x2ec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e015      	b.n	80008dc <main+0x140>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <main+0x2ec>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a6f      	ldr	r2, [pc, #444]	; (8000a74 <main+0x2d8>)
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	121a      	asrs	r2, r3, #8
 80008bc:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <main+0x2ec>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	ee07 2a90 	vmov	s15, r2
 80008c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c8:	4a70      	ldr	r2, [pc, #448]	; (8000a8c <main+0x2f0>)
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < AUDIO_REC/2; i++)
 80008d2:	4b6d      	ldr	r3, [pc, #436]	; (8000a88 <main+0x2ec>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a6b      	ldr	r2, [pc, #428]	; (8000a88 <main+0x2ec>)
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <main+0x2ec>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b17      	cmp	r3, #23
 80008e2:	d9e5      	bls.n	80008b0 <main+0x114>
			}
			arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&buf_in[0], &buf_out[0],AUDIO_REC/2);
 80008e4:	2318      	movs	r3, #24
 80008e6:	4a6a      	ldr	r2, [pc, #424]	; (8000a90 <main+0x2f4>)
 80008e8:	4968      	ldr	r1, [pc, #416]	; (8000a8c <main+0x2f0>)
 80008ea:	4854      	ldr	r0, [pc, #336]	; (8000a3c <main+0x2a0>)
 80008ec:	f003 fce1 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 80008f0:	2318      	movs	r3, #24
 80008f2:	4a67      	ldr	r2, [pc, #412]	; (8000a90 <main+0x2f4>)
 80008f4:	4966      	ldr	r1, [pc, #408]	; (8000a90 <main+0x2f4>)
 80008f6:	4854      	ldr	r0, [pc, #336]	; (8000a48 <main+0x2ac>)
 80008f8:	f003 fcdb 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 80008fc:	2318      	movs	r3, #24
 80008fe:	4a64      	ldr	r2, [pc, #400]	; (8000a90 <main+0x2f4>)
 8000900:	4963      	ldr	r1, [pc, #396]	; (8000a90 <main+0x2f4>)
 8000902:	4854      	ldr	r0, [pc, #336]	; (8000a54 <main+0x2b8>)
 8000904:	f003 fcd5 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000908:	2318      	movs	r3, #24
 800090a:	4a61      	ldr	r2, [pc, #388]	; (8000a90 <main+0x2f4>)
 800090c:	4960      	ldr	r1, [pc, #384]	; (8000a90 <main+0x2f4>)
 800090e:	4854      	ldr	r0, [pc, #336]	; (8000a60 <main+0x2c4>)
 8000910:	f003 fccf 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000914:	2318      	movs	r3, #24
 8000916:	4a5e      	ldr	r2, [pc, #376]	; (8000a90 <main+0x2f4>)
 8000918:	495d      	ldr	r1, [pc, #372]	; (8000a90 <main+0x2f4>)
 800091a:	4854      	ldr	r0, [pc, #336]	; (8000a6c <main+0x2d0>)
 800091c:	f003 fcc9 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			for(i = 0; i < AUDIO_REC/2; i++)
 8000920:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <main+0x2ec>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e024      	b.n	8000972 <main+0x1d6>
			{
				sample16 = ((int)buf_out[i]);
 8000928:	4b57      	ldr	r3, [pc, #348]	; (8000a88 <main+0x2ec>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <main+0x2f4>)
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	edd3 7a00 	vldr	s15, [r3]
 8000936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093a:	ee17 3a90 	vmov	r3, s15
 800093e:	b21a      	sxth	r2, r3
 8000940:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <main+0x2f8>)
 8000942:	801a      	strh	r2, [r3, #0]
				//sample16 =  RightRecBuff[i] >> 8;
				uSample16 = ((int)sample16) + 4096;
 8000944:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <main+0x2f8>)
 8000946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094a:	b29b      	uxth	r3, r3
 800094c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <main+0x2fc>)
 8000954:	801a      	strh	r2, [r3, #0]
				txBuf[i] = (uSample16>>1) ;
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <main+0x2fc>)
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <main+0x2ec>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	0852      	lsrs	r2, r2, #1
 8000960:	b291      	uxth	r1, r2
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <main+0x300>)
 8000964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000968:	4b47      	ldr	r3, [pc, #284]	; (8000a88 <main+0x2ec>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a46      	ldr	r2, [pc, #280]	; (8000a88 <main+0x2ec>)
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <main+0x2ec>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b17      	cmp	r3, #23
 8000978:	d9d6      	bls.n	8000928 <main+0x18c>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[0], AUDIO_REC/2, DAC_ALIGN_12B_R);
			if(PlaybackStarted == 0)
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <main+0x304>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d10a      	bne.n	8000998 <main+0x1fc>
			{
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, txBuf, AUDIO_REC, DAC_ALIGN_12B_R);
 8000982:	2300      	movs	r3, #0
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2330      	movs	r3, #48	; 0x30
 8000988:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <main+0x300>)
 800098a:	2100      	movs	r1, #0
 800098c:	4827      	ldr	r0, [pc, #156]	; (8000a2c <main+0x290>)
 800098e:	f000 fd57 	bl	8001440 <HAL_DAC_Start_DMA>
				PlaybackStarted = 1;
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <main+0x304>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
			}
			DmaRightRecHalfBuffCplt = 0;
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <main+0x2e8>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <main+0x308>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	f47f af7c 	bne.w	80008a0 <main+0x104>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <main+0x2ec>)
 80009aa:	2218      	movs	r2, #24
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e015      	b.n	80009dc <main+0x240>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 80009b0:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <main+0x2ec>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <main+0x2d8>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	121a      	asrs	r2, r3, #8
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <main+0x2ec>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	ee07 2a90 	vmov	s15, r2
 80009c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c8:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <main+0x2f0>)
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	edc3 7a00 	vstr	s15, [r3]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <main+0x2ec>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <main+0x2ec>)
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <main+0x2ec>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b2f      	cmp	r3, #47	; 0x2f
 80009e2:	d9e5      	bls.n	80009b0 <main+0x214>
			}
			arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&buf_in[AUDIO_REC/2], &buf_out[AUDIO_REC/2],AUDIO_REC/2);
 80009e4:	2318      	movs	r3, #24
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <main+0x30c>)
 80009e8:	4930      	ldr	r1, [pc, #192]	; (8000aac <main+0x310>)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <main+0x2a0>)
 80009ec:	f003 fc61 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 80009f0:	2318      	movs	r3, #24
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <main+0x30c>)
 80009f4:	492c      	ldr	r1, [pc, #176]	; (8000aa8 <main+0x30c>)
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <main+0x2ac>)
 80009f8:	f003 fc5b 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 80009fc:	2318      	movs	r3, #24
 80009fe:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <main+0x30c>)
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <main+0x30c>)
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <main+0x2b8>)
 8000a04:	f003 fc55 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000a08:	2318      	movs	r3, #24
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <main+0x30c>)
 8000a0c:	4926      	ldr	r1, [pc, #152]	; (8000aa8 <main+0x30c>)
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <main+0x2c4>)
 8000a10:	f003 fc4f 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000a14:	2318      	movs	r3, #24
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <main+0x30c>)
 8000a18:	4923      	ldr	r1, [pc, #140]	; (8000aa8 <main+0x30c>)
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <main+0x2d0>)
 8000a1c:	f003 fc49 	bl	80042b2 <arm_biquad_cascade_df2T_f32>
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <main+0x2ec>)
 8000a22:	2218      	movs	r2, #24
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e068      	b.n	8000afa <main+0x35e>
 8000a28:	2000f620 	.word	0x2000f620
 8000a2c:	2000f1ec 	.word	0x2000f1ec
 8000a30:	2000eb8c 	.word	0x2000eb8c
 8000a34:	20000000 	.word	0x20000000
 8000a38:	2000f374 	.word	0x2000f374
 8000a3c:	2000f3ac 	.word	0x2000f3ac
 8000a40:	20002f1c 	.word	0x20002f1c
 8000a44:	2000f4f4 	.word	0x2000f4f4
 8000a48:	2000f4e8 	.word	0x2000f4e8
 8000a4c:	20005e38 	.word	0x20005e38
 8000a50:	2000f3b8 	.word	0x2000f3b8
 8000a54:	2000f368 	.word	0x2000f368
 8000a58:	20008d54 	.word	0x20008d54
 8000a5c:	2000f5f0 	.word	0x2000f5f0
 8000a60:	2000f4dc 	.word	0x2000f4dc
 8000a64:	2000bc70 	.word	0x2000bc70
 8000a68:	2000f4ac 	.word	0x2000f4ac
 8000a6c:	2000f5e4 	.word	0x2000f5e4
 8000a70:	2000f31c 	.word	0x2000f31c
 8000a74:	2000ebd0 	.word	0x2000ebd0
 8000a78:	2000f248 	.word	0x2000f248
 8000a7c:	2000f3a8 	.word	0x2000f3a8
 8000a80:	2000f66c 	.word	0x2000f66c
 8000a84:	2000f1d4 	.word	0x2000f1d4
 8000a88:	2000f3e8 	.word	0x2000f3e8
 8000a8c:	2000f524 	.word	0x2000f524
 8000a90:	2000f3ec 	.word	0x2000f3ec
 8000a94:	2000f1d2 	.word	0x2000f1d2
 8000a98:	2000f1d0 	.word	0x2000f1d0
 8000a9c:	2000eed0 	.word	0x2000eed0
 8000aa0:	2000f1d6 	.word	0x2000f1d6
 8000aa4:	2000f1d5 	.word	0x2000f1d5
 8000aa8:	2000f44c 	.word	0x2000f44c
 8000aac:	2000f584 	.word	0x2000f584
			{
				sample16 = ((int)buf_out[i]);
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <main+0x370>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <main+0x374>)
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	edd3 7a00 	vldr	s15, [r3]
 8000abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac2:	ee17 3a90 	vmov	r3, s15
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <main+0x378>)
 8000aca:	801a      	strh	r2, [r3, #0]
				//sample16 =  RightRecBuff[i] >> 8;
				uSample16 = ((int)sample16) + 4096;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <main+0x378>)
 8000ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <main+0x37c>)
 8000adc:	801a      	strh	r2, [r3, #0]
				txBuf[i] = (uSample16>>1) ;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <main+0x37c>)
 8000ae0:	881a      	ldrh	r2, [r3, #0]
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <main+0x370>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	0852      	lsrs	r2, r2, #1
 8000ae8:	b291      	uxth	r1, r2
 8000aea:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <main+0x380>)
 8000aec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <main+0x370>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <main+0x370>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <main+0x370>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b2f      	cmp	r3, #47	; 0x2f
 8000b00:	d9d6      	bls.n	8000ab0 <main+0x314>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[AUDIO_REC/2], AUDIO_REC/2, DAC_ALIGN_12B_R);

			DmaRightRecBuffCplt = 0;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <main+0x384>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 8000b08:	e6ca      	b.n	80008a0 <main+0x104>
 8000b0a:	bf00      	nop
 8000b0c:	2000f3e8 	.word	0x2000f3e8
 8000b10:	2000f3ec 	.word	0x2000f3ec
 8000b14:	2000f1d2 	.word	0x2000f1d2
 8000b18:	2000f1d0 	.word	0x2000f1d0
 8000b1c:	2000eed0 	.word	0x2000eed0
 8000b20:	2000f1d5 	.word	0x2000f1d5

08000b24 <HAL_UART_RxCpltCallback>:
}
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	switch((int8_t)Uart_array[0])
 8000b2c:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	3b01      	subs	r3, #1
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	f200 8085 	bhi.w	8000c44 <HAL_UART_RxCpltCallback+0x120>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <HAL_UART_RxCpltCallback+0x1c>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b8b 	.word	0x08000b8b
 8000b48:	08000bc1 	.word	0x08000bc1
 8000b4c:	08000bed 	.word	0x08000bed
 8000b50:	08000c19 	.word	0x08000c19
	{
	case 1:
		gainDB[0] =(int8_t)(Uart_array[1]);
 8000b54:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000b5e:	601a      	str	r2, [r3, #0]
		//S1.pCoeffs=&band1_coeff[(5*NUMSTAGES)*(gainDB[0]+10)];
		arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8000b60:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000b68:	4613      	mov	r3, r2
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <HAL_UART_RxCpltCallback+0x130>)
 8000b72:	441a      	add	r2, r3
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <HAL_UART_RxCpltCallback+0x134>)
 8000b76:	2103      	movs	r1, #3
 8000b78:	4838      	ldr	r0, [pc, #224]	; (8000c5c <HAL_UART_RxCpltCallback+0x138>)
 8000b7a:	f003 fd55 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b7e:	2120      	movs	r1, #32
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fcc2 	bl	800250c <HAL_GPIO_TogglePin>
		break;
 8000b88:	e05c      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x120>
	case 2:
		gainDB[1] =(int8_t)(Uart_array[1]);
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000b94:	605a      	str	r2, [r3, #4]
		//S2.pCoeffs=&band2_coeff[(5*NUMSTAGES)*(gainDB[1]+10)];
		arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	; (8000c60 <HAL_UART_RxCpltCallback+0x13c>)
 8000ba8:	441a      	add	r2, r3
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <HAL_UART_RxCpltCallback+0x140>)
 8000bac:	2103      	movs	r1, #3
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <HAL_UART_RxCpltCallback+0x144>)
 8000bb0:	f003 fd3a 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 fca7 	bl	800250c <HAL_GPIO_TogglePin>
		break;
 8000bbe:	e041      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x120>
	case 3:
		gainDB[2] =(int8_t)(Uart_array[1]);
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000bca:	609a      	str	r2, [r3, #8]
		arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_UART_RxCpltCallback+0x148>)
 8000bde:	441a      	add	r2, r3
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_UART_RxCpltCallback+0x14c>)
 8000be2:	2103      	movs	r1, #3
 8000be4:	4823      	ldr	r0, [pc, #140]	; (8000c74 <HAL_UART_RxCpltCallback+0x150>)
 8000be6:	f003 fd1f 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
		break;
 8000bea:	e02b      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x120>
	case 4:
		gainDB[3] =(int8_t)(Uart_array[1]);
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000bf6:	60da      	str	r2, [r3, #12]
		arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000c00:	4613      	mov	r3, r2
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_UART_RxCpltCallback+0x154>)
 8000c0a:	441a      	add	r2, r3
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_UART_RxCpltCallback+0x158>)
 8000c0e:	2103      	movs	r1, #3
 8000c10:	481b      	ldr	r0, [pc, #108]	; (8000c80 <HAL_UART_RxCpltCallback+0x15c>)
 8000c12:	f003 fd09 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
		break;
 8000c16:	e015      	b.n	8000c44 <HAL_UART_RxCpltCallback+0x120>
	case 5:
		gainDB[4] =(int8_t)(Uart_array[1]);
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_UART_RxCpltCallback+0x128>)
 8000c1a:	785b      	ldrb	r3, [r3, #1]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000c22:	611a      	str	r2, [r3, #16]
		arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_UART_RxCpltCallback+0x12c>)
 8000c26:	691b      	ldr	r3, [r3, #16]
 8000c28:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <HAL_UART_RxCpltCallback+0x160>)
 8000c36:	441a      	add	r2, r3
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_RxCpltCallback+0x164>)
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	4813      	ldr	r0, [pc, #76]	; (8000c8c <HAL_UART_RxCpltCallback+0x168>)
 8000c3e:	f003 fcf3 	bl	8004628 <arm_biquad_cascade_df2T_init_f32>
		break;
 8000c42:	bf00      	nop
	}
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000f3a8 	.word	0x2000f3a8
 8000c50:	2000eb8c 	.word	0x2000eb8c
 8000c54:	20000000 	.word	0x20000000
 8000c58:	2000f374 	.word	0x2000f374
 8000c5c:	2000f3ac 	.word	0x2000f3ac
 8000c60:	20002f1c 	.word	0x20002f1c
 8000c64:	2000f4f4 	.word	0x2000f4f4
 8000c68:	2000f4e8 	.word	0x2000f4e8
 8000c6c:	20005e38 	.word	0x20005e38
 8000c70:	2000f3b8 	.word	0x2000f3b8
 8000c74:	2000f368 	.word	0x2000f368
 8000c78:	20008d54 	.word	0x20008d54
 8000c7c:	2000f5f0 	.word	0x2000f5f0
 8000c80:	2000f4dc 	.word	0x2000f4dc
 8000c84:	2000bc70 	.word	0x2000bc70
 8000c88:	2000f4ac 	.word	0x2000f4ac
 8000c8c:	2000f5e4 	.word	0x2000f5e4

08000c90 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	DmaRightRecHalfBuffCplt = 1;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000f1d4 	.word	0x2000f1d4

08000cb0 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	DmaRightRecBuffCplt = 1;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000f1d5 	.word	0x2000f1d5

08000cd0 <TestBlinking>:
void TestBlinking(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f001 fbfd 	bl	80024dc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce6:	f000 fa1d 	bl	8001124 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f001 fbf2 	bl	80024dc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f000 fa12 	bl	8001124 <HAL_Delay>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemClock_Config>:
  * @brief  The application entry point.
  * @retval int
  */
#include"body_DAC_DFSDM.h"
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0b0      	sub	sp, #192	; 0xc0
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d0e:	2244      	movs	r2, #68	; 0x44
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 fcb8 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2264      	movs	r2, #100	; 0x64
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fcaa 	bl	8004688 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d34:	2310      	movs	r3, #16
 8000d36:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d44:	2360      	movs	r3, #96	; 0x60
 8000d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000d5c:	2324      	movs	r3, #36	; 0x24
 8000d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d62:	2307      	movs	r3, #7
 8000d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 feb3 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d84:	f000 f836 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d88:	230f      	movs	r3, #15
 8000d8a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fabe 	bl	8003324 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dae:	f000 f821 	bl	8000df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <SystemClock_Config+0xec>)
 8000db4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fc79 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000dd0:	f000 f810 	bl	8000df4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dd8:	f001 fe2e 	bl	8002a38 <HAL_PWREx_ControlVoltageScaling>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000de2:	f000 f807 	bl	8000df4 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	37c0      	adds	r7, #192	; 0xc0
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	00010041 	.word	0x00010041

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	; 0x60
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f920 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <DMA1_Channel3_IRQHandler+0x10>)
 8000eae:	f001 f8bb 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000f200 	.word	0x2000f200

08000ebc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <DMA1_Channel4_IRQHandler+0x10>)
 8000ec2:	f001 f8b1 	bl	8002028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000f29c 	.word	0x2000f29c

08000ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <SystemInit+0x64>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <SystemInit+0x64>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SystemInit+0x68>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <SystemInit+0x68>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <SystemInit+0x68>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SystemInit+0x68>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <SystemInit+0x68>)
 8000efc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <SystemInit+0x68>)
 8000f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <SystemInit+0x68>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <SystemInit+0x68>)
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <SystemInit+0x68>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x64>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f4e:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <MX_TIM6_Init+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25-1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f54:	2218      	movs	r2, #24
 8000f56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64-1;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f60:	223f      	movs	r2, #63	; 0x3f
 8000f62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f6c:	f002 fece 	bl	8003d0c <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f76:	f7ff ff3d 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_TIM6_Init+0x64>)
 8000f88:	f002 ffda 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f92:	f7ff ff2f 	bl	8000df4 <Error_Handler>
  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000f620 	.word	0x2000f620
 8000fa4:	40001000 	.word	0x40001000

08000fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x38>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40001000 	.word	0x40001000
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ffe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
	ldr	r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001006:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopForever+0x16>)
	cmp	r2, r3
 800100e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001012:	f7ff ff5d 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 fb13 	bl	8004640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff fbbf 	bl	800079c <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001024:	080046f8 	.word	0x080046f8
	ldr	r0, =_sdata
 8001028:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800102c:	2000ebac 	.word	0x2000ebac
	ldr	r2, =_sbss
 8001030:	2000ebac 	.word	0x2000ebac
	ldr	r3, = _ebss
 8001034:	2000f6f0 	.word	0x2000f6f0

08001038 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_IRQHandler>

0800103a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f95f 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f80e 	bl	800106c <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105c:	f7ff fed2 	bl	8000e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_InitTick+0x6c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d023      	beq.n	80010c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_InitTick+0x70>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f96b 	bl	8001372 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10f      	bne.n	80010c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d809      	bhi.n	80010bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f935 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_InitTick+0x74>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e007      	b.n	80010cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e004      	b.n	80010cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e001      	b.n	80010cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000eba8 	.word	0x2000eba8
 80010dc:	2000eba0 	.word	0x2000eba0
 80010e0:	2000eba4 	.word	0x2000eba4

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000eba8 	.word	0x2000eba8
 8001108:	2000f6ec 	.word	0x2000f6ec

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000f6ec 	.word	0x2000f6ec

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_Delay+0x40>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000eba8 	.word	0x2000eba8

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e014      	b.n	80013c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7fe ff43 	bl	8000238 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2202      	movs	r2, #2
 80013b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	795b      	ldrb	r3, [r3, #5]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_DAC_Start+0x16>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e027      	b.n	8001434 <HAL_DAC_Start+0x66>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2202      	movs	r2, #2
 80013ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2201      	movs	r2, #1
 80013fe:	409a      	lsls	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */


#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001412:	2b3c      	cmp	r3, #60	; 0x3c
 8001414:	d107      	bne.n	8001426 <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	795b      	ldrb	r3, [r3, #5]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d101      	bne.n	800145e <HAL_DAC_Start_DMA+0x1e>
 800145a:	2302      	movs	r3, #2
 800145c:	e05b      	b.n	8001516 <HAL_DAC_Start_DMA+0xd6>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2202      	movs	r2, #2
 8001468:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4a2c      	ldr	r2, [pc, #176]	; (8001520 <HAL_DAC_Start_DMA+0xe0>)
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4a2b      	ldr	r2, [pc, #172]	; (8001524 <HAL_DAC_Start_DMA+0xe4>)
 8001478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4a2a      	ldr	r2, [pc, #168]	; (8001528 <HAL_DAC_Start_DMA+0xe8>)
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001490:	601a      	str	r2, [r3, #0]

  /* Case of use of channel 1 */
  switch (Alignment)
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d009      	beq.n	80014ac <HAL_DAC_Start_DMA+0x6c>
 8001498:	2b08      	cmp	r3, #8
 800149a:	d00c      	beq.n	80014b6 <HAL_DAC_Start_DMA+0x76>
 800149c:	2b00      	cmp	r3, #0
 800149e:	d000      	beq.n	80014a2 <HAL_DAC_Start_DMA+0x62>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 80014a0:	e00e      	b.n	80014c0 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3308      	adds	r3, #8
 80014a8:	617b      	str	r3, [r7, #20]
      break;
 80014aa:	e009      	b.n	80014c0 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	330c      	adds	r3, #12
 80014b2:	617b      	str	r3, [r7, #20]
      break;
 80014b4:	e004      	b.n	80014c0 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3310      	adds	r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
      break;
 80014be:	bf00      	nop
  }

  /* Enable the DMA channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ce:	601a      	str	r2, [r3, #0]

  /* Enable the DMA channel */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6898      	ldr	r0, [r3, #8]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	f000 fd45 	bl	8001f68 <HAL_DMA_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	74fb      	strb	r3, [r7, #19]

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_DAC_Start_DMA+0xc8>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2201      	movs	r2, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e005      	b.n	8001514 <HAL_DAC_Start_DMA+0xd4>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f043 0204 	orr.w	r2, r3, #4
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001514:	7cfb      	ldrb	r3, [r7, #19]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	0800175d 	.word	0x0800175d
 8001524:	0800177f 	.word	0x0800177f
 8001528:	0800179b 	.word	0x0800179b

0800152c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	795b      	ldrb	r3, [r3, #5]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DAC_ConfigChannel+0x1c>
 8001580:	2302      	movs	r3, #2
 8001582:	e0e7      	b.n	8001754 <HAL_DAC_ConfigChannel+0x1ec>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2202      	movs	r2, #2
 800158e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d154      	bne.n	8001642 <HAL_DAC_ConfigChannel+0xda>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001598:	f7ff fdb8 	bl	800110c <HAL_GetTick>
 800159c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d121      	bne.n	80015e8 <HAL_DAC_ConfigChannel+0x80>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015a4:	e011      	b.n	80015ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015a6:	f7ff fdb1 	bl	800110c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d90a      	bls.n	80015ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f043 0208 	orr.w	r2, r3, #8
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2203      	movs	r2, #3
 80015c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0c4      	b.n	8001754 <HAL_DAC_ConfigChannel+0x1ec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e6      	bne.n	80015a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fda3 	bl	8001124 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	6992      	ldr	r2, [r2, #24]
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	ea02 0103 	and.w	r1, r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	21ff      	movs	r1, #255	; 0xff
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	ea02 0103 	and.w	r1, r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d11d      	bne.n	8001686 <HAL_DAC_ConfigChannel+0x11e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	221f      	movs	r2, #31
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2207      	movs	r2, #7
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	22c0      	movs	r2, #192	; 0xc0
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43da      	mvns	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	400a      	ands	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fede 	bl	800152c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2201      	movs	r2, #1
 8001774:	711a      	strb	r2, [r3, #4]
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fed7 	bl	8001540 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f043 0204 	orr.w	r2, r3, #4
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fecd 	bl	8001554 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	711a      	strb	r2, [r3, #4]
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0ac      	b.n	8001934 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fa8c 	bl	8001cfc <DFSDM_GetChannelFromInstance>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_DFSDM_ChannelInit+0x174>)
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e09f      	b.n	8001934 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7fe fe7d 	bl	80004f4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017fa:	4b51      	ldr	r3, [pc, #324]	; (8001940 <HAL_DFSDM_ChannelInit+0x178>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_DFSDM_ChannelInit+0x178>)
 8001802:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <HAL_DFSDM_ChannelInit+0x178>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d125      	bne.n	8001858 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800180c:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 8001812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001816:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001818:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4948      	ldr	r1, [pc, #288]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 800182c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001830:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800183a:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	3b01      	subs	r3, #1
 8001844:	041b      	lsls	r3, r3, #16
 8001846:	493f      	ldr	r1, [pc, #252]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800184c:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a3c      	ldr	r2, [pc, #240]	; (8001944 <HAL_DFSDM_ChannelInit+0x17c>)
 8001852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001856:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001866:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001876:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800187c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 020f 	bic.w	r2, r2, #15
 8001894:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	3b01      	subs	r3, #1
 80018ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f002 0207 	and.w	r2, r2, #7
 80018e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001914:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f9ea 	bl	8001cfc <DFSDM_GetChannelFromInstance>
 8001928:	4601      	mov	r1, r0
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_DFSDM_ChannelInit+0x174>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000f1dc 	.word	0x2000f1dc
 8001940:	2000f1d8 	.word	0x2000f1d8
 8001944:	40016000 	.word	0x40016000

08001948 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0ca      	b.n	8001af0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a66      	ldr	r2, [pc, #408]	; (8001af8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d109      	bne.n	8001978 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001968:	2b01      	cmp	r3, #1
 800196a:	d003      	beq.n	8001974 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0bb      	b.n	8001af0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe fd21 	bl	80003d8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80019a4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7a1b      	ldrb	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e007      	b.n	80019d0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80019ce:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7a5b      	ldrb	r3, [r3, #9]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d108      	bne.n	80019ea <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e007      	b.n	80019fa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001a08:	f023 0308 	bic.w	r3, r3, #8
 8001a0c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d108      	bne.n	8001a28 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7c1b      	ldrb	r3, [r3, #16]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0210 	orr.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e007      	b.n	8001a52 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0210 	bic.w	r2, r2, #16
 8001a50:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7c5b      	ldrb	r3, [r3, #17]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d108      	bne.n	8001a6c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0220 	orr.w	r2, r2, #32
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e007      	b.n	8001a7c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0220 	bic.w	r2, r2, #32
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001a8a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001a8e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6959      	ldr	r1, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001aa2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001aaa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7c1a      	ldrb	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40016100 	.word	0x40016100

08001afc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d02e      	beq.n	8001b74 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b1c:	2bff      	cmp	r3, #255	; 0xff
 8001b1e:	d029      	beq.n	8001b74 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10d      	bne.n	8001b56 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e00a      	b.n	8001b6c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
 8001b72:	e001      	b.n	8001b78 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	75fb      	strb	r3, [r7, #23]
 8001ba8:	e064      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bb8:	d002      	beq.n	8001bc0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	e059      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d002      	beq.n	8001be6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	e046      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d102      	bne.n	8001c06 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
 8001c04:	e036      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d004      	beq.n	8001c1a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d12a      	bne.n	8001c70 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d101      	bne.n	8001c38 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001c36:	e000      	b.n	8001c3a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001c38:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	331c      	adds	r3, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f000 f98a 	bl	8001f68 <HAL_DMA_Start_IT>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c66:	e005      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f86f 	bl	8001d4c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c6e:	e001      	b.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08001cbd 	.word	0x08001cbd
 8001c84:	08001cd9 	.word	0x08001cd9
 8001c88:	08001ca1 	.word	0x08001ca1

08001c8c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7fe ffee 	bl	8000c90 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7fe fff0 	bl	8000cb0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff ffcd 	bl	8001c8c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <DFSDM_GetChannelFromInstance+0x44>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e00f      	b.n	8001d32 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <DFSDM_GetChannelFromInstance+0x48>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d102      	bne.n	8001d20 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e008      	b.n	8001d32 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <DFSDM_GetChannelFromInstance+0x4c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d102      	bne.n	8001d2e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e001      	b.n	8001d32 <DFSDM_GetChannelFromInstance+0x36>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40016000 	.word	0x40016000
 8001d44:	40016020 	.word	0x40016020
 8001d48:	40016040 	.word	0x40016040

08001d4c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d108      	bne.n	8001d6e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e033      	b.n	8001dd6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d8c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d116      	bne.n	8001dd6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0202 	orr.w	r2, r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <DFSDM_RegConvStart+0x84>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	e000      	b.n	8001dd2 <DFSDM_RegConvStart+0x86>
 8001dd0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <DFSDM_RegConvStart+0x98>
 8001de0:	2202      	movs	r2, #2
 8001de2:	e000      	b.n	8001de6 <DFSDM_RegConvStart+0x9a>
 8001de4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e098      	b.n	8001f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_DMA_Init+0x150>)
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d80f      	bhi.n	8001e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_DMA_Init+0x154>)
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a4b      	ldr	r2, [pc, #300]	; (8001f50 <HAL_DMA_Init+0x158>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	009a      	lsls	r2, r3, #2
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a48      	ldr	r2, [pc, #288]	; (8001f54 <HAL_DMA_Init+0x15c>)
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
 8001e34:	e00e      	b.n	8001e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_DMA_Init+0x160>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <HAL_DMA_Init+0x158>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	009a      	lsls	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <HAL_DMA_Init+0x164>)
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eae:	d039      	beq.n	8001f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_DMA_Init+0x15c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d11a      	bne.n	8001ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_DMA_Init+0x168>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f003 031c 	and.w	r3, r3, #28
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4924      	ldr	r1, [pc, #144]	; (8001f60 <HAL_DMA_Init+0x168>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_DMA_Init+0x168>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f003 031c 	and.w	r3, r3, #28
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	491d      	ldr	r1, [pc, #116]	; (8001f60 <HAL_DMA_Init+0x168>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
 8001eee:	e019      	b.n	8001f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_DMA_Init+0x16c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	210f      	movs	r1, #15
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4917      	ldr	r1, [pc, #92]	; (8001f64 <HAL_DMA_Init+0x16c>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_DMA_Init+0x16c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f003 031c 	and.w	r3, r3, #28
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	4911      	ldr	r1, [pc, #68]	; (8001f64 <HAL_DMA_Init+0x16c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40020407 	.word	0x40020407
 8001f4c:	bffdfff8 	.word	0xbffdfff8
 8001f50:	cccccccd 	.word	0xcccccccd
 8001f54:	40020000 	.word	0x40020000
 8001f58:	bffdfbf8 	.word	0xbffdfbf8
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	400200a8 	.word	0x400200a8
 8001f64:	400204a8 	.word	0x400204a8

08001f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_DMA_Start_IT+0x20>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e04b      	b.n	8002020 <HAL_DMA_Start_IT+0xb8>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d13a      	bne.n	8002012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f8e0 	bl	8002186 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 020e 	orr.w	r2, r2, #14
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00f      	b.n	8002000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 020a 	orr.w	r2, r2, #10
 8001ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e005      	b.n	800201e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	f003 031c 	and.w	r3, r3, #28
 8002048:	2204      	movs	r2, #4
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d026      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x7a>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b00      	cmp	r3, #0
 800205c:	d021      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0204 	bic.w	r2, r2, #4
 800207a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f003 021c 	and.w	r2, r3, #28
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	2104      	movs	r1, #4
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b00      	cmp	r3, #0
 8002096:	d071      	beq.n	800217c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020a0:	e06c      	b.n	800217c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f003 031c 	and.w	r3, r3, #28
 80020aa:	2202      	movs	r2, #2
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02e      	beq.n	8002114 <HAL_DMA_IRQHandler+0xec>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d029      	beq.n	8002114 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 020a 	bic.w	r2, r2, #10
 80020dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 021c 	and.w	r2, r3, #28
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2102      	movs	r1, #2
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d038      	beq.n	800217c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002112:	e033      	b.n	800217c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f003 031c 	and.w	r3, r3, #28
 800211c:	2208      	movs	r2, #8
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02a      	beq.n	800217e <HAL_DMA_IRQHandler+0x156>
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d025      	beq.n	800217e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 021c 	and.w	r2, r3, #28
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800217c:	bf00      	nop
 800217e:	bf00      	nop
}
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f003 021c 	and.w	r2, r3, #28
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d108      	bne.n	80021ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021c8:	e007      	b.n	80021da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	60da      	str	r2, [r3, #12]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f6:	e154      	b.n	80024a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8146 	beq.w	800249c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d00b      	beq.n	8002230 <HAL_GPIO_Init+0x48>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d007      	beq.n	8002230 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002224:	2b11      	cmp	r3, #17
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b12      	cmp	r3, #18
 800222e:	d130      	bne.n	8002292 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002266:	2201      	movs	r2, #1
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0201 	and.w	r2, r3, #1
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0xea>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d123      	bne.n	800231a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	6939      	ldr	r1, [r7, #16]
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0203 	and.w	r2, r3, #3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80a0 	beq.w	800249c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	4b58      	ldr	r3, [pc, #352]	; (80024c0 <HAL_GPIO_Init+0x2d8>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_GPIO_Init+0x2d8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6613      	str	r3, [r2, #96]	; 0x60
 8002368:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <HAL_GPIO_Init+0x2d8>)
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002374:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_GPIO_Init+0x2dc>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800239e:	d019      	beq.n	80023d4 <HAL_GPIO_Init+0x1ec>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a49      	ldr	r2, [pc, #292]	; (80024c8 <HAL_GPIO_Init+0x2e0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_GPIO_Init+0x1e8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a48      	ldr	r2, [pc, #288]	; (80024cc <HAL_GPIO_Init+0x2e4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00d      	beq.n	80023cc <HAL_GPIO_Init+0x1e4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a47      	ldr	r2, [pc, #284]	; (80024d0 <HAL_GPIO_Init+0x2e8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d007      	beq.n	80023c8 <HAL_GPIO_Init+0x1e0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <HAL_GPIO_Init+0x2ec>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_GPIO_Init+0x1dc>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e008      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023c4:	2307      	movs	r3, #7
 80023c6:	e006      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023c8:	2303      	movs	r3, #3
 80023ca:	e004      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_GPIO_Init+0x1ee>
 80023d4:	2300      	movs	r3, #0
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	4093      	lsls	r3, r2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e6:	4937      	ldr	r1, [pc, #220]	; (80024c4 <HAL_GPIO_Init+0x2dc>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002418:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002442:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_GPIO_Init+0x2f0>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f aea3 	bne.w	80021f8 <HAL_GPIO_Init+0x10>
  }
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010000 	.word	0x40010000
 80024c8:	48000400 	.word	0x48000400
 80024cc:	48000800 	.word	0x48000800
 80024d0:	48000c00 	.word	0x48000c00
 80024d4:	48001000 	.word	0x48001000
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43d9      	mvns	r1, r3
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	400b      	ands	r3, r1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e081      	b.n	8002656 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe f8d4 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e006      	b.n	80025c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d104      	bne.n	80025da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b08a      	sub	sp, #40	; 0x28
 8002662:	af02      	add	r7, sp, #8
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	460b      	mov	r3, r1
 800266c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b20      	cmp	r3, #32
 800267c:	f040 80f1 	bne.w	8002862 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268e:	d101      	bne.n	8002694 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
 8002692:	e0e7      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_IsDeviceReady+0x44>
 800269e:	2302      	movs	r3, #2
 80026a0:	e0e0      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2224      	movs	r2, #36	; 0x24
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_I2C_IsDeviceReady+0x72>
 80026c0:	897b      	ldrh	r3, [r7, #10]
 80026c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ce:	e004      	b.n	80026da <HAL_I2C_IsDeviceReady+0x7c>
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fd14 	bl	800110c <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002712:	e034      	b.n	800277e <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d01a      	beq.n	8002752 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800271c:	f7fe fcf6 	bl	800110c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <HAL_I2C_IsDeviceReady+0xd4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e088      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b20      	cmp	r3, #32
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b10      	cmp	r3, #16
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_I2C_IsDeviceReady+0x12c>
 8002784:	7fbb      	ldrb	r3, [r7, #30]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0c4      	beq.n	8002714 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d01a      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	2120      	movs	r1, #32
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f862 	bl	800286c <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e058      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e04a      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f847 	bl	800286c <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e03d      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2210      	movs	r2, #16
 80027ee:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2220      	movs	r2, #32
 80027f6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d118      	bne.n	8002832 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	2120      	movs	r1, #32
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f826 	bl	800286c <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e01c      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2220      	movs	r2, #32
 8002830:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3301      	adds	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	f63f af3b 	bhi.w	80026b8 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
  }
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800287c:	e022      	b.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d01e      	beq.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002886:	f7fe fc41 	bl	800110c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d113      	bne.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e00f      	b.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d0cd      	beq.n	800287e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d138      	bne.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800290c:	2302      	movs	r3, #2
 800290e:	e032      	b.n	8002976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800293e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	d139      	bne.n	8002a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e033      	b.n	8002a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2224      	movs	r2, #36	; 0x24
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000

08002a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a46:	d130      	bne.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a54:	d038      	beq.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2232      	movs	r2, #50	; 0x32
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7c:	e002      	b.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d102      	bne.n	8002a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f2      	bne.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa4:	d110      	bne.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e00f      	b.n	8002aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d007      	beq.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	2000eba0 	.word	0x2000eba0
 8002ae0:	431bde83 	.word	0x431bde83

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f000 bc11 	b.w	800331a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af8:	4ba0      	ldr	r3, [pc, #640]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b02:	4b9e      	ldr	r3, [pc, #632]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80e4 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4c>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	f040 808b 	bne.w	8002c3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 8087 	bne.w	8002c3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b30:	4b92      	ldr	r3, [pc, #584]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_OscConfig+0x64>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e3e8      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_RCC_OscConfig+0x7e>
 8002b58:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b60:	e005      	b.n	8002b6e <HAL_RCC_OscConfig+0x8a>
 8002b62:	4b86      	ldr	r3, [pc, #536]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d223      	bcs.n	8002bba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fd40 	bl	80035fc <RCC_SetFlashLatencyFromMSIRange>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e3c9      	b.n	800331a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b86:	4b7d      	ldr	r3, [pc, #500]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a7c      	ldr	r2, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4977      	ldr	r1, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba4:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	4972      	ldr	r1, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	e025      	b.n	8002c06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6f      	ldr	r2, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	496a      	ldr	r1, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	4965      	ldr	r1, [pc, #404]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fd00 	bl	80035fc <RCC_SetFlashLatencyFromMSIRange>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e389      	b.n	800331a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c06:	f000 fc6f 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_RCC_OscConfig+0x29c>)
 8002c18:	5cd3      	ldrb	r3, [r2, r3]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c22:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x2a0>)
 8002c24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c26:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x2a4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fa1e 	bl	800106c <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d052      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	e36d      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d032      	beq.n	8002cac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c52:	f7fe fa5b 	bl	800110c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fa57 	bl	800110c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e356      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	493a      	ldr	r1, [pc, #232]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
 8002caa:	e01a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fa28 	bl	800110c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fa24 	bl	800110c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e323      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1dc>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d073      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x21c>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d10e      	bne.n	8002d18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d063      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d15f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e300      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x24c>
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0x288>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x270>
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0x288>
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_RCC_OscConfig+0x298>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe f9ca 	bl	800110c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	e010      	b.n	8002d9e <HAL_RCC_OscConfig+0x2ba>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	080046b0 	.word	0x080046b0
 8002d84:	2000eba0 	.word	0x2000eba0
 8002d88:	2000eba4 	.word	0x2000eba4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe f9be 	bl	800110c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e2bd      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	4baf      	ldr	r3, [pc, #700]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x2a8>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe f9ae 	bl	800110c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe f9aa 	bl	800110c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e2a9      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc6:	4ba5      	ldr	r3, [pc, #660]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2d0>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d060      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x310>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d116      	bne.n	8002e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df4:	4b99      	ldr	r3, [pc, #612]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_OscConfig+0x328>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e286      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b93      	ldr	r3, [pc, #588]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	4990      	ldr	r1, [pc, #576]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e20:	e040      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2a:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a8b      	ldr	r2, [pc, #556]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe f969 	bl	800110c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe f965 	bl	800110c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e264      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e50:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b7f      	ldr	r3, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	497c      	ldr	r1, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e018      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a79      	ldr	r2, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f945 	bl	800110c <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe f941 	bl	800110c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e240      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e98:	4b70      	ldr	r3, [pc, #448]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	4a67      	ldr	r2, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe f920 	bl	800110c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f91c 	bl	800110c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e21b      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x3ec>
 8002ef0:	e01b      	b.n	8002f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe f903 	bl	800110c <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe f8ff 	bl	800110c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1fe      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1c:	4b4f      	ldr	r3, [pc, #316]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ef      	bne.n	8002f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80a6 	beq.w	8003084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f3c:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a43      	ldr	r2, [pc, #268]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	4b3e      	ldr	r3, [pc, #248]	; (8003060 <HAL_RCC_OscConfig+0x57c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d118      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x57c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <HAL_RCC_OscConfig+0x57c>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f8c6 	bl	800110c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fe f8c2 	bl	800110c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1c1      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCC_OscConfig+0x57c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4d8>
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fba:	e024      	b.n	8003006 <HAL_RCC_OscConfig+0x522>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d110      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x502>
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	4a24      	ldr	r2, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fcc:	f043 0304 	orr.w	r3, r3, #4
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe4:	e00f      	b.n	8003006 <HAL_RCC_OscConfig+0x522>
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff6:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe f87d 	bl	800110c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe f879 	bl	800110c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e176      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x578>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ed      	beq.n	8003016 <HAL_RCC_OscConfig+0x532>
 800303a:	e01a      	b.n	8003072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe f866 	bl	800110c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe f862 	bl	800110c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d906      	bls.n	8003064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e15f      	b.n	800331a <HAL_RCC_OscConfig+0x836>
 800305a:	bf00      	nop
 800305c:	40021000 	.word	0x40021000
 8003060:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003064:	4baa      	ldr	r3, [pc, #680]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e8      	bne.n	8003044 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4ba5      	ldr	r3, [pc, #660]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4aa4      	ldr	r2, [pc, #656]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d03c      	beq.n	800310a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01c      	beq.n	80030d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800309a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309e:	4a9c      	ldr	r2, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe f830 	bl	800110c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b0:	f7fe f82c 	bl	800110c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e12b      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030c2:	4b93      	ldr	r3, [pc, #588]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80030c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ef      	beq.n	80030b0 <HAL_RCC_OscConfig+0x5cc>
 80030d0:	e01b      	b.n	800310a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030d2:	4b8f      	ldr	r3, [pc, #572]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80030d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d8:	4a8d      	ldr	r2, [pc, #564]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e2:	f7fe f813 	bl	800110c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ea:	f7fe f80f 	bl	800110c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10e      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030fc:	4b84      	ldr	r3, [pc, #528]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80030fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ef      	bne.n	80030ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8102 	beq.w	8003318 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	2b02      	cmp	r3, #2
 800311a:	f040 80c5 	bne.w	80032a8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800311e:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0203 	and.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	429a      	cmp	r2, r3
 8003130:	d12c      	bne.n	800318c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	3b01      	subs	r3, #1
 800313e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d123      	bne.n	800318c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d11b      	bne.n	800318c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d113      	bne.n	800318c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d109      	bne.n	800318c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d067      	beq.n	800325c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d062      	beq.n	8003258 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003192:	4b5f      	ldr	r3, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0bb      	b.n	800331a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80031a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ae:	f7fd ffad 	bl	800110c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fd ffa9 	bl	800110c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0a8      	b.n	800331a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c8:	4b51      	ldr	r3, [pc, #324]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_OscConfig+0x830>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ee:	0212      	lsls	r2, r2, #8
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f6:	0852      	lsrs	r2, r2, #1
 80031f8:	3a01      	subs	r2, #1
 80031fa:	0552      	lsls	r2, r2, #21
 80031fc:	4311      	orrs	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0652      	lsls	r2, r2, #25
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800320e:	06d2      	lsls	r2, r2, #27
 8003210:	430a      	orrs	r2, r1
 8003212:	493f      	ldr	r1, [pc, #252]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003224:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003230:	f7fd ff6c 	bl	800110c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd ff68 	bl	800110c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e067      	b.n	800331a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003256:	e05f      	b.n	8003318 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e05e      	b.n	800331a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d157      	bne.n	8003318 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a28      	ldr	r2, [pc, #160]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003274:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003280:	f7fd ff44 	bl	800110c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd ff40 	bl	800110c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e03f      	b.n	800331a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x7a4>
 80032a6:	e037      	b.n	8003318 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d02d      	beq.n	800330a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032cc:	f023 0303 	bic.w	r3, r3, #3
 80032d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd ff13 	bl	800110c <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fd ff0f 	bl	800110c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e00e      	b.n	800331a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_OscConfig+0x82c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x806>
 8003308:	e006      	b.n	8003318 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e005      	b.n	800331a <HAL_RCC_OscConfig+0x836>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0c8      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d910      	bls.n	8003368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4961      	ldr	r1, [pc, #388]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b0      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d04c      	beq.n	800340e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d107      	bne.n	800338c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337c:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d121      	bne.n	80033cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e09e      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d115      	bne.n	80033cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e092      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ac:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e086      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e07e      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033cc:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 0203 	bic.w	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	493f      	ldr	r1, [pc, #252]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033de:	f7fd fe95 	bl	800110c <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e6:	f7fd fe91 	bl	800110c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e066      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 020c 	and.w	r2, r3, #12
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	429a      	cmp	r2, r3
 800340c:	d1eb      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	492c      	ldr	r1, [pc, #176]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d210      	bcs.n	800345c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4924      	ldr	r1, [pc, #144]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b22      	ldr	r3, [pc, #136]	; (80034d4 <HAL_RCC_ClockConfig+0x1b0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e036      	b.n	80034ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4918      	ldr	r1, [pc, #96]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4910      	ldr	r1, [pc, #64]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349a:	f000 f825 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 800349e:	4601      	mov	r1, r0
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCC_ClockConfig+0x1b4>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	fa21 f303 	lsr.w	r3, r1, r3
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fdd4 	bl	800106c <HAL_InitTick>
 80034c4:	4603      	mov	r3, r0
 80034c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80034c8:	7afb      	ldrb	r3, [r7, #11]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080046b0 	.word	0x080046b0
 80034e0:	2000eba0 	.word	0x2000eba0
 80034e4:	2000eba4 	.word	0x2000eba4

080034e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x34>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d121      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d11e      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800351c:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003528:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e005      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10d      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d102      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e004      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d101      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800356e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d133      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xa4>
 8003586:	2b03      	cmp	r3, #3
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0xaa>
 800358a:	e005      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800358e:	617b      	str	r3, [r7, #20]
      break;
 8003590:	e005      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003594:	617b      	str	r3, [r7, #20]
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	617b      	str	r3, [r7, #20]
      break;
 800359c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	3301      	adds	r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	fb02 f203 	mul.w	r2, r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_GetSysClockFreq+0x104>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0e5b      	lsrs	r3, r3, #25
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035de:	69bb      	ldr	r3, [r7, #24]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3724      	adds	r7, #36	; 0x24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000
 80035f0:	080046c0 	.word	0x080046c0
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200

080035fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003614:	f7ff fa02 	bl	8002a1c <HAL_PWREx_GetVoltageRange>
 8003618:	6178      	str	r0, [r7, #20]
 800361a:	e014      	b.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	6593      	str	r3, [r2, #88]	; 0x58
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003634:	f7ff f9f2 	bl	8002a1c <HAL_PWREx_GetVoltageRange>
 8003638:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364c:	d10b      	bne.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d919      	bls.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2ba0      	cmp	r3, #160	; 0xa0
 8003658:	d902      	bls.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365a:	2302      	movs	r3, #2
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e013      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e010      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b80      	cmp	r3, #128	; 0x80
 800366a:	d902      	bls.n	8003672 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800366c:	2303      	movs	r3, #3
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e00a      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d102      	bne.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003678:	2302      	movs	r3, #2
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e004      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d101      	bne.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 0207 	bic.w	r2, r3, #7
 8003690:	4909      	ldr	r1, [pc, #36]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d001      	beq.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40022000 	.word	0x40022000

080036bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c4:	2300      	movs	r3, #0
 80036c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c8:	2300      	movs	r3, #0
 80036ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02f      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e0:	d005      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036e6:	d015      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036ec:	e00f      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fa:	e00c      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fa12 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	74fb      	strb	r3, [r7, #19]
      break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371c:	4b51      	ldr	r3, [pc, #324]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	494e      	ldr	r1, [pc, #312]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003732:	e001      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 809e 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a39      	ldr	r2, [pc, #228]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003788:	f7fd fcc0 	bl	800110c <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800378e:	e009      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fd fcbc 	bl	800110c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d902      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	74fb      	strb	r3, [r7, #19]
        break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ef      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d15a      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01e      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d019      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd fc7c 	bl	800110c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003816:	e00b      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd fc78 	bl	800110c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d902      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	74fb      	strb	r3, [r7, #19]
            break;
 800382e:	e006      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ec      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	4904      	ldr	r1, [pc, #16]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4bac      	ldr	r3, [pc, #688]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4aab      	ldr	r2, [pc, #684]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388e:	4ba6      	ldr	r3, [pc, #664]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 0203 	bic.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	49a2      	ldr	r1, [pc, #648]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b0:	4b9d      	ldr	r3, [pc, #628]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 020c 	bic.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	499a      	ldr	r1, [pc, #616]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d2:	4b95      	ldr	r3, [pc, #596]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	4991      	ldr	r1, [pc, #580]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4989      	ldr	r1, [pc, #548]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003916:	4b84      	ldr	r3, [pc, #528]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4980      	ldr	r1, [pc, #512]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003938:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	4978      	ldr	r1, [pc, #480]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395a:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003968:	496f      	ldr	r1, [pc, #444]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	4967      	ldr	r1, [pc, #412]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	495e      	ldr	r1, [pc, #376]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	4956      	ldr	r1, [pc, #344]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039e2:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e8:	f023 0203 	bic.w	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d028      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	4945      	ldr	r1, [pc, #276]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]
 8003a30:	e011      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f872 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* set overall return value */
        status = ret;
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	492d      	ldr	r1, [pc, #180]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a28      	ldr	r2, [pc, #160]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a8c:	60d3      	str	r3, [r2, #12]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f843 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ade:	d10c      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x43e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f820 	bl	8003b2c <RCCEx_PLLSAI1_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x43e>
      {
        /* set overall return value */
        status = ret;
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	4904      	ldr	r1, [pc, #16]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000

08003b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b46:	4b70      	ldr	r3, [pc, #448]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0203 	and.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d10d      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d044      	beq.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	e041      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d00c      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0x6e>
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d013      	beq.n	8003bac <RCCEx_PLLSAI1_Config+0x80>
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d120      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b88:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11d      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b98:	e01a      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003baa:	e013      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bac:	4b56      	ldr	r3, [pc, #344]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bc8:	e006      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bce:	e004      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be0:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	4944      	ldr	r1, [pc, #272]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d17c      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a40      	ldr	r2, [pc, #256]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fa7d 	bl	800110c <HAL_GetTick>
 8003c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c14:	e009      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c16:	f7fd fa79 	bl	800110c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d902      	bls.n	8003c2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	73fb      	strb	r3, [r7, #15]
        break;
 8003c28:	e005      	b.n	8003c36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ef      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d15f      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d110      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	0211      	lsls	r1, r2, #8
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68d2      	ldr	r2, [r2, #12]
 8003c58:	06d2      	lsls	r2, r2, #27
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	492a      	ldr	r1, [pc, #168]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]
 8003c62:	e027      	b.n	8003cb4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d112      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	0211      	lsls	r1, r2, #8
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6912      	ldr	r2, [r2, #16]
 8003c80:	0852      	lsrs	r2, r2, #1
 8003c82:	3a01      	subs	r2, #1
 8003c84:	0552      	lsls	r2, r2, #21
 8003c86:	430a      	orrs	r2, r1
 8003c88:	491f      	ldr	r1, [pc, #124]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
 8003c8e:	e011      	b.n	8003cb4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c90:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	0211      	lsls	r1, r2, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6952      	ldr	r2, [r2, #20]
 8003ca6:	0852      	lsrs	r2, r2, #1
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0652      	lsls	r2, r2, #25
 8003cac:	430a      	orrs	r2, r1
 8003cae:	4916      	ldr	r1, [pc, #88]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd fa24 	bl	800110c <HAL_GetTick>
 8003cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc6:	e009      	b.n	8003cdc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc8:	f7fd fa20 	bl	800110c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cda:	e005      	b.n	8003ce8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4904      	ldr	r1, [pc, #16]	; (8003d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e049      	b.n	8003db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd f938 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 f88a 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d001      	beq.n	8003dd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e038      	b.n	8003e46 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_TIM_Base_Start+0x98>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIM_Base_Start+0x48>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dee:	d009      	beq.n	8003e04 <HAL_TIM_Base_Start+0x48>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_Base_Start+0x9c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_Base_Start+0x48>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_TIM_Base_Start+0xa0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d115      	bne.n	8003e30 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_TIM_Base_Start+0xa4>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d015      	beq.n	8003e42 <HAL_TIM_Base_Start+0x86>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d011      	beq.n	8003e42 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e008      	b.n	8003e42 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	00010007 	.word	0x00010007

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a2e      	ldr	r2, [pc, #184]	; (8003f30 <TIM_Base_SetConfig+0xcc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_Base_SetConfig+0x28>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0x28>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_Base_SetConfig+0xcc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00f      	beq.n	8003ec6 <TIM_Base_SetConfig+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d00b      	beq.n	8003ec6 <TIM_Base_SetConfig+0x62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <TIM_Base_SetConfig+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_Base_SetConfig+0x62>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <TIM_Base_SetConfig+0xd4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0x62>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <TIM_Base_SetConfig+0xd8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <TIM_Base_SetConfig+0xcc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <TIM_Base_SetConfig+0xd4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <TIM_Base_SetConfig+0xd8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400

08003f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e054      	b.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a13      	ldr	r2, [pc, #76]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40014000 	.word	0x40014000

0800401c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402e:	2b20      	cmp	r3, #32
 8004030:	d16c      	bne.n	800410c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_UART_Receive_DMA+0x22>
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e065      	b.n	800410e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_UART_Receive_DMA+0x34>
 800404c:	2302      	movs	r3, #2
 800404e:	e05e      	b.n	800410e <HAL_UART_Receive_DMA+0xf2>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2222      	movs	r2, #34	; 0x22
 8004070:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d02a      	beq.n	80040d0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <HAL_UART_Receive_DMA+0xfc>)
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <HAL_UART_Receive_DMA+0x100>)
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408e:	4a24      	ldr	r2, [pc, #144]	; (8004120 <HAL_UART_Receive_DMA+0x104>)
 8004090:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004096:	2200      	movs	r2, #0
 8004098:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3324      	adds	r3, #36	; 0x24
 80040a4:	4619      	mov	r1, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	461a      	mov	r2, r3
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	f7fd ff5b 	bl	8001f68 <HAL_DMA_Start_IT>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2210      	movs	r2, #16
 80040bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e01e      	b.n	800410e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004106:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	080041b7 	.word	0x080041b7
 800411c:	0800421f 	.word	0x0800421f
 8004120:	0800423b 	.word	0x0800423b

08004124 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004162:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	675a      	str	r2, [r3, #116]	; 0x74
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800418c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11e      	bne.n	8004210 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004208:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7fc fc87 	bl	8000b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff79 	bl	8004124 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d109      	bne.n	8004276 <UART_DMAError+0x3c>
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b21      	cmp	r3, #33	; 0x21
 8004266:	d106      	bne.n	8004276 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2200      	movs	r2, #0
 800426c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	f7ff ff6b 	bl	800414c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d109      	bne.n	8004298 <UART_DMAError+0x5e>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b22      	cmp	r3, #34	; 0x22
 8004288:	d106      	bne.n	8004298 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7ff ff6f 	bl	8004176 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429c:	f043 0210 	orr.w	r2, r3, #16
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f7ff ff47 	bl	8004138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <arm_biquad_cascade_df2T_f32>:
 80042b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b6:	7807      	ldrb	r7, [r0, #0]
 80042b8:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80042bc:	6885      	ldr	r5, [r0, #8]
 80042be:	3514      	adds	r5, #20
 80042c0:	6846      	ldr	r6, [r0, #4]
 80042c2:	3608      	adds	r6, #8
 80042c4:	ea4f 198e 	mov.w	r9, lr, lsl #6
 80042c8:	eb02 0b09 	add.w	fp, r2, r9
 80042cc:	f003 080f 	and.w	r8, r3, #15
 80042d0:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80042d4:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80042d8:	ed15 7a04 	vldr	s14, [r5, #-16]
 80042dc:	ed55 6a03 	vldr	s13, [r5, #-12]
 80042e0:	ed15 6a02 	vldr	s12, [r5, #-8]
 80042e4:	ed55 5a01 	vldr	s11, [r5, #-4]
 80042e8:	46b4      	mov	ip, r6
 80042ea:	ed56 3a02 	vldr	s7, [r6, #-8]
 80042ee:	ed16 4a01 	vldr	s8, [r6, #-4]
 80042f2:	f1be 0f00 	cmp.w	lr, #0
 80042f6:	f000 8195 	beq.w	8004624 <arm_biquad_cascade_df2T_f32+0x372>
 80042fa:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80042fe:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004302:	4674      	mov	r4, lr
 8004304:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8004308:	ee27 5a83 	vmul.f32	s10, s15, s6
 800430c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004310:	ee67 4a03 	vmul.f32	s9, s14, s6
 8004314:	ee34 4a84 	vadd.f32	s8, s9, s8
 8004318:	ee66 4a05 	vmul.f32	s9, s12, s10
 800431c:	ee34 4a84 	vadd.f32	s8, s9, s8
 8004320:	ee26 3a83 	vmul.f32	s6, s13, s6
 8004324:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 8004328:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 800432c:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8004330:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004334:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004338:	ee35 5a03 	vadd.f32	s10, s10, s6
 800433c:	ee27 4a23 	vmul.f32	s8, s14, s7
 8004340:	ee35 5a04 	vadd.f32	s10, s10, s8
 8004344:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004348:	ee33 3a05 	vadd.f32	s6, s6, s10
 800434c:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8004350:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8004354:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 8004358:	ee27 5a84 	vmul.f32	s10, s15, s8
 800435c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004360:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004364:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004368:	ee67 3a04 	vmul.f32	s7, s14, s8
 800436c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004370:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004374:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004378:	ee66 3a84 	vmul.f32	s7, s13, s8
 800437c:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8004380:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8004384:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004388:	ee74 4a83 	vadd.f32	s9, s9, s6
 800438c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004390:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004394:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004398:	ee35 5a23 	vadd.f32	s10, s10, s7
 800439c:	ee26 3a24 	vmul.f32	s6, s12, s9
 80043a0:	ee33 3a05 	vadd.f32	s6, s6, s10
 80043a4:	ee66 3a84 	vmul.f32	s7, s13, s8
 80043a8:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 80043ac:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 80043b0:	ee27 5a84 	vmul.f32	s10, s15, s8
 80043b4:	ee35 5a03 	vadd.f32	s10, s10, s6
 80043b8:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80043bc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80043c0:	ee67 3a04 	vmul.f32	s7, s14, s8
 80043c4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80043c8:	ee26 3a05 	vmul.f32	s6, s12, s10
 80043cc:	ee33 3a24 	vadd.f32	s6, s6, s9
 80043d0:	ee66 3a84 	vmul.f32	s7, s13, s8
 80043d4:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 80043d8:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 80043dc:	ee67 4a84 	vmul.f32	s9, s15, s8
 80043e0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80043e4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80043e8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80043ec:	ee67 3a04 	vmul.f32	s7, s14, s8
 80043f0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80043f4:	ee26 3a24 	vmul.f32	s6, s12, s9
 80043f8:	ee33 3a05 	vadd.f32	s6, s6, s10
 80043fc:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004400:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8004404:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 8004408:	ee27 5a84 	vmul.f32	s10, s15, s8
 800440c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004410:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004414:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004418:	ee67 3a04 	vmul.f32	s7, s14, s8
 800441c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004420:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004424:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004428:	ee66 3a84 	vmul.f32	s7, s13, s8
 800442c:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8004430:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8004434:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004438:	ee74 4a83 	vadd.f32	s9, s9, s6
 800443c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004440:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004444:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004448:	ee35 5a23 	vadd.f32	s10, s10, s7
 800444c:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004450:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004454:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004458:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 800445c:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8004460:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004464:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004468:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800446c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004470:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004474:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004478:	ee26 3a05 	vmul.f32	s6, s12, s10
 800447c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004480:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004484:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8004488:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800448c:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004490:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004494:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004498:	ee35 5a23 	vadd.f32	s10, s10, s7
 800449c:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044a0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044a4:	ee26 3a24 	vmul.f32	s6, s12, s9
 80044a8:	ee33 3a05 	vadd.f32	s6, s6, s10
 80044ac:	ee66 3a84 	vmul.f32	s7, s13, s8
 80044b0:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80044b4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80044b8:	ee27 5a84 	vmul.f32	s10, s15, s8
 80044bc:	ee35 5a03 	vadd.f32	s10, s10, s6
 80044c0:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80044c4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80044c8:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044cc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80044d0:	ee26 3a05 	vmul.f32	s6, s12, s10
 80044d4:	ee33 3a24 	vadd.f32	s6, s6, s9
 80044d8:	ee66 3a84 	vmul.f32	s7, s13, s8
 80044dc:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80044e0:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 80044e4:	ee67 4a84 	vmul.f32	s9, s15, s8
 80044e8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80044ec:	ee25 5a85 	vmul.f32	s10, s11, s10
 80044f0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044f4:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044f8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044fc:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004500:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004504:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004508:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800450c:	ed10 4a04 	vldr	s8, [r0, #-16]
 8004510:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004514:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004518:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800451c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004520:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004524:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004528:	ee26 3a05 	vmul.f32	s6, s12, s10
 800452c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004530:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004534:	ed03 5a04 	vstr	s10, [r3, #-16]
 8004538:	ed10 4a03 	vldr	s8, [r0, #-12]
 800453c:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004540:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004544:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004548:	ee35 5a23 	vadd.f32	s10, s10, s7
 800454c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004550:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004554:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004558:	ee33 3a05 	vadd.f32	s6, s6, s10
 800455c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004560:	ed43 4a03 	vstr	s9, [r3, #-12]
 8004564:	ed10 4a02 	vldr	s8, [r0, #-8]
 8004568:	ee27 5a84 	vmul.f32	s10, s15, s8
 800456c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004570:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004574:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004578:	ee67 3a04 	vmul.f32	s7, s14, s8
 800457c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004580:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004584:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004588:	ee66 3a84 	vmul.f32	s7, s13, s8
 800458c:	ed03 5a02 	vstr	s10, [r3, #-8]
 8004590:	ed10 4a01 	vldr	s8, [r0, #-4]
 8004594:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004598:	ee74 4a83 	vadd.f32	s9, s9, s6
 800459c:	ee25 5a85 	vmul.f32	s10, s11, s10
 80045a0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80045a4:	ee67 3a04 	vmul.f32	s7, s14, s8
 80045a8:	ee35 5a23 	vadd.f32	s10, s10, s7
 80045ac:	ee66 3a24 	vmul.f32	s7, s12, s9
 80045b0:	ee73 3a85 	vadd.f32	s7, s7, s10
 80045b4:	ee26 5a84 	vmul.f32	s10, s13, s8
 80045b8:	ee25 4aa4 	vmul.f32	s8, s11, s9
 80045bc:	ee34 4a05 	vadd.f32	s8, s8, s10
 80045c0:	ed43 4a01 	vstr	s9, [r3, #-4]
 80045c4:	3040      	adds	r0, #64	; 0x40
 80045c6:	3340      	adds	r3, #64	; 0x40
 80045c8:	3c01      	subs	r4, #1
 80045ca:	f47f ae9b 	bne.w	8004304 <arm_biquad_cascade_df2T_f32+0x52>
 80045ce:	4449      	add	r1, r9
 80045d0:	465b      	mov	r3, fp
 80045d2:	f1b8 0f00 	cmp.w	r8, #0
 80045d6:	d019      	beq.n	800460c <arm_biquad_cascade_df2T_f32+0x35a>
 80045d8:	eb01 000a 	add.w	r0, r1, sl
 80045dc:	ecf1 2a01 	vldmia	r1!, {s5}
 80045e0:	ee27 3aa2 	vmul.f32	s6, s15, s5
 80045e4:	ee33 3a23 	vadd.f32	s6, s6, s7
 80045e8:	ee67 3a22 	vmul.f32	s7, s14, s5
 80045ec:	ee33 4a84 	vadd.f32	s8, s7, s8
 80045f0:	ee26 5a03 	vmul.f32	s10, s12, s6
 80045f4:	ee75 3a04 	vadd.f32	s7, s10, s8
 80045f8:	ee66 2aa2 	vmul.f32	s5, s13, s5
 80045fc:	ee25 4a83 	vmul.f32	s8, s11, s6
 8004600:	ee34 4a22 	vadd.f32	s8, s8, s5
 8004604:	eca3 3a01 	vstmia	r3!, {s6}
 8004608:	4281      	cmp	r1, r0
 800460a:	d1e7      	bne.n	80045dc <arm_biquad_cascade_df2T_f32+0x32a>
 800460c:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8004610:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8004614:	3514      	adds	r5, #20
 8004616:	3608      	adds	r6, #8
 8004618:	4611      	mov	r1, r2
 800461a:	3f01      	subs	r7, #1
 800461c:	f47f ae5a 	bne.w	80042d4 <arm_biquad_cascade_df2T_f32+0x22>
 8004620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004624:	4613      	mov	r3, r2
 8004626:	e7d4      	b.n	80045d2 <arm_biquad_cascade_df2T_f32+0x320>

08004628 <arm_biquad_cascade_df2T_init_f32>:
 8004628:	b510      	push	{r4, lr}
 800462a:	6082      	str	r2, [r0, #8]
 800462c:	7001      	strb	r1, [r0, #0]
 800462e:	4604      	mov	r4, r0
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4618      	mov	r0, r3
 8004634:	2100      	movs	r1, #0
 8004636:	f000 f827 	bl	8004688 <memset>
 800463a:	6060      	str	r0, [r4, #4]
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop

08004640 <__libc_init_array>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4e0d      	ldr	r6, [pc, #52]	; (8004678 <__libc_init_array+0x38>)
 8004644:	4c0d      	ldr	r4, [pc, #52]	; (800467c <__libc_init_array+0x3c>)
 8004646:	1ba4      	subs	r4, r4, r6
 8004648:	10a4      	asrs	r4, r4, #2
 800464a:	2500      	movs	r5, #0
 800464c:	42a5      	cmp	r5, r4
 800464e:	d109      	bne.n	8004664 <__libc_init_array+0x24>
 8004650:	4e0b      	ldr	r6, [pc, #44]	; (8004680 <__libc_init_array+0x40>)
 8004652:	4c0c      	ldr	r4, [pc, #48]	; (8004684 <__libc_init_array+0x44>)
 8004654:	f000 f820 	bl	8004698 <_init>
 8004658:	1ba4      	subs	r4, r4, r6
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	2500      	movs	r5, #0
 800465e:	42a5      	cmp	r5, r4
 8004660:	d105      	bne.n	800466e <__libc_init_array+0x2e>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004668:	4798      	blx	r3
 800466a:	3501      	adds	r5, #1
 800466c:	e7ee      	b.n	800464c <__libc_init_array+0xc>
 800466e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004672:	4798      	blx	r3
 8004674:	3501      	adds	r5, #1
 8004676:	e7f2      	b.n	800465e <__libc_init_array+0x1e>
 8004678:	080046f0 	.word	0x080046f0
 800467c:	080046f0 	.word	0x080046f0
 8004680:	080046f0 	.word	0x080046f0
 8004684:	080046f4 	.word	0x080046f4

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
