
STM32L451CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004520  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  0002ebac  2**0
                  CONTENTS
  4 .ARM          00000000  080046f4  080046f4  0002ebac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f4  080046f4  0002ebac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000ebac  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b44  2000ebac  080132a8  0002ebac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f6f0  080132a8  0002f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002ebac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ae8  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003223  00000000  00000000  000486c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  0004b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0004ce80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cdd  00000000  00000000  0004e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134b6  00000000  00000000  00071f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8d8c  00000000  00000000  000853f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0015e17f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  0015e270  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000d34  00000000  00000000  00163c20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000ebac 	.word	0x2000ebac
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800469c 	.word	0x0800469c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000ebb0 	.word	0x2000ebb0
 80001d0:	0800469c 	.word	0x0800469c

080001d4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2224      	movs	r2, #36	; 0x24
 80001de:	2100      	movs	r1, #0
 80001e0:	4618      	mov	r0, r3
 80001e2:	f004 fa53 	bl	800468c <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80001e6:	4b12      	ldr	r3, [pc, #72]	; (8000230 <MX_DAC1_Init+0x5c>)
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <MX_DAC1_Init+0x60>)
 80001ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80001ec:	4810      	ldr	r0, [pc, #64]	; (8000230 <MX_DAC1_Init+0x5c>)
 80001ee:	f001 f8ce 	bl	800138e <HAL_DAC_Init>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80001f8:	f000 fdfe 	bl	8000df8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000200:	2304      	movs	r3, #4
 8000202:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	4619      	mov	r1, r3
 8000216:	4806      	ldr	r0, [pc, #24]	; (8000230 <MX_DAC1_Init+0x5c>)
 8000218:	f001 f9a8 	bl	800156c <HAL_DAC_ConfigChannel>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000222:	f000 fde9 	bl	8000df8 <Error_Handler>
  }

}
 8000226:	bf00      	nop
 8000228:	3728      	adds	r7, #40	; 0x28
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	2000f1ec 	.word	0x2000f1ec
 8000234:	40007400 	.word	0x40007400

08000238 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <HAL_DAC_MspInit+0xcc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d14f      	bne.n	80002fa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800025a:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 800025c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800025e:	4a2a      	ldr	r2, [pc, #168]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000264:	6593      	str	r3, [r2, #88]	; 0x58
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800026a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a24      	ldr	r2, [pc, #144]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <HAL_DAC_MspInit+0xd0>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800028a:	2310      	movs	r3, #16
 800028c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800028e:	2303      	movs	r3, #3
 8000290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000292:	2300      	movs	r3, #0
 8000294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	4619      	mov	r1, r3
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f001 ffa4 	bl	80021ec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002a6:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <HAL_DAC_MspInit+0xd8>)
 80002a8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002ac:	2206      	movs	r2, #6
 80002ae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002d4:	2220      	movs	r2, #32
 80002d6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002e0:	f001 fd8c 	bl	8001dfc <HAL_DMA_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80002ea:	f000 fd85 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <HAL_DAC_MspInit+0xd4>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80002fa:	bf00      	nop
 80002fc:	3728      	adds	r7, #40	; 0x28
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40007400 	.word	0x40007400
 8000308:	40021000 	.word	0x40021000
 800030c:	2000f200 	.word	0x2000f200
 8000310:	40020030 	.word	0x40020030

08000314 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000318:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <MX_DFSDM1_Init+0xbc>)
 800031c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800031e:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 8000326:	2201      	movs	r2, #1
 8000328:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800032a:	4b28      	ldr	r3, [pc, #160]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 800032c:	2200      	movs	r2, #0
 800032e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 8000332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000336:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000338:	4b24      	ldr	r3, [pc, #144]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 800033a:	2240      	movs	r2, #64	; 0x40
 800033c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 8000340:	2201      	movs	r2, #1
 8000342:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000344:	4821      	ldr	r0, [pc, #132]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 8000346:	f001 fb01 	bl	800194c <HAL_DFSDM_FilterInit>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000350:	f000 fd52 	bl	8000df8 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000356:	4a20      	ldr	r2, [pc, #128]	; (80003d8 <MX_DFSDM1_Init+0xc4>)
 8000358:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 800035c:	2201      	movs	r2, #1
 800035e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000360:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 25;
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000368:	2219      	movs	r2, #25
 800036a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000380:	2200      	movs	r2, #0
 8000382:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000386:	2204      	movs	r2, #4
 8000388:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000392:	220a      	movs	r2, #10
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 8000398:	2200      	movs	r2, #0
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <MX_DFSDM1_Init+0xc0>)
 80003a4:	f001 fa12 	bl	80017cc <HAL_DFSDM_ChannelInit>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80003ae:	f000 fd23 	bl	8000df8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80003b2:	2201      	movs	r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_DFSDM1_Init+0xb8>)
 80003b8:	f001 fba2 	bl	8001b00 <HAL_DFSDM_FilterConfigRegChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80003c2:	f000 fd19 	bl	8000df8 <Error_Handler>
  }

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000f248 	.word	0x2000f248
 80003d0:	40016100 	.word	0x40016100
 80003d4:	2000f2e4 	.word	0x2000f2e4
 80003d8:	40016000 	.word	0x40016000

080003dc <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80003f4:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x104>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d136      	bne.n	800046a <HAL_DFSDM_FilterMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80003fc:	4b39      	ldr	r3, [pc, #228]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x108>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a38      	ldr	r2, [pc, #224]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x108>)
 8000404:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000406:	4b37      	ldr	r3, [pc, #220]	; (80004e4 <HAL_DFSDM_FilterMspInit+0x108>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d10b      	bne.n	8000426 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800040e:	4b36      	ldr	r3, [pc, #216]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000412:	4a35      	ldr	r2, [pc, #212]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000418:	6613      	str	r3, [r2, #96]	; 0x60
 800041a:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 800041c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000422:	613b      	str	r3, [r7, #16]
 8000424:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4a2f      	ldr	r2, [pc, #188]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA5     ------> DFSDM1_CKOUT
    PA7     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800043e:	23a0      	movs	r3, #160	; 0xa0
 8000440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800044e:	2306      	movs	r3, #6
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f001 fec6 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x104>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <HAL_DFSDM_FilterMspInit+0x104>)
 8000468:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a1f      	ldr	r2, [pc, #124]	; (80004ec <HAL_DFSDM_FilterMspInit+0x110>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d131      	bne.n	80004d8 <HAL_DFSDM_FilterMspInit+0xfc>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <HAL_DFSDM_FilterMspInit+0x118>)
 8000478:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 8000494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000498:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 800049c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004a0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004a4:	2220      	movs	r2, #32
 80004a6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80004ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80004b0:	480f      	ldr	r0, [pc, #60]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004b2:	f001 fca3 	bl	8001dfc <HAL_DMA_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <HAL_DFSDM_FilterMspInit+0xe4>
    {
      Error_Handler();
 80004bc:	f000 fc9c 	bl	8000df8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004d0:	629a      	str	r2, [r3, #40]	; 0x28
 80004d2:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <HAL_DFSDM_FilterMspInit+0x114>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80004d8:	bf00      	nop
 80004da:	3728      	adds	r7, #40	; 0x28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000ebcc 	.word	0x2000ebcc
 80004e4:	2000ebc8 	.word	0x2000ebc8
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40016100 	.word	0x40016100
 80004f0:	2000f29c 	.word	0x2000f29c
 80004f4:	40020044 	.word	0x40020044

080004f8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d136      	bne.n	8000586 <HAL_DFSDM_ChannelMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000518:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <HAL_DFSDM_ChannelMspInit+0x9c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a1d      	ldr	r2, [pc, #116]	; (8000594 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000520:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <HAL_DFSDM_ChannelMspInit+0x9c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a14      	ldr	r2, [pc, #80]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA5     ------> DFSDM1_CKOUT
    PA7     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800056a:	2306      	movs	r3, #6
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f001 fe38 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x98>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000584:	6013      	str	r3, [r2, #0]
  }
}
 8000586:	bf00      	nop
 8000588:	3728      	adds	r7, #40	; 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000ebcc 	.word	0x2000ebcc
 8000594:	2000ebc8 	.word	0x2000ebc8
 8000598:	40021000 	.word	0x40021000

0800059c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_DMA_Init+0x48>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a6:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <MX_DMA_Init+0x48>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	; 0x48
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_DMA_Init+0x48>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	200d      	movs	r0, #13
 80005c0:	f000 feaf 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005c4:	200d      	movs	r0, #13
 80005c6:	f000 fec8 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200e      	movs	r0, #14
 80005d0:	f000 fea7 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005d4:	200e      	movs	r0, #14
 80005d6:	f000 fec0 	bl	800135a <HAL_NVIC_EnableIRQ>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_GPIO_Init+0xa8>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <MX_GPIO_Init+0xa8>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_GPIO_Init+0xa8>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f001 ff52 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <MX_GPIO_Init+0xac>)
 8000644:	f001 ff4c 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 fdc2 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xac>)
 8000682:	f001 fdb3 	bl	80021ec <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_I2C1_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_I2C1_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_I2C1_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_I2C1_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_I2C1_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_I2C1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_I2C1_Init+0x74>)
 80006d4:	f001 ff36 	bl	8002544 <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006de:	f000 fb8b 	bl	8000df8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_I2C1_Init+0x74>)
 80006e6:	f002 f903 	bl	80028f0 <HAL_I2CEx_ConfigAnalogFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f0:	f000 fb82 	bl	8000df8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2C1_Init+0x74>)
 80006f8:	f002 f945 	bl	8002986 <HAL_I2CEx_ConfigDigitalFilter>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 fb79 	bl	8000df8 <Error_Handler>
  }

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000f31c 	.word	0x2000f31c
 8000710:	40005400 	.word	0x40005400
 8000714:	10808dd3 	.word	0x10808dd3

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d127      	bne.n	800078a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000752:	23c0      	movs	r3, #192	; 0xc0
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000756:	2312      	movs	r3, #18
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075a:	2301      	movs	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000762:	2304      	movs	r3, #4
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_I2C_MspInit+0x84>)
 800076e:	f001 fd3d 	bl	80021ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <main>:
int gainDB[5] = {10,10,5,6,7};
void TestBlinking(void);


int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af02      	add	r7, sp, #8
	HAL_Init();
 80007a6:	f000 fc4a 	bl	800103e <HAL_Init>
	SystemClock_Config();
 80007aa:	f000 faad 	bl	8000d08 <SystemClock_Config>
	MX_GPIO_Init();
 80007ae:	f7ff ff1b 	bl	80005e8 <MX_GPIO_Init>
	MX_DMA_Init();
 80007b2:	f7ff fef3 	bl	800059c <MX_DMA_Init>
	MX_I2C1_Init();
 80007b6:	f7ff ff6f 	bl	8000698 <MX_I2C1_Init>
	MX_DFSDM1_Init();
 80007ba:	f7ff fdab 	bl	8000314 <MX_DFSDM1_Init>
	MX_DAC1_Init();
 80007be:	f7ff fd09 	bl	80001d4 <MX_DAC1_Init>
	MX_TIM6_Init();
 80007c2:	f000 fbbd 	bl	8000f40 <MX_TIM6_Init>


	HAL_TIM_Base_Start(&htim6);
 80007c6:	4899      	ldr	r0, [pc, #612]	; (8000a2c <main+0x28c>)
 80007c8:	f003 fafa 	bl	8003dc0 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80007cc:	2100      	movs	r1, #0
 80007ce:	4898      	ldr	r0, [pc, #608]	; (8000a30 <main+0x290>)
 80007d0:	f000 fdff 	bl	80013d2 <HAL_DAC_Start>
	TestBlinking();
 80007d4:	f000 fa7e 	bl	8000cd4 <TestBlinking>
	//10*(gainDB[0]+10)  ==> first 10 is for (5*NUMSTAGES)  , second 10 is for -10 to 10 gainDB
	arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 80007d8:	4b96      	ldr	r3, [pc, #600]	; (8000a34 <main+0x294>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80007e0:	4613      	mov	r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	1a9b      	subs	r3, r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4a93      	ldr	r2, [pc, #588]	; (8000a38 <main+0x298>)
 80007ea:	441a      	add	r2, r3
 80007ec:	4b93      	ldr	r3, [pc, #588]	; (8000a3c <main+0x29c>)
 80007ee:	2103      	movs	r1, #3
 80007f0:	4893      	ldr	r0, [pc, #588]	; (8000a40 <main+0x2a0>)
 80007f2:	f003 ff1b 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 80007f6:	4b8f      	ldr	r3, [pc, #572]	; (8000a34 <main+0x294>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80007fe:	4613      	mov	r3, r2
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4a8f      	ldr	r2, [pc, #572]	; (8000a44 <main+0x2a4>)
 8000808:	441a      	add	r2, r3
 800080a:	4b8f      	ldr	r3, [pc, #572]	; (8000a48 <main+0x2a8>)
 800080c:	2103      	movs	r1, #3
 800080e:	488f      	ldr	r0, [pc, #572]	; (8000a4c <main+0x2ac>)
 8000810:	f003 ff0c 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000814:	4b87      	ldr	r3, [pc, #540]	; (8000a34 <main+0x294>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800081c:	4613      	mov	r3, r2
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4a8a      	ldr	r2, [pc, #552]	; (8000a50 <main+0x2b0>)
 8000826:	441a      	add	r2, r3
 8000828:	4b8a      	ldr	r3, [pc, #552]	; (8000a54 <main+0x2b4>)
 800082a:	2103      	movs	r1, #3
 800082c:	488a      	ldr	r0, [pc, #552]	; (8000a58 <main+0x2b8>)
 800082e:	f003 fefd 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <main+0x294>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800083a:	4613      	mov	r3, r2
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4a86      	ldr	r2, [pc, #536]	; (8000a5c <main+0x2bc>)
 8000844:	441a      	add	r2, r3
 8000846:	4b86      	ldr	r3, [pc, #536]	; (8000a60 <main+0x2c0>)
 8000848:	2103      	movs	r1, #3
 800084a:	4886      	ldr	r0, [pc, #536]	; (8000a64 <main+0x2c4>)
 800084c:	f003 feee 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <main+0x294>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000858:	4613      	mov	r3, r2
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4a81      	ldr	r2, [pc, #516]	; (8000a68 <main+0x2c8>)
 8000862:	441a      	add	r2, r3
 8000864:	4b81      	ldr	r3, [pc, #516]	; (8000a6c <main+0x2cc>)
 8000866:	2103      	movs	r1, #3
 8000868:	4881      	ldr	r0, [pc, #516]	; (8000a70 <main+0x2d0>)
 800086a:	f003 fedf 	bl	800462c <arm_biquad_cascade_df2T_init_f32>

	if (HAL_I2C_IsDeviceReady(&hi2c1, AMPLIFIER_ADDRESS, 1, 10) == HAL_OK){
 800086e:	230a      	movs	r3, #10
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000876:	487f      	ldr	r0, [pc, #508]	; (8000a74 <main+0x2d4>)
 8000878:	f001 fef3 	bl	8002662 <HAL_I2C_IsDeviceReady>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <main+0xe6>
			TestBlinking();
 8000882:	f000 fa27 	bl	8000cd4 <TestBlinking>
		}
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	497b      	ldr	r1, [pc, #492]	; (8000a78 <main+0x2d8>)
 800088a:	487c      	ldr	r0, [pc, #496]	; (8000a7c <main+0x2dc>)
 800088c:	f001 f97e 	bl	8001b8c <HAL_DFSDM_FilterRegularStart_DMA>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <main+0xfa>
	{
		Error_Handler();
 8000896:	f000 faaf 	bl	8000df8 <Error_Handler>
	}
	/*if(HAL_OK != HAL_DFSDM_FilterRegularMsbStart_DMA(&hdfsdm1_filter0, RecBuff, AUDIO_REC))
		{
			Error_Handler();
		}*/
	HAL_UART_Receive_DMA(&huart1, Uart_array, 2);
 800089a:	2202      	movs	r2, #2
 800089c:	4978      	ldr	r1, [pc, #480]	; (8000a80 <main+0x2e0>)
 800089e:	4879      	ldr	r0, [pc, #484]	; (8000a84 <main+0x2e4>)
 80008a0:	f003 fbbe 	bl	8004020 <HAL_UART_Receive_DMA>
	while (1)
	{
		if((DmaRightRecHalfBuffCplt == 1))
 80008a4:	4b78      	ldr	r3, [pc, #480]	; (8000a88 <main+0x2e8>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d17a      	bne.n	80009a2 <main+0x202>
		{

			for(i = 0; i < AUDIO_REC/2; i++)
 80008ac:	4b77      	ldr	r3, [pc, #476]	; (8000a8c <main+0x2ec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e015      	b.n	80008e0 <main+0x140>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 80008b4:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <main+0x2ec>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a6f      	ldr	r2, [pc, #444]	; (8000a78 <main+0x2d8>)
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	121a      	asrs	r2, r3, #8
 80008c0:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <main+0x2ec>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	ee07 2a90 	vmov	s15, r2
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	4a70      	ldr	r2, [pc, #448]	; (8000a90 <main+0x2f0>)
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < AUDIO_REC/2; i++)
 80008d6:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <main+0x2ec>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a6b      	ldr	r2, [pc, #428]	; (8000a8c <main+0x2ec>)
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <main+0x2ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b17      	cmp	r3, #23
 80008e6:	d9e5      	bls.n	80008b4 <main+0x114>
			}
			arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&buf_in[0], &buf_out[0],AUDIO_REC/2);
 80008e8:	2318      	movs	r3, #24
 80008ea:	4a6a      	ldr	r2, [pc, #424]	; (8000a94 <main+0x2f4>)
 80008ec:	4968      	ldr	r1, [pc, #416]	; (8000a90 <main+0x2f0>)
 80008ee:	4854      	ldr	r0, [pc, #336]	; (8000a40 <main+0x2a0>)
 80008f0:	f003 fce1 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 80008f4:	2318      	movs	r3, #24
 80008f6:	4a67      	ldr	r2, [pc, #412]	; (8000a94 <main+0x2f4>)
 80008f8:	4966      	ldr	r1, [pc, #408]	; (8000a94 <main+0x2f4>)
 80008fa:	4854      	ldr	r0, [pc, #336]	; (8000a4c <main+0x2ac>)
 80008fc:	f003 fcdb 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000900:	2318      	movs	r3, #24
 8000902:	4a64      	ldr	r2, [pc, #400]	; (8000a94 <main+0x2f4>)
 8000904:	4963      	ldr	r1, [pc, #396]	; (8000a94 <main+0x2f4>)
 8000906:	4854      	ldr	r0, [pc, #336]	; (8000a58 <main+0x2b8>)
 8000908:	f003 fcd5 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 800090c:	2318      	movs	r3, #24
 800090e:	4a61      	ldr	r2, [pc, #388]	; (8000a94 <main+0x2f4>)
 8000910:	4960      	ldr	r1, [pc, #384]	; (8000a94 <main+0x2f4>)
 8000912:	4854      	ldr	r0, [pc, #336]	; (8000a64 <main+0x2c4>)
 8000914:	f003 fccf 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000918:	2318      	movs	r3, #24
 800091a:	4a5e      	ldr	r2, [pc, #376]	; (8000a94 <main+0x2f4>)
 800091c:	495d      	ldr	r1, [pc, #372]	; (8000a94 <main+0x2f4>)
 800091e:	4854      	ldr	r0, [pc, #336]	; (8000a70 <main+0x2d0>)
 8000920:	f003 fcc9 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			for(i = 0; i < AUDIO_REC/2; i++)
 8000924:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <main+0x2ec>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e024      	b.n	8000976 <main+0x1d6>
			{
				sample16 = ((int)buf_out[i]);
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <main+0x2ec>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a58      	ldr	r2, [pc, #352]	; (8000a94 <main+0x2f4>)
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <main+0x2f8>)
 8000946:	801a      	strh	r2, [r3, #0]
				//sample16 =  RightRecBuff[i] >> 8;
				uSample16 = ((int)sample16) + 4096;
 8000948:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <main+0x2f8>)
 800094a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <main+0x2fc>)
 8000958:	801a      	strh	r2, [r3, #0]
				txBuf[i] = (uSample16>>1) ;
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <main+0x2fc>)
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <main+0x2ec>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	0852      	lsrs	r2, r2, #1
 8000964:	b291      	uxth	r1, r2
 8000966:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <main+0x300>)
 8000968:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <main+0x2ec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a46      	ldr	r2, [pc, #280]	; (8000a8c <main+0x2ec>)
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <main+0x2ec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b17      	cmp	r3, #23
 800097c:	d9d6      	bls.n	800092c <main+0x18c>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[0], AUDIO_REC/2, DAC_ALIGN_12B_R);
			if(PlaybackStarted == 0)
 800097e:	4b49      	ldr	r3, [pc, #292]	; (8000aa4 <main+0x304>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10a      	bne.n	800099c <main+0x1fc>
			{
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, txBuf, AUDIO_REC, DAC_ALIGN_12B_R);
 8000986:	2300      	movs	r3, #0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2330      	movs	r3, #48	; 0x30
 800098c:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <main+0x300>)
 800098e:	2100      	movs	r1, #0
 8000990:	4827      	ldr	r0, [pc, #156]	; (8000a30 <main+0x290>)
 8000992:	f000 fd57 	bl	8001444 <HAL_DAC_Start_DMA>
				PlaybackStarted = 1;
 8000996:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <main+0x304>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
			}
			DmaRightRecHalfBuffCplt = 0;
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <main+0x2e8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <main+0x308>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	f47f af7c 	bne.w	80008a4 <main+0x104>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <main+0x2ec>)
 80009ae:	2218      	movs	r2, #24
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e015      	b.n	80009e0 <main+0x240>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 80009b4:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <main+0x2ec>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <main+0x2d8>)
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	121a      	asrs	r2, r3, #8
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <main+0x2ec>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	ee07 2a90 	vmov	s15, r2
 80009c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009cc:	4a30      	ldr	r2, [pc, #192]	; (8000a90 <main+0x2f0>)
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	edc3 7a00 	vstr	s15, [r3]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <main+0x2ec>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <main+0x2ec>)
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <main+0x2ec>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b2f      	cmp	r3, #47	; 0x2f
 80009e6:	d9e5      	bls.n	80009b4 <main+0x214>
			}
			arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&buf_in[AUDIO_REC/2], &buf_out[AUDIO_REC/2],AUDIO_REC/2);
 80009e8:	2318      	movs	r3, #24
 80009ea:	4a30      	ldr	r2, [pc, #192]	; (8000aac <main+0x30c>)
 80009ec:	4930      	ldr	r1, [pc, #192]	; (8000ab0 <main+0x310>)
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <main+0x2a0>)
 80009f0:	f003 fc61 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 80009f4:	2318      	movs	r3, #24
 80009f6:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <main+0x30c>)
 80009f8:	492c      	ldr	r1, [pc, #176]	; (8000aac <main+0x30c>)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <main+0x2ac>)
 80009fc:	f003 fc5b 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000a00:	2318      	movs	r3, #24
 8000a02:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <main+0x30c>)
 8000a04:	4929      	ldr	r1, [pc, #164]	; (8000aac <main+0x30c>)
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <main+0x2b8>)
 8000a08:	f003 fc55 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000a0c:	2318      	movs	r3, #24
 8000a0e:	4a27      	ldr	r2, [pc, #156]	; (8000aac <main+0x30c>)
 8000a10:	4926      	ldr	r1, [pc, #152]	; (8000aac <main+0x30c>)
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <main+0x2c4>)
 8000a14:	f003 fc4f 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000a18:	2318      	movs	r3, #24
 8000a1a:	4a24      	ldr	r2, [pc, #144]	; (8000aac <main+0x30c>)
 8000a1c:	4923      	ldr	r1, [pc, #140]	; (8000aac <main+0x30c>)
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <main+0x2d0>)
 8000a20:	f003 fc49 	bl	80042b6 <arm_biquad_cascade_df2T_f32>
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <main+0x2ec>)
 8000a26:	2218      	movs	r2, #24
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e068      	b.n	8000afe <main+0x35e>
 8000a2c:	2000f620 	.word	0x2000f620
 8000a30:	2000f1ec 	.word	0x2000f1ec
 8000a34:	2000eb8c 	.word	0x2000eb8c
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	2000f374 	.word	0x2000f374
 8000a40:	2000f3ac 	.word	0x2000f3ac
 8000a44:	20002f1c 	.word	0x20002f1c
 8000a48:	2000f4f4 	.word	0x2000f4f4
 8000a4c:	2000f4e8 	.word	0x2000f4e8
 8000a50:	20005e38 	.word	0x20005e38
 8000a54:	2000f3b8 	.word	0x2000f3b8
 8000a58:	2000f368 	.word	0x2000f368
 8000a5c:	20008d54 	.word	0x20008d54
 8000a60:	2000f5f0 	.word	0x2000f5f0
 8000a64:	2000f4dc 	.word	0x2000f4dc
 8000a68:	2000bc70 	.word	0x2000bc70
 8000a6c:	2000f4ac 	.word	0x2000f4ac
 8000a70:	2000f5e4 	.word	0x2000f5e4
 8000a74:	2000f31c 	.word	0x2000f31c
 8000a78:	2000ebd0 	.word	0x2000ebd0
 8000a7c:	2000f248 	.word	0x2000f248
 8000a80:	2000f3a8 	.word	0x2000f3a8
 8000a84:	2000f66c 	.word	0x2000f66c
 8000a88:	2000f1d4 	.word	0x2000f1d4
 8000a8c:	2000f3e8 	.word	0x2000f3e8
 8000a90:	2000f524 	.word	0x2000f524
 8000a94:	2000f3ec 	.word	0x2000f3ec
 8000a98:	2000f1d2 	.word	0x2000f1d2
 8000a9c:	2000f1d0 	.word	0x2000f1d0
 8000aa0:	2000eed0 	.word	0x2000eed0
 8000aa4:	2000f1d6 	.word	0x2000f1d6
 8000aa8:	2000f1d5 	.word	0x2000f1d5
 8000aac:	2000f44c 	.word	0x2000f44c
 8000ab0:	2000f584 	.word	0x2000f584
			{
				sample16 = ((int)buf_out[i]);
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <main+0x370>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <main+0x374>)
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	edd3 7a00 	vldr	s15, [r3]
 8000ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac6:	ee17 3a90 	vmov	r3, s15
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <main+0x378>)
 8000ace:	801a      	strh	r2, [r3, #0]
				//sample16 =  RightRecBuff[i] >> 8;
				uSample16 = ((int)sample16) + 4096;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <main+0x378>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <main+0x37c>)
 8000ae0:	801a      	strh	r2, [r3, #0]
				txBuf[i] = (uSample16>>1) ;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <main+0x37c>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <main+0x370>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0852      	lsrs	r2, r2, #1
 8000aec:	b291      	uxth	r1, r2
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <main+0x380>)
 8000af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <main+0x370>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <main+0x370>)
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <main+0x370>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b2f      	cmp	r3, #47	; 0x2f
 8000b04:	d9d6      	bls.n	8000ab4 <main+0x314>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[AUDIO_REC/2], AUDIO_REC/2, DAC_ALIGN_12B_R);

			DmaRightRecBuffCplt = 0;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <main+0x384>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 8000b0c:	e6ca      	b.n	80008a4 <main+0x104>
 8000b0e:	bf00      	nop
 8000b10:	2000f3e8 	.word	0x2000f3e8
 8000b14:	2000f3ec 	.word	0x2000f3ec
 8000b18:	2000f1d2 	.word	0x2000f1d2
 8000b1c:	2000f1d0 	.word	0x2000f1d0
 8000b20:	2000eed0 	.word	0x2000eed0
 8000b24:	2000f1d5 	.word	0x2000f1d5

08000b28 <HAL_UART_RxCpltCallback>:
}
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	switch((int8_t)Uart_array[0])
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	3b01      	subs	r3, #1
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	f200 8085 	bhi.w	8000c48 <HAL_UART_RxCpltCallback+0x120>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <HAL_UART_RxCpltCallback+0x1c>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b8f 	.word	0x08000b8f
 8000b4c:	08000bc5 	.word	0x08000bc5
 8000b50:	08000bf1 	.word	0x08000bf1
 8000b54:	08000c1d 	.word	0x08000c1d
	{
	case 1:
		gainDB[0] =(int8_t)(Uart_array[1]);
 8000b58:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000b62:	601a      	str	r2, [r3, #0]
		//S1.pCoeffs=&band1_coeff[(5*NUMSTAGES)*(gainDB[0]+10)];
		arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	1a9b      	subs	r3, r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4a38      	ldr	r2, [pc, #224]	; (8000c58 <HAL_UART_RxCpltCallback+0x130>)
 8000b76:	441a      	add	r2, r3
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <HAL_UART_RxCpltCallback+0x134>)
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	4838      	ldr	r0, [pc, #224]	; (8000c60 <HAL_UART_RxCpltCallback+0x138>)
 8000b7e:	f003 fd55 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b82:	2120      	movs	r1, #32
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 fcc2 	bl	8002510 <HAL_GPIO_TogglePin>
		break;
 8000b8c:	e05c      	b.n	8000c48 <HAL_UART_RxCpltCallback+0x120>
	case 2:
		gainDB[1] =(int8_t)(Uart_array[1]);
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000b90:	785b      	ldrb	r3, [r3, #1]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000b98:	605a      	str	r2, [r3, #4]
		//S2.pCoeffs=&band2_coeff[(5*NUMSTAGES)*(gainDB[1]+10)];
		arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	1a9b      	subs	r3, r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <HAL_UART_RxCpltCallback+0x13c>)
 8000bac:	441a      	add	r2, r3
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <HAL_UART_RxCpltCallback+0x140>)
 8000bb0:	2103      	movs	r1, #3
 8000bb2:	482e      	ldr	r0, [pc, #184]	; (8000c6c <HAL_UART_RxCpltCallback+0x144>)
 8000bb4:	f003 fd3a 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bb8:	2120      	movs	r1, #32
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f001 fca7 	bl	8002510 <HAL_GPIO_TogglePin>
		break;
 8000bc2:	e041      	b.n	8000c48 <HAL_UART_RxCpltCallback+0x120>
	case 3:
		gainDB[2] =(int8_t)(Uart_array[1]);
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000bce:	609a      	str	r2, [r3, #8]
		arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000bd8:	4613      	mov	r3, r2
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_UART_RxCpltCallback+0x148>)
 8000be2:	441a      	add	r2, r3
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <HAL_UART_RxCpltCallback+0x14c>)
 8000be6:	2103      	movs	r1, #3
 8000be8:	4823      	ldr	r0, [pc, #140]	; (8000c78 <HAL_UART_RxCpltCallback+0x150>)
 8000bea:	f003 fd1f 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
		break;
 8000bee:	e02b      	b.n	8000c48 <HAL_UART_RxCpltCallback+0x120>
	case 4:
		gainDB[3] =(int8_t)(Uart_array[1]);
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000bf2:	785b      	ldrb	r3, [r3, #1]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000bfa:	60da      	str	r2, [r3, #12]
		arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000c04:	4613      	mov	r3, r2
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_UART_RxCpltCallback+0x154>)
 8000c0e:	441a      	add	r2, r3
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_UART_RxCpltCallback+0x158>)
 8000c12:	2103      	movs	r1, #3
 8000c14:	481b      	ldr	r0, [pc, #108]	; (8000c84 <HAL_UART_RxCpltCallback+0x15c>)
 8000c16:	f003 fd09 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
		break;
 8000c1a:	e015      	b.n	8000c48 <HAL_UART_RxCpltCallback+0x120>
	case 5:
		gainDB[4] =(int8_t)(Uart_array[1]);
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_UART_RxCpltCallback+0x128>)
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000c26:	611a      	str	r2, [r3, #16]
		arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_UART_RxCpltCallback+0x12c>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000c30:	4613      	mov	r3, r2
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <HAL_UART_RxCpltCallback+0x160>)
 8000c3a:	441a      	add	r2, r3
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_UART_RxCpltCallback+0x164>)
 8000c3e:	2103      	movs	r1, #3
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <HAL_UART_RxCpltCallback+0x168>)
 8000c42:	f003 fcf3 	bl	800462c <arm_biquad_cascade_df2T_init_f32>
		break;
 8000c46:	bf00      	nop
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000f3a8 	.word	0x2000f3a8
 8000c54:	2000eb8c 	.word	0x2000eb8c
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	2000f374 	.word	0x2000f374
 8000c60:	2000f3ac 	.word	0x2000f3ac
 8000c64:	20002f1c 	.word	0x20002f1c
 8000c68:	2000f4f4 	.word	0x2000f4f4
 8000c6c:	2000f4e8 	.word	0x2000f4e8
 8000c70:	20005e38 	.word	0x20005e38
 8000c74:	2000f3b8 	.word	0x2000f3b8
 8000c78:	2000f368 	.word	0x2000f368
 8000c7c:	20008d54 	.word	0x20008d54
 8000c80:	2000f5f0 	.word	0x2000f5f0
 8000c84:	2000f4dc 	.word	0x2000f4dc
 8000c88:	2000bc70 	.word	0x2000bc70
 8000c8c:	2000f4ac 	.word	0x2000f4ac
 8000c90:	2000f5e4 	.word	0x2000f5e4

08000c94 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	DmaRightRecHalfBuffCplt = 1;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000f1d4 	.word	0x2000f1d4

08000cb4 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	DmaRightRecBuffCplt = 1;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000f1d5 	.word	0x2000f1d5

08000cd4 <TestBlinking>:
void TestBlinking(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 fbfd 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	f000 fa1d 	bl	8001128 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 fbf2 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d00:	f000 fa12 	bl	8001128 <HAL_Delay>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SystemClock_Config>:
  * @brief  The application entry point.
  * @retval int
  */
#include"body_DAC_DFSDM.h"
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0b0      	sub	sp, #192	; 0xc0
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d12:	2244      	movs	r2, #68	; 0x44
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fcb8 	bl	800468c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2264      	movs	r2, #100	; 0x64
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 fcaa 	bl	800468c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000d60:	2324      	movs	r3, #36	; 0x24
 8000d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d66:	2307      	movs	r3, #7
 8000d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 feb3 	bl	8002ae8 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d88:	f000 f836 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2303      	movs	r3, #3
 8000d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000da4:	2104      	movs	r1, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fabe 	bl	8003328 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000db2:	f000 f821 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <SystemClock_Config+0xec>)
 8000db8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fc79 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000dd4:	f000 f810 	bl	8000df8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ddc:	f001 fe2e 	bl	8002a3c <HAL_PWREx_ControlVoltageScaling>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000de6:	f000 f807 	bl	8000df8 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	37c0      	adds	r7, #192	; 0xc0
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	00010041 	.word	0x00010041

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f920 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <DMA1_Channel3_IRQHandler+0x10>)
 8000eb2:	f001 f8bb 	bl	800202c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000f200 	.word	0x2000f200

08000ec0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA1_Channel4_IRQHandler+0x10>)
 8000ec6:	f001 f8b1 	bl	800202c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000f29c 	.word	0x2000f29c

08000ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SystemInit+0x64>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <SystemInit+0x64>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <SystemInit+0x68>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <SystemInit+0x68>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <SystemInit+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <SystemInit+0x68>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <SystemInit+0x68>)
 8000f00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <SystemInit+0x68>)
 8000f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <SystemInit+0x68>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <SystemInit+0x68>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <SystemInit+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SystemInit+0x64>)
 8000f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	40021000 	.word	0x40021000

08000f40 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_TIM6_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 25-1;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f58:	2218      	movs	r2, #24
 8000f5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64-1;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f64:	223f      	movs	r2, #63	; 0x3f
 8000f66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f70:	f002 fece 	bl	8003d10 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f7a:	f7ff ff3d 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM6_Init+0x64>)
 8000f8c:	f002 ffda 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f7ff ff2f 	bl	8000df8 <Error_Handler>
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000f620 	.word	0x2000f620
 8000fa8:	40001000 	.word	0x40001000

08000fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40001000 	.word	0x40001000
 8000fe8:	40021000 	.word	0x40021000

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ff0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ff2:	e003      	b.n	8000ffc <LoopCopyDataInit>

08000ff4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ff6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ff8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ffa:	3104      	adds	r1, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001000:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001002:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001004:	d3f6      	bcc.n	8000ff4 <CopyDataInit>
	ldr	r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001008:	e002      	b.n	8001010 <LoopFillZerobss>

0800100a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800100a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800100c:	f842 3b04 	str.w	r3, [r2], #4

08001010 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <LoopForever+0x16>)
	cmp	r2, r3
 8001012:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001014:	d3f9      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001016:	f7ff ff5d 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 fb13 	bl	8004644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fbbf 	bl	80007a0 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001028:	080046fc 	.word	0x080046fc
	ldr	r0, =_sdata
 800102c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001030:	2000ebac 	.word	0x2000ebac
	ldr	r2, =_sbss
 8001034:	2000ebac 	.word	0x2000ebac
	ldr	r3, = _ebss
 8001038:	2000f6f0 	.word	0x2000f6f0

0800103c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_IRQHandler>

0800103e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f95f 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f80e 	bl	8001070 <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e001      	b.n	8001064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001060:	f7ff fed2 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001064:	79fb      	ldrb	r3, [r7, #7]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d023      	beq.n	80010cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_InitTick+0x70>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_InitTick+0x6c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f96b 	bl	8001376 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d809      	bhi.n	80010c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f935 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0x74>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e007      	b.n	80010d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e004      	b.n	80010d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	e001      	b.n	80010d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000eba8 	.word	0x2000eba8
 80010e0:	2000eba0 	.word	0x2000eba0
 80010e4:	2000eba4 	.word	0x2000eba4

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000eba8 	.word	0x2000eba8
 800110c:	2000f6ec 	.word	0x2000f6ec

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000f6ec 	.word	0x2000f6ec

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_Delay+0x40>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000eba8 	.word	0x2000eba8

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff3e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff31 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e014      	b.n	80013ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d105      	bne.n	80013b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7fe ff41 	bl	8000238 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2202      	movs	r2, #2
 80013ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	795b      	ldrb	r3, [r3, #5]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_DAC_Start+0x16>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e027      	b.n	8001438 <HAL_DAC_Start+0x66>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2202      	movs	r2, #2
 80013f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */


#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001416:	2b3c      	cmp	r3, #60	; 0x3c
 8001418:	d107      	bne.n	800142a <HAL_DAC_Start+0x58>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_DAC_Start_DMA+0x1e>
 800145e:	2302      	movs	r3, #2
 8001460:	e05b      	b.n	800151a <HAL_DAC_Start_DMA+0xd6>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2202      	movs	r2, #2
 800146c:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4a2c      	ldr	r2, [pc, #176]	; (8001524 <HAL_DAC_Start_DMA+0xe0>)
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4a2b      	ldr	r2, [pc, #172]	; (8001528 <HAL_DAC_Start_DMA+0xe4>)
 800147c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a2a      	ldr	r2, [pc, #168]	; (800152c <HAL_DAC_Start_DMA+0xe8>)
 8001484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001494:	601a      	str	r2, [r3, #0]

  /* Case of use of channel 1 */
  switch (Alignment)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d009      	beq.n	80014b0 <HAL_DAC_Start_DMA+0x6c>
 800149c:	2b08      	cmp	r3, #8
 800149e:	d00c      	beq.n	80014ba <HAL_DAC_Start_DMA+0x76>
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_DAC_Start_DMA+0x62>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 80014a4:	e00e      	b.n	80014c4 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3308      	adds	r3, #8
 80014ac:	617b      	str	r3, [r7, #20]
      break;
 80014ae:	e009      	b.n	80014c4 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	330c      	adds	r3, #12
 80014b6:	617b      	str	r3, [r7, #20]
      break;
 80014b8:	e004      	b.n	80014c4 <HAL_DAC_Start_DMA+0x80>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3310      	adds	r3, #16
 80014c0:	617b      	str	r3, [r7, #20]
      break;
 80014c2:	bf00      	nop
  }

  /* Enable the DMA channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d2:	601a      	str	r2, [r3, #0]

  /* Enable the DMA channel */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6898      	ldr	r0, [r3, #8]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	f000 fd45 	bl	8001f6c <HAL_DMA_Start_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	74fb      	strb	r3, [r7, #19]

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_DAC_Start_DMA+0xc8>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6819      	ldr	r1, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2201      	movs	r2, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e005      	b.n	8001518 <HAL_DAC_Start_DMA+0xd4>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001518:	7cfb      	ldrb	r3, [r7, #19]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	08001761 	.word	0x08001761
 8001528:	08001783 	.word	0x08001783
 800152c:	0800179f 	.word	0x0800179f

08001530 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	795b      	ldrb	r3, [r3, #5]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_DAC_ConfigChannel+0x1c>
 8001584:	2302      	movs	r3, #2
 8001586:	e0e7      	b.n	8001758 <HAL_DAC_ConfigChannel+0x1ec>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b04      	cmp	r3, #4
 800159a:	d154      	bne.n	8001646 <HAL_DAC_ConfigChannel+0xda>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800159c:	f7ff fdb8 	bl	8001110 <HAL_GetTick>
 80015a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d121      	bne.n	80015ec <HAL_DAC_ConfigChannel+0x80>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015a8:	e011      	b.n	80015ce <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015aa:	f7ff fdb1 	bl	8001110 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d90a      	bls.n	80015ce <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f043 0208 	orr.w	r2, r3, #8
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2203      	movs	r2, #3
 80015c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0c4      	b.n	8001758 <HAL_DAC_ConfigChannel+0x1ec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e6      	bne.n	80015aa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fda3 	bl	8001128 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	6992      	ldr	r2, [r2, #24]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	ea02 0103 	and.w	r1, r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	21ff      	movs	r1, #255	; 0xff
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	ea02 0103 	and.w	r1, r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	409a      	lsls	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11d      	bne.n	800168a <HAL_DAC_ConfigChannel+0x11e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2207      	movs	r2, #7
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	22c0      	movs	r2, #192	; 0xc0
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f7ff fede 	bl	8001530 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	711a      	strb	r2, [r3, #4]
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7ff fed7 	bl	8001544 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f043 0204 	orr.w	r2, r3, #4
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff fecd 	bl	8001558 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	711a      	strb	r2, [r3, #4]
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0ac      	b.n	8001938 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fa8c 	bl	8001d00 <DFSDM_GetChannelFromInstance>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_DFSDM_ChannelInit+0x174>)
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e09f      	b.n	8001938 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fe7d 	bl	80004f8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_DFSDM_ChannelInit+0x178>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_DFSDM_ChannelInit+0x178>)
 8001806:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <HAL_DFSDM_ChannelInit+0x178>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d125      	bne.n	800185c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001816:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800181a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4948      	ldr	r1, [pc, #288]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001830:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001834:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	791b      	ldrb	r3, [r3, #4]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d108      	bne.n	8001850 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	493f      	ldr	r1, [pc, #252]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_DFSDM_ChannelInit+0x17c>)
 8001856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800185a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800186a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800187a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001880:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 020f 	bic.w	r2, r2, #15
 8001898:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018c0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 0207 	and.w	r2, r2, #7
 80018ec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001918:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f9ea 	bl	8001d00 <DFSDM_GetChannelFromInstance>
 800192c:	4601      	mov	r1, r0
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_DFSDM_ChannelInit+0x174>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000f1dc 	.word	0x2000f1dc
 8001944:	2000f1d8 	.word	0x2000f1d8
 8001948:	40016000 	.word	0x40016000

0800194c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0ca      	b.n	8001af4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_DFSDM_FilterInit+0x1b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d109      	bne.n	800197c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800196c:	2b01      	cmp	r3, #1
 800196e:	d003      	beq.n	8001978 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0bb      	b.n	8001af4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe fd21 	bl	80003dc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80019a8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80019d2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7a5b      	ldrb	r3, [r3, #9]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001a0c:	f023 0308 	bic.w	r3, r3, #8
 8001a10:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d108      	bne.n	8001a2c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7c1b      	ldrb	r3, [r3, #16]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0210 	orr.w	r2, r2, #16
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7c5b      	ldrb	r3, [r3, #17]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0220 	bic.w	r2, r2, #32
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001a8e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001a92:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6959      	ldr	r1, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001aa6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001aae:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7c1a      	ldrb	r2, [r3, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40016100 	.word	0x40016100

08001b00 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d02e      	beq.n	8001b78 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001b20:	2bff      	cmp	r3, #255	; 0xff
 8001b22:	d029      	beq.n	8001b78 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e00a      	b.n	8001b70 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
 8001b76:	e001      	b.n	8001b7c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	75fb      	strb	r3, [r7, #23]
 8001bac:	e064      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bbc:	d002      	beq.n	8001bc4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
 8001bc2:	e059      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10e      	bne.n	8001bea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d002      	beq.n	8001bea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
 8001be8:	e046      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10b      	bne.n	8001c0a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d102      	bne.n	8001c0a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	e036      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d004      	beq.n	8001c1e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d12a      	bne.n	8001c74 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d101      	bne.n	8001c3c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001c3a:	e000      	b.n	8001c3e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001c3c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	331c      	adds	r3, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f000 f98a 	bl	8001f6c <HAL_DMA_Start_IT>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c6a:	e005      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f86f 	bl	8001d50 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001c72:	e001      	b.n	8001c78 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	08001cc1 	.word	0x08001cc1
 8001c88:	08001cdd 	.word	0x08001cdd
 8001c8c:	08001ca5 	.word	0x08001ca5

08001c90 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7fe ffee 	bl	8000c94 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fff0 	bl	8000cb4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2203      	movs	r2, #3
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff ffcd 	bl	8001c90 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	; (8001d44 <DFSDM_GetChannelFromInstance+0x44>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e00f      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <DFSDM_GetChannelFromInstance+0x48>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d102      	bne.n	8001d24 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e008      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <DFSDM_GetChannelFromInstance+0x4c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e001      	b.n	8001d36 <DFSDM_GetChannelFromInstance+0x36>
    channel = 7;
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d32:	2303      	movs	r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40016000 	.word	0x40016000
 8001d48:	40016020 	.word	0x40016020
 8001d4c:	40016040 	.word	0x40016040

08001d50 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d108      	bne.n	8001d72 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e033      	b.n	8001dda <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d90:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d116      	bne.n	8001dda <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0202 	orr.w	r2, r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <DFSDM_RegConvStart+0x84>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	e000      	b.n	8001dd6 <DFSDM_RegConvStart+0x86>
 8001dd4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <DFSDM_RegConvStart+0x98>
 8001de4:	2202      	movs	r2, #2
 8001de6:	e000      	b.n	8001dea <DFSDM_RegConvStart+0x9a>
 8001de8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e098      	b.n	8001f40 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_DMA_Init+0x150>)
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d80f      	bhi.n	8001e3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_DMA_Init+0x154>)
 8001e22:	4413      	add	r3, r2
 8001e24:	4a4b      	ldr	r2, [pc, #300]	; (8001f54 <HAL_DMA_Init+0x158>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	009a      	lsls	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_DMA_Init+0x15c>)
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
 8001e38:	e00e      	b.n	8001e58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_DMA_Init+0x160>)
 8001e42:	4413      	add	r3, r2
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_DMA_Init+0x158>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	009a      	lsls	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_DMA_Init+0x164>)
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb2:	d039      	beq.n	8001f28 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_DMA_Init+0x15c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11a      	bne.n	8001ef4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_DMA_Init+0x168>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 031c 	and.w	r3, r3, #28
 8001eca:	210f      	movs	r1, #15
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4924      	ldr	r1, [pc, #144]	; (8001f64 <HAL_DMA_Init+0x168>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_DMA_Init+0x168>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f003 031c 	and.w	r3, r3, #28
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	491d      	ldr	r1, [pc, #116]	; (8001f64 <HAL_DMA_Init+0x168>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
 8001ef2:	e019      	b.n	8001f28 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_DMA_Init+0x16c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f003 031c 	and.w	r3, r3, #28
 8001f00:	210f      	movs	r1, #15
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4917      	ldr	r1, [pc, #92]	; (8001f68 <HAL_DMA_Init+0x16c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_DMA_Init+0x16c>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 031c 	and.w	r3, r3, #28
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	4911      	ldr	r1, [pc, #68]	; (8001f68 <HAL_DMA_Init+0x16c>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40020407 	.word	0x40020407
 8001f50:	bffdfff8 	.word	0xbffdfff8
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	bffdfbf8 	.word	0xbffdfbf8
 8001f60:	40020400 	.word	0x40020400
 8001f64:	400200a8 	.word	0x400200a8
 8001f68:	400204a8 	.word	0x400204a8

08001f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Start_IT+0x20>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e04b      	b.n	8002024 <HAL_DMA_Start_IT+0xb8>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d13a      	bne.n	8002016 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f8e0 	bl	800218a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 020e 	orr.w	r2, r2, #14
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 020a 	orr.w	r2, r2, #10
 8002002:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e005      	b.n	8002022 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800201e:	2302      	movs	r3, #2
 8002020:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002022:	7dfb      	ldrb	r3, [r7, #23]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f003 031c 	and.w	r3, r3, #28
 800204c:	2204      	movs	r2, #4
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d026      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x7a>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d021      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f003 021c 	and.w	r2, r3, #28
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2104      	movs	r1, #4
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	2b00      	cmp	r3, #0
 800209a:	d071      	beq.n	8002180 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020a4:	e06c      	b.n	8002180 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 031c 	and.w	r3, r3, #28
 80020ae:	2202      	movs	r2, #2
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02e      	beq.n	8002118 <HAL_DMA_IRQHandler+0xec>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d029      	beq.n	8002118 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10b      	bne.n	80020ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 020a 	bic.w	r2, r2, #10
 80020e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 021c 	and.w	r2, r3, #28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2102      	movs	r1, #2
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d038      	beq.n	8002180 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002116:	e033      	b.n	8002180 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f003 031c 	and.w	r3, r3, #28
 8002120:	2208      	movs	r2, #8
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02a      	beq.n	8002182 <HAL_DMA_IRQHandler+0x156>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d025      	beq.n	8002182 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 020e 	bic.w	r2, r2, #14
 8002144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f003 021c 	and.w	r2, r3, #28
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f202 	lsl.w	r2, r1, r2
 8002158:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002180:	bf00      	nop
 8002182:	bf00      	nop
}
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f003 021c 	and.w	r2, r3, #28
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d108      	bne.n	80021ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021cc:	e007      	b.n	80021de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	60da      	str	r2, [r3, #12]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	e154      	b.n	80024a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8146 	beq.w	80024a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d00b      	beq.n	8002234 <HAL_GPIO_Init+0x48>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d007      	beq.n	8002234 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002228:	2b11      	cmp	r3, #17
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b12      	cmp	r3, #18
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0xea>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d123      	bne.n	800231e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0203 	and.w	r2, r3, #3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a0 	beq.w	80024a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002360:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_GPIO_Init+0x2d8>)
 8002362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <HAL_GPIO_Init+0x2d8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6613      	str	r3, [r2, #96]	; 0x60
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <HAL_GPIO_Init+0x2d8>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002378:	4a53      	ldr	r2, [pc, #332]	; (80024c8 <HAL_GPIO_Init+0x2dc>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023a2:	d019      	beq.n	80023d8 <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_GPIO_Init+0x2e0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00d      	beq.n	80023d0 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <HAL_GPIO_Init+0x1e0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a46      	ldr	r2, [pc, #280]	; (80024d8 <HAL_GPIO_Init+0x2ec>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d101      	bne.n	80023c8 <HAL_GPIO_Init+0x1dc>
 80023c4:	2304      	movs	r3, #4
 80023c6:	e008      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023c8:	2307      	movs	r3, #7
 80023ca:	e006      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023cc:	2303      	movs	r3, #3
 80023ce:	e004      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e002      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d8:	2300      	movs	r3, #0
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	f002 0203 	and.w	r2, r2, #3
 80023e0:	0092      	lsls	r2, r2, #2
 80023e2:	4093      	lsls	r3, r2
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ea:	4937      	ldr	r1, [pc, #220]	; (80024c8 <HAL_GPIO_Init+0x2dc>)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800241c:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002446:	4a25      	ldr	r2, [pc, #148]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f aea3 	bne.w	80021fc <HAL_GPIO_Init+0x10>
  }
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	48000800 	.word	0x48000800
 80024d4:	48000c00 	.word	0x48000c00
 80024d8:	48001000 	.word	0x48001000
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43d9      	mvns	r1, r3
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	400b      	ands	r3, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e081      	b.n	800265a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe f8d4 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2224      	movs	r2, #36	; 0x24
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e006      	b.n	80025cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d104      	bne.n	80025de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	ea42 0103 	orr.w	r1, r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69d9      	ldr	r1, [r3, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b08a      	sub	sp, #40	; 0x28
 8002666:	af02      	add	r7, sp, #8
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	460b      	mov	r3, r1
 8002670:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	f040 80f1 	bne.w	8002866 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002692:	d101      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	e0e7      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_IsDeviceReady+0x44>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0e0      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2224      	movs	r2, #36	; 0x24
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_I2C_IsDeviceReady+0x72>
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	e004      	b.n	80026de <HAL_I2C_IsDeviceReady+0x7c>
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fd14 	bl	8001110 <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b10      	cmp	r3, #16
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002716:	e034      	b.n	8002782 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d01a      	beq.n	8002756 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7fe fcf6 	bl	8001110 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <HAL_I2C_IsDeviceReady+0xd4>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e088      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b20      	cmp	r3, #32
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002782:	7ffb      	ldrb	r3, [r7, #31]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_I2C_IsDeviceReady+0x12c>
 8002788:	7fbb      	ldrb	r3, [r7, #30]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0c4      	beq.n	8002718 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d01a      	beq.n	80027d2 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2120      	movs	r1, #32
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f862 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e058      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e04a      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	2120      	movs	r1, #32
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 f847 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03d      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2220      	movs	r2, #32
 80027fa:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d118      	bne.n	8002836 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002812:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	2120      	movs	r1, #32
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f826 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e01c      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2220      	movs	r2, #32
 8002834:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	f63f af3b 	bhi.w	80026bc <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e022      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d01e      	beq.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7fe fc41 	bl	8001110 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e00f      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d0cd      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b20      	cmp	r3, #32
 8002904:	d138      	bne.n	8002978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002910:	2302      	movs	r3, #2
 8002912:	e032      	b.n	800297a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6819      	ldr	r1, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d139      	bne.n	8002a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e033      	b.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2224      	movs	r2, #36	; 0x24
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40007000 	.word	0x40007000

08002a3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4a:	d130      	bne.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a58:	d038      	beq.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2232      	movs	r2, #50	; 0x32
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9b      	lsrs	r3, r3, #18
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a80:	e002      	b.n	8002a88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a94:	d102      	bne.n	8002a9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f2      	bne.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa8:	d110      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e00f      	b.n	8002ace <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aba:	d007      	beq.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac4:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	2000eba0 	.word	0x2000eba0
 8002ae4:	431bde83 	.word	0x431bde83

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f000 bc11 	b.w	800331e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afc:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80e4 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4c>
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	f040 808b 	bne.w	8002c42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	f040 8087 	bne.w	8002c42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b34:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x64>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e3e8      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	4b8b      	ldr	r3, [pc, #556]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <HAL_RCC_OscConfig+0x7e>
 8002b5c:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b64:	e005      	b.n	8002b72 <HAL_RCC_OscConfig+0x8a>
 8002b66:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d223      	bcs.n	8002bbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd40 	bl	8003600 <RCC_SetFlashLatencyFromMSIRange>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e3c9      	b.n	800331e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b90:	f043 0308 	orr.w	r3, r3, #8
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4977      	ldr	r1, [pc, #476]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba8:	4b75      	ldr	r3, [pc, #468]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	4972      	ldr	r1, [pc, #456]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e025      	b.n	8002c0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbe:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	496a      	ldr	r1, [pc, #424]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bdc:	4b68      	ldr	r3, [pc, #416]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	4965      	ldr	r1, [pc, #404]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fd00 	bl	8003600 <RCC_SetFlashLatencyFromMSIRange>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e389      	b.n	800331e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0a:	f000 fc6f 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x29c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	fa21 f303 	lsr.w	r3, r1, r3
 8002c26:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x2a0>)
 8002c28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c2a:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_RCC_OscConfig+0x2a4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fa1e 	bl	8001070 <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d052      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	e36d      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d032      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fa5b 	bl	8001110 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fa57 	bl	8001110 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e356      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7c:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3f      	ldr	r2, [pc, #252]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c82:	f043 0308 	orr.w	r3, r3, #8
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	493a      	ldr	r1, [pc, #232]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4935      	ldr	r1, [pc, #212]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
 8002cae:	e01a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cb0:	4b33      	ldr	r3, [pc, #204]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fa28 	bl	8001110 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fa24 	bl	8001110 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e323      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x1dc>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d073      	beq.n	8002dda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_OscConfig+0x21c>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d10e      	bne.n	8002d1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d063      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d15f      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e300      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x24c>
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0x288>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x270>
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0f      	ldr	r2, [pc, #60]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0x288>
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <HAL_RCC_OscConfig+0x298>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f9ca 	bl	8001110 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7e:	e010      	b.n	8002da2 <HAL_RCC_OscConfig+0x2ba>
 8002d80:	40021000 	.word	0x40021000
 8002d84:	080046b4 	.word	0x080046b4
 8002d88:	2000eba0 	.word	0x2000eba0
 8002d8c:	2000eba4 	.word	0x2000eba4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f9be 	bl	8001110 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e2bd      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da2:	4baf      	ldr	r3, [pc, #700]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2a8>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe f9ae 	bl	8001110 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe f9aa 	bl	8001110 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e2a9      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dca:	4ba5      	ldr	r3, [pc, #660]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x2d0>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d060      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x310>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d119      	bne.n	8002e26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d116      	bne.n	8002e26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	4b99      	ldr	r3, [pc, #612]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x328>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e286      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b93      	ldr	r3, [pc, #588]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4990      	ldr	r1, [pc, #576]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	e040      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2e:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8b      	ldr	r2, [pc, #556]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe f969 	bl	8001110 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe f965 	bl	8001110 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e264      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e54:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b7f      	ldr	r3, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	497c      	ldr	r1, [pc, #496]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e018      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a79      	ldr	r2, [pc, #484]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe f945 	bl	8001110 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe f941 	bl	8001110 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e240      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9c:	4b70      	ldr	r3, [pc, #448]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d03c      	beq.n	8002f2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	4a67      	ldr	r2, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe f920 	bl	8001110 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe f91c 	bl	8001110 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e21b      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x3ec>
 8002ef4:	e01b      	b.n	8002f2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f903 	bl	8001110 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe f8ff 	bl	8001110 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1fe      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f20:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ef      	bne.n	8002f0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80a6 	beq.w	8003088 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f40:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b44      	ldr	r3, [pc, #272]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f68:	4b3e      	ldr	r3, [pc, #248]	; (8003064 <HAL_RCC_OscConfig+0x57c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d118      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x57c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0x57c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f80:	f7fe f8c6 	bl	8001110 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fe f8c2 	bl	8001110 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1c1      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9a:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_RCC_OscConfig+0x57c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4d8>
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fbe:	e024      	b.n	800300a <HAL_RCC_OscConfig+0x522>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d110      	bne.n	8002fea <HAL_RCC_OscConfig+0x502>
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe8:	e00f      	b.n	800300a <HAL_RCC_OscConfig+0x522>
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8003002:	f023 0304 	bic.w	r3, r3, #4
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fe f87d 	bl	8001110 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe f879 	bl	8001110 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	; 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e176      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x578>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ed      	beq.n	800301a <HAL_RCC_OscConfig+0x532>
 800303e:	e01a      	b.n	8003076 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe f866 	bl	8001110 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003046:	e00f      	b.n	8003068 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe f862 	bl	8001110 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d906      	bls.n	8003068 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e15f      	b.n	800331e <HAL_RCC_OscConfig+0x836>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003068:	4baa      	ldr	r3, [pc, #680]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e8      	bne.n	8003048 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4ba5      	ldr	r3, [pc, #660]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	4aa4      	ldr	r2, [pc, #656]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003086:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d03c      	beq.n	800310e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01c      	beq.n	80030d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800309c:	4b9d      	ldr	r3, [pc, #628]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800309e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a2:	4a9c      	ldr	r2, [pc, #624]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe f830 	bl	8001110 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b4:	f7fe f82c 	bl	8001110 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e12b      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030c6:	4b93      	ldr	r3, [pc, #588]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80030c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCC_OscConfig+0x5cc>
 80030d4:	e01b      	b.n	800310e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030d6:	4b8f      	ldr	r3, [pc, #572]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80030d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030dc:	4a8d      	ldr	r2, [pc, #564]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe f813 	bl	8001110 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ee:	f7fe f80f 	bl	8001110 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e10e      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003100:	4b84      	ldr	r3, [pc, #528]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ef      	bne.n	80030ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8102 	beq.w	800331c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2b02      	cmp	r3, #2
 800311e:	f040 80c5 	bne.w	80032ac <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	429a      	cmp	r2, r3
 8003134:	d12c      	bne.n	8003190 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	3b01      	subs	r3, #1
 8003142:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d123      	bne.n	8003190 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d11b      	bne.n	8003190 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d113      	bne.n	8003190 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	3b01      	subs	r3, #1
 8003176:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d109      	bne.n	8003190 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	3b01      	subs	r3, #1
 800318a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d067      	beq.n	8003260 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d062      	beq.n	800325c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0bb      	b.n	800331e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031a6:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031b2:	f7fd ffad 	bl	8001110 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd ffa9 	bl	8001110 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0a8      	b.n	800331e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031cc:	4b51      	ldr	r3, [pc, #324]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d8:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <HAL_RCC_OscConfig+0x830>)
 80031de:	4013      	ands	r3, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e8:	3a01      	subs	r2, #1
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f2:	0212      	lsls	r2, r2, #8
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0552      	lsls	r2, r2, #21
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003206:	0852      	lsrs	r2, r2, #1
 8003208:	3a01      	subs	r2, #1
 800320a:	0652      	lsls	r2, r2, #25
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003212:	06d2      	lsls	r2, r2, #27
 8003214:	430a      	orrs	r2, r1
 8003216:	493f      	ldr	r1, [pc, #252]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003226:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003228:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a39      	ldr	r2, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003234:	f7fd ff6c 	bl	8001110 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd ff68 	bl	8001110 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e067      	b.n	800331e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325a:	e05f      	b.n	800331c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e05e      	b.n	800331e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d157      	bne.n	800331c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003284:	f7fd ff44 	bl	8001110 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd ff40 	bl	8001110 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e03f      	b.n	800331e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x7a4>
 80032aa:	e037      	b.n	800331c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d02d      	beq.n	800330e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032d0:	f023 0303 	bic.w	r3, r3, #3
 80032d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a0e      	ldr	r2, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 80032dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fd ff13 	bl	8001110 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fd ff0f 	bl	8001110 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e00e      	b.n	800331e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_RCC_OscConfig+0x82c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x806>
 800330c:	e006      	b.n	800331c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e005      	b.n	800331e <HAL_RCC_OscConfig+0x836>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0c8      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4961      	ldr	r1, [pc, #388]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b0      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d04c      	beq.n	8003412 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d121      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e09e      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d115      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e092      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e086      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e07e      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f023 0203 	bic.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	493f      	ldr	r1, [pc, #252]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fd fe95 	bl	8001110 <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ea:	f7fd fe91 	bl	8001110 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e066      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 020c 	and.w	r2, r3, #12
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	429a      	cmp	r2, r3
 8003410:	d1eb      	bne.n	80033ea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	492c      	ldr	r1, [pc, #176]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d210      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4924      	ldr	r1, [pc, #144]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_ClockConfig+0x1b0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e036      	b.n	80034ce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4918      	ldr	r1, [pc, #96]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4910      	ldr	r1, [pc, #64]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349e:	f000 f825 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	fa21 f303 	lsr.w	r3, r1, r3
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fdd4 	bl	8001070 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80034cc:	7afb      	ldrb	r3, [r7, #11]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000
 80034dc:	40021000 	.word	0x40021000
 80034e0:	080046b4 	.word	0x080046b4
 80034e4:	2000eba0 	.word	0x2000eba0
 80034e8:	2000eba4 	.word	0x2000eba4

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x34>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d121      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d11e      	bne.n	800355e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800352c:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	e005      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800353c:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003550:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d102      	bne.n	800356a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e004      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d101      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003572:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d133      	bne.n	80035e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0xa4>
 800358a:	2b03      	cmp	r3, #3
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0xaa>
 800358e:	e005      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003592:	617b      	str	r3, [r7, #20]
      break;
 8003594:	e005      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003598:	617b      	str	r3, [r7, #20]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	617b      	str	r3, [r7, #20]
      break;
 80035a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	3301      	adds	r3, #1
 80035ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	fb02 f203 	mul.w	r2, r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0e5b      	lsrs	r3, r3, #25
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	3301      	adds	r3, #1
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035e2:	69bb      	ldr	r3, [r7, #24]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3724      	adds	r7, #36	; 0x24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40021000 	.word	0x40021000
 80035f4:	080046c4 	.word	0x080046c4
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200

08003600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003618:	f7ff fa02 	bl	8002a20 <HAL_PWREx_GetVoltageRange>
 800361c:	6178      	str	r0, [r7, #20]
 800361e:	e014      	b.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	; 0x58
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003638:	f7ff f9f2 	bl	8002a20 <HAL_PWREx_GetVoltageRange>
 800363c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d10b      	bne.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d919      	bls.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2ba0      	cmp	r3, #160	; 0xa0
 800365c:	d902      	bls.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365e:	2302      	movs	r3, #2
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	e013      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e010      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d902      	bls.n	8003676 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003670:	2303      	movs	r3, #3
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	e00a      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d102      	bne.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800367c:	2302      	movs	r3, #2
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	e004      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d101      	bne.n	800368c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003688:	2301      	movs	r3, #1
 800368a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0207 	bic.w	r2, r3, #7
 8003694:	4909      	ldr	r1, [pc, #36]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c8:	2300      	movs	r3, #0
 80036ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036cc:	2300      	movs	r3, #0
 80036ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02f      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e4:	d005      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036ea:	d015      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80036f0:	e00f      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036f2:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a5c      	ldr	r2, [pc, #368]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fe:	e00c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fa12 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	74fb      	strb	r3, [r7, #19]
      break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b51      	ldr	r3, [pc, #324]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	494e      	ldr	r1, [pc, #312]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 809e 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800374e:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4b40      	ldr	r3, [pc, #256]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	4a3f      	ldr	r2, [pc, #252]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	6593      	str	r3, [r2, #88]	; 0x58
 8003770:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377c:	2301      	movs	r3, #1
 800377e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a39      	ldr	r2, [pc, #228]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378c:	f7fd fcc0 	bl	8001110 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003792:	e009      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003794:	f7fd fcbc 	bl	8001110 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d902      	bls.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	74fb      	strb	r3, [r7, #19]
        break;
 80037a6:	e005      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d15a      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d019      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fc7c 	bl	8001110 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381a:	e00b      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fd fc78 	bl	8001110 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d902      	bls.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	74fb      	strb	r3, [r7, #19]
            break;
 8003832:	e006      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ec      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800385e:	e009      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	74bb      	strb	r3, [r7, #18]
 8003864:	e006      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4bac      	ldr	r3, [pc, #688]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4aab      	ldr	r2, [pc, #684]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	49a2      	ldr	r1, [pc, #648]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b4:	4b9d      	ldr	r3, [pc, #628]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 020c 	bic.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	499a      	ldr	r1, [pc, #616]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	4991      	ldr	r1, [pc, #580]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4989      	ldr	r1, [pc, #548]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800391a:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4980      	ldr	r1, [pc, #512]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393c:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	4978      	ldr	r1, [pc, #480]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396c:	496f      	ldr	r1, [pc, #444]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003980:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	4967      	ldr	r1, [pc, #412]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a2:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	495e      	ldr	r1, [pc, #376]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	4956      	ldr	r1, [pc, #344]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ec:	f023 0203 	bic.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d028      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a08:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	4945      	ldr	r1, [pc, #276]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
 8003a34:	e011      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f872 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* set overall return value */
        status = ret;
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a66:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	492d      	ldr	r1, [pc, #180]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a84:	d106      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a86:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a90:	60d3      	str	r3, [r2, #12]
 8003a92:	e011      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 f843 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01c      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x43e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f820 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x43e>
      {
        /* set overall return value */
        status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	4904      	ldr	r1, [pc, #16]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000

08003b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3e:	4b73      	ldr	r3, [pc, #460]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d018      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d10d      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
       ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d044      	beq.n	8003c00 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e041      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d00c      	beq.n	8003b9e <RCCEx_PLLSAI1_Config+0x6e>
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d013      	beq.n	8003bb0 <RCCEx_PLLSAI1_Config+0x80>
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d120      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b8c:	4b5f      	ldr	r3, [pc, #380]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11d      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e01a      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bae:	e013      	b.n	8003bd8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bb0:	4b56      	ldr	r3, [pc, #344]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bcc:	e006      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd2:	e004      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be4:	4b49      	ldr	r3, [pc, #292]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	4944      	ldr	r1, [pc, #272]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d17c      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c06:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a40      	ldr	r2, [pc, #256]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c12:	f7fd fa7d 	bl	8001110 <HAL_GetTick>
 8003c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c18:	e009      	b.n	8003c2e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c1a:	f7fd fa79 	bl	8001110 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d902      	bls.n	8003c2e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2c:	e005      	b.n	8003c3a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ef      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d15f      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d110      	bne.n	8003c68 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6892      	ldr	r2, [r2, #8]
 8003c56:	0211      	lsls	r1, r2, #8
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68d2      	ldr	r2, [r2, #12]
 8003c5c:	06d2      	lsls	r2, r2, #27
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	492a      	ldr	r1, [pc, #168]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	610b      	str	r3, [r1, #16]
 8003c66:	e027      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d112      	bne.n	8003c94 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	0211      	lsls	r1, r2, #8
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6912      	ldr	r2, [r2, #16]
 8003c84:	0852      	lsrs	r2, r2, #1
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0552      	lsls	r2, r2, #21
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	491f      	ldr	r1, [pc, #124]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
 8003c92:	e011      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6952      	ldr	r2, [r2, #20]
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0652      	lsls	r2, r2, #25
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4916      	ldr	r1, [pc, #88]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fa24 	bl	8001110 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ccc:	f7fd fa20 	bl	8001110 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4904      	ldr	r1, [pc, #16]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e049      	b.n	8003db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd f938 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f000 f88a 	bl	8003e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e038      	b.n	8003e4a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_TIM_Base_Start+0x98>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_TIM_Base_Start+0x48>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d009      	beq.n	8003e08 <HAL_TIM_Base_Start+0x48>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_TIM_Base_Start+0x9c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_TIM_Base_Start+0x48>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_TIM_Base_Start+0xa0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d115      	bne.n	8003e34 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_TIM_Base_Start+0xa4>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d015      	beq.n	8003e46 <HAL_TIM_Base_Start+0x86>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d011      	beq.n	8003e46 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	e008      	b.n	8003e46 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	00010007 	.word	0x00010007

08003e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <TIM_Base_SetConfig+0xcc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x28>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x28>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <TIM_Base_SetConfig+0xd0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <TIM_Base_SetConfig+0xcc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_Base_SetConfig+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <TIM_Base_SetConfig+0xd4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0x62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <TIM_Base_SetConfig+0xd8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <TIM_Base_SetConfig+0xcc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0xb0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0xd4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <TIM_Base_SetConfig+0xd8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400

08003f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e054      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d108      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d009      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a11      	ldr	r2, [pc, #68]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40014000 	.word	0x40014000

08004020 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	2b20      	cmp	r3, #32
 8004034:	d16c      	bne.n	8004110 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_UART_Receive_DMA+0x22>
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e065      	b.n	8004112 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_UART_Receive_DMA+0x34>
 8004050:	2302      	movs	r3, #2
 8004052:	e05e      	b.n	8004112 <HAL_UART_Receive_DMA+0xf2>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2222      	movs	r2, #34	; 0x22
 8004074:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	4a26      	ldr	r2, [pc, #152]	; (800411c <HAL_UART_Receive_DMA+0xfc>)
 8004084:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	4a25      	ldr	r2, [pc, #148]	; (8004120 <HAL_UART_Receive_DMA+0x100>)
 800408c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	4a24      	ldr	r2, [pc, #144]	; (8004124 <HAL_UART_Receive_DMA+0x104>)
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409a:	2200      	movs	r2, #0
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	4619      	mov	r1, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	461a      	mov	r2, r3
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	f7fd ff5b 	bl	8001f6c <HAL_DMA_Start_IT>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2210      	movs	r2, #16
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e01e      	b.n	8004112 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ea:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	080041bb 	.word	0x080041bb
 8004120:	08004223 	.word	0x08004223
 8004124:	0800423f 	.word	0x0800423f

08004128 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004166:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004190:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11e      	bne.n	8004214 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7fc fc87 	bl	8000b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ff79 	bl	8004128 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004256:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d109      	bne.n	800427a <UART_DMAError+0x3c>
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d106      	bne.n	800427a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2200      	movs	r2, #0
 8004270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f7ff ff6b 	bl	8004150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d109      	bne.n	800429c <UART_DMAError+0x5e>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	d106      	bne.n	800429c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2200      	movs	r2, #0
 8004292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff6f 	bl	800417a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a0:	f043 0210 	orr.w	r2, r3, #16
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f7ff ff47 	bl	800413c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <arm_biquad_cascade_df2T_f32>:
 80042b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	7807      	ldrb	r7, [r0, #0]
 80042bc:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 80042c0:	6885      	ldr	r5, [r0, #8]
 80042c2:	3514      	adds	r5, #20
 80042c4:	6846      	ldr	r6, [r0, #4]
 80042c6:	3608      	adds	r6, #8
 80042c8:	ea4f 198e 	mov.w	r9, lr, lsl #6
 80042cc:	eb02 0b09 	add.w	fp, r2, r9
 80042d0:	f003 080f 	and.w	r8, r3, #15
 80042d4:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80042d8:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 80042dc:	ed15 7a04 	vldr	s14, [r5, #-16]
 80042e0:	ed55 6a03 	vldr	s13, [r5, #-12]
 80042e4:	ed15 6a02 	vldr	s12, [r5, #-8]
 80042e8:	ed55 5a01 	vldr	s11, [r5, #-4]
 80042ec:	46b4      	mov	ip, r6
 80042ee:	ed56 3a02 	vldr	s7, [r6, #-8]
 80042f2:	ed16 4a01 	vldr	s8, [r6, #-4]
 80042f6:	f1be 0f00 	cmp.w	lr, #0
 80042fa:	f000 8195 	beq.w	8004628 <arm_biquad_cascade_df2T_f32+0x372>
 80042fe:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8004302:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004306:	4674      	mov	r4, lr
 8004308:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800430c:	ee27 5a83 	vmul.f32	s10, s15, s6
 8004310:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004314:	ee67 4a03 	vmul.f32	s9, s14, s6
 8004318:	ee34 4a84 	vadd.f32	s8, s9, s8
 800431c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004320:	ee34 4a84 	vadd.f32	s8, s9, s8
 8004324:	ee26 3a83 	vmul.f32	s6, s13, s6
 8004328:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 800432c:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 8004330:	ee67 4aa3 	vmul.f32	s9, s15, s7
 8004334:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004338:	ee25 5a85 	vmul.f32	s10, s11, s10
 800433c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004340:	ee27 4a23 	vmul.f32	s8, s14, s7
 8004344:	ee35 5a04 	vadd.f32	s10, s10, s8
 8004348:	ee26 3a24 	vmul.f32	s6, s12, s9
 800434c:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004350:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8004354:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 8004358:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 800435c:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004360:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004364:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004368:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800436c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004370:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004374:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004378:	ee33 3a24 	vadd.f32	s6, s6, s9
 800437c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004380:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8004384:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8004388:	ee67 4a84 	vmul.f32	s9, s15, s8
 800438c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004390:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004394:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004398:	ee67 3a04 	vmul.f32	s7, s14, s8
 800439c:	ee35 5a23 	vadd.f32	s10, s10, s7
 80043a0:	ee26 3a24 	vmul.f32	s6, s12, s9
 80043a4:	ee33 3a05 	vadd.f32	s6, s6, s10
 80043a8:	ee66 3a84 	vmul.f32	s7, s13, s8
 80043ac:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 80043b0:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 80043b4:	ee27 5a84 	vmul.f32	s10, s15, s8
 80043b8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80043bc:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80043c0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80043c4:	ee67 3a04 	vmul.f32	s7, s14, s8
 80043c8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80043cc:	ee26 3a05 	vmul.f32	s6, s12, s10
 80043d0:	ee33 3a24 	vadd.f32	s6, s6, s9
 80043d4:	ee66 3a84 	vmul.f32	s7, s13, s8
 80043d8:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 80043dc:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 80043e0:	ee67 4a84 	vmul.f32	s9, s15, s8
 80043e4:	ee74 4a83 	vadd.f32	s9, s9, s6
 80043e8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80043ec:	ee35 5a23 	vadd.f32	s10, s10, s7
 80043f0:	ee67 3a04 	vmul.f32	s7, s14, s8
 80043f4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80043f8:	ee26 3a24 	vmul.f32	s6, s12, s9
 80043fc:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004400:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004404:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8004408:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800440c:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004410:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004414:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004418:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800441c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004420:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004424:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004428:	ee33 3a24 	vadd.f32	s6, s6, s9
 800442c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004430:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 8004434:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 8004438:	ee67 4a84 	vmul.f32	s9, s15, s8
 800443c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004440:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004444:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004448:	ee67 3a04 	vmul.f32	s7, s14, s8
 800444c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004450:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004454:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004458:	ee66 3a84 	vmul.f32	s7, s13, s8
 800445c:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 8004460:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 8004464:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004468:	ee35 5a03 	vadd.f32	s10, s10, s6
 800446c:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004470:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004474:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004478:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800447c:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004480:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004484:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004488:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800448c:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 8004490:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004494:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004498:	ee25 5a85 	vmul.f32	s10, s11, s10
 800449c:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044a0:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044a4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044a8:	ee26 3a24 	vmul.f32	s6, s12, s9
 80044ac:	ee33 3a05 	vadd.f32	s6, s6, s10
 80044b0:	ee66 3a84 	vmul.f32	s7, s13, s8
 80044b4:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80044b8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80044bc:	ee27 5a84 	vmul.f32	s10, s15, s8
 80044c0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80044c4:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80044c8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80044cc:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044d0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80044d4:	ee26 3a05 	vmul.f32	s6, s12, s10
 80044d8:	ee33 3a24 	vadd.f32	s6, s6, s9
 80044dc:	ee66 3a84 	vmul.f32	s7, s13, s8
 80044e0:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 80044e4:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 80044e8:	ee67 4a84 	vmul.f32	s9, s15, s8
 80044ec:	ee74 4a83 	vadd.f32	s9, s9, s6
 80044f0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80044f4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80044f8:	ee67 3a04 	vmul.f32	s7, s14, s8
 80044fc:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004500:	ee26 3a24 	vmul.f32	s6, s12, s9
 8004504:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004508:	ee66 3a84 	vmul.f32	s7, s13, s8
 800450c:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 8004510:	ed10 4a04 	vldr	s8, [r0, #-16]
 8004514:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004518:	ee35 5a03 	vadd.f32	s10, s10, s6
 800451c:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004520:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004524:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004528:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800452c:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004530:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004534:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004538:	ed03 5a04 	vstr	s10, [r3, #-16]
 800453c:	ed10 4a03 	vldr	s8, [r0, #-12]
 8004540:	ee67 4a84 	vmul.f32	s9, s15, s8
 8004544:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004548:	ee25 5a85 	vmul.f32	s10, s11, s10
 800454c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004550:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004554:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004558:	ee26 3a24 	vmul.f32	s6, s12, s9
 800455c:	ee33 3a05 	vadd.f32	s6, s6, s10
 8004560:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004564:	ed43 4a03 	vstr	s9, [r3, #-12]
 8004568:	ed10 4a02 	vldr	s8, [r0, #-8]
 800456c:	ee27 5a84 	vmul.f32	s10, s15, s8
 8004570:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004574:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8004578:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800457c:	ee67 3a04 	vmul.f32	s7, s14, s8
 8004580:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8004584:	ee26 3a05 	vmul.f32	s6, s12, s10
 8004588:	ee33 3a24 	vadd.f32	s6, s6, s9
 800458c:	ee66 3a84 	vmul.f32	s7, s13, s8
 8004590:	ed03 5a02 	vstr	s10, [r3, #-8]
 8004594:	ed10 4a01 	vldr	s8, [r0, #-4]
 8004598:	ee67 4a84 	vmul.f32	s9, s15, s8
 800459c:	ee74 4a83 	vadd.f32	s9, s9, s6
 80045a0:	ee25 5a85 	vmul.f32	s10, s11, s10
 80045a4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80045a8:	ee67 3a04 	vmul.f32	s7, s14, s8
 80045ac:	ee35 5a23 	vadd.f32	s10, s10, s7
 80045b0:	ee66 3a24 	vmul.f32	s7, s12, s9
 80045b4:	ee73 3a85 	vadd.f32	s7, s7, s10
 80045b8:	ee26 5a84 	vmul.f32	s10, s13, s8
 80045bc:	ee25 4aa4 	vmul.f32	s8, s11, s9
 80045c0:	ee34 4a05 	vadd.f32	s8, s8, s10
 80045c4:	ed43 4a01 	vstr	s9, [r3, #-4]
 80045c8:	3040      	adds	r0, #64	; 0x40
 80045ca:	3340      	adds	r3, #64	; 0x40
 80045cc:	3c01      	subs	r4, #1
 80045ce:	f47f ae9b 	bne.w	8004308 <arm_biquad_cascade_df2T_f32+0x52>
 80045d2:	4449      	add	r1, r9
 80045d4:	465b      	mov	r3, fp
 80045d6:	f1b8 0f00 	cmp.w	r8, #0
 80045da:	d019      	beq.n	8004610 <arm_biquad_cascade_df2T_f32+0x35a>
 80045dc:	eb01 000a 	add.w	r0, r1, sl
 80045e0:	ecf1 2a01 	vldmia	r1!, {s5}
 80045e4:	ee27 3aa2 	vmul.f32	s6, s15, s5
 80045e8:	ee33 3a23 	vadd.f32	s6, s6, s7
 80045ec:	ee67 3a22 	vmul.f32	s7, s14, s5
 80045f0:	ee33 4a84 	vadd.f32	s8, s7, s8
 80045f4:	ee26 5a03 	vmul.f32	s10, s12, s6
 80045f8:	ee75 3a04 	vadd.f32	s7, s10, s8
 80045fc:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8004600:	ee25 4a83 	vmul.f32	s8, s11, s6
 8004604:	ee34 4a22 	vadd.f32	s8, s8, s5
 8004608:	eca3 3a01 	vstmia	r3!, {s6}
 800460c:	4281      	cmp	r1, r0
 800460e:	d1e7      	bne.n	80045e0 <arm_biquad_cascade_df2T_f32+0x32a>
 8004610:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8004614:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8004618:	3514      	adds	r5, #20
 800461a:	3608      	adds	r6, #8
 800461c:	4611      	mov	r1, r2
 800461e:	3f01      	subs	r7, #1
 8004620:	f47f ae5a 	bne.w	80042d8 <arm_biquad_cascade_df2T_f32+0x22>
 8004624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004628:	4613      	mov	r3, r2
 800462a:	e7d4      	b.n	80045d6 <arm_biquad_cascade_df2T_f32+0x320>

0800462c <arm_biquad_cascade_df2T_init_f32>:
 800462c:	b510      	push	{r4, lr}
 800462e:	6082      	str	r2, [r0, #8]
 8004630:	7001      	strb	r1, [r0, #0]
 8004632:	4604      	mov	r4, r0
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4618      	mov	r0, r3
 8004638:	2100      	movs	r1, #0
 800463a:	f000 f827 	bl	800468c <memset>
 800463e:	6060      	str	r0, [r4, #4]
 8004640:	bd10      	pop	{r4, pc}
 8004642:	bf00      	nop

08004644 <__libc_init_array>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4e0d      	ldr	r6, [pc, #52]	; (800467c <__libc_init_array+0x38>)
 8004648:	4c0d      	ldr	r4, [pc, #52]	; (8004680 <__libc_init_array+0x3c>)
 800464a:	1ba4      	subs	r4, r4, r6
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	2500      	movs	r5, #0
 8004650:	42a5      	cmp	r5, r4
 8004652:	d109      	bne.n	8004668 <__libc_init_array+0x24>
 8004654:	4e0b      	ldr	r6, [pc, #44]	; (8004684 <__libc_init_array+0x40>)
 8004656:	4c0c      	ldr	r4, [pc, #48]	; (8004688 <__libc_init_array+0x44>)
 8004658:	f000 f820 	bl	800469c <_init>
 800465c:	1ba4      	subs	r4, r4, r6
 800465e:	10a4      	asrs	r4, r4, #2
 8004660:	2500      	movs	r5, #0
 8004662:	42a5      	cmp	r5, r4
 8004664:	d105      	bne.n	8004672 <__libc_init_array+0x2e>
 8004666:	bd70      	pop	{r4, r5, r6, pc}
 8004668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800466c:	4798      	blx	r3
 800466e:	3501      	adds	r5, #1
 8004670:	e7ee      	b.n	8004650 <__libc_init_array+0xc>
 8004672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004676:	4798      	blx	r3
 8004678:	3501      	adds	r5, #1
 800467a:	e7f2      	b.n	8004662 <__libc_init_array+0x1e>
 800467c:	080046f4 	.word	0x080046f4
 8004680:	080046f4 	.word	0x080046f4
 8004684:	080046f4 	.word	0x080046f4
 8004688:	080046f8 	.word	0x080046f8

0800468c <memset>:
 800468c:	4402      	add	r2, r0
 800468e:	4603      	mov	r3, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	d100      	bne.n	8004696 <memset+0xa>
 8004694:	4770      	bx	lr
 8004696:	f803 1b01 	strb.w	r1, [r3], #1
 800469a:	e7f9      	b.n	8004690 <memset+0x4>

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	bf00      	nop
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
