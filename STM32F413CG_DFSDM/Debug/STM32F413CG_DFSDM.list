
STM32F413CG_DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006148  08006148  0002ebac  2**0
                  CONTENTS
  4 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006150  08006150  0002ebac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000ebac  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  2000ebac  08014d04  0002ebac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffcc  08014d04  0002ffcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002ebac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d76  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a81  00000000  00000000  00041952  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  000443d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  000452e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fdf  00000000  00000000  000460a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0e2  00000000  00000000  0006907f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d46e3  00000000  00000000  00078161  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0014c844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  0014c934  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000db  00000000  00000000  00150694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000ebac 	.word	0x2000ebac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080060fc 	.word	0x080060fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000ebb0 	.word	0x2000ebb0
 8000214:	080060fc 	.word	0x080060fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Codec_Reset>:
	0x001	// Reg 09: Active Control
};


void Codec_Reset(I2C_HandleTypeDef *i2c_handle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t status =0;
 8000520:	2300      	movs	r3, #0
 8000522:	73bb      	strb	r3, [r7, #14]
	i2cx = *i2c_handle;
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <Codec_Reset+0x78>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4610      	mov	r0, r2
 800052a:	4619      	mov	r1, r3
 800052c:	2354      	movs	r3, #84	; 0x54
 800052e:	461a      	mov	r2, r3
 8000530:	f005 fdd0 	bl	80060d4 <memcpy>
	Codec_WriteRegister(0x0F, 0x00);
 8000534:	2100      	movs	r1, #0
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f82e 	bl	8000598 <Codec_WriteRegister>

	/* Load default values */
	for(i=0;i<W8731_NUM_REGS;i++)
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e01f      	b.n	8000582 <Codec_Reset+0x6a>
	{
		HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f001 f8e6 	bl	8001714 <HAL_Delay>

		status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <Codec_Reset+0x7c>)
 800054c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f81f 	bl	8000598 <Codec_WriteRegister>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 800055e:	e00a      	b.n	8000576 <Codec_Reset+0x5e>
			status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <Codec_Reset+0x7c>)
 8000564:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f813 	bl	8000598 <Codec_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f1      	beq.n	8000560 <Codec_Reset+0x48>
	for(i=0;i<W8731_NUM_REGS;i++)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d9dc      	bls.n	8000542 <Codec_Reset+0x2a>
		}

	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000ebc8 	.word	0x2000ebc8
 8000594:	08006114 	.word	0x08006114

08000598 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint32_t result = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	// RegisterValue is 9-bit register
	/* Assemble 2-byte data in WM8731 format */
	uint8_t Byte1 = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x1);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	72fb      	strb	r3, [r7, #11]
	uint8_t Byte2 = RegisterValue&0xFF;
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	72bb      	strb	r3, [r7, #10]
	iData[0] = Byte1;
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <Codec_WriteRegister+0x80>)
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	7013      	strb	r3, [r2, #0]
	iData[1] = Byte2;
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <Codec_WriteRegister+0x80>)
 80005d2:	7abb      	ldrb	r3, [r7, #10]
 80005d4:	7053      	strb	r3, [r2, #1]
	/* Transmit the slave address and enable writing operation */
	// take the most significant 7 bit address in the address byte
	if (HAL_I2C_Master_Transmit(&i2cx, CODEC_ADDRESS, iData, 2, 1000) != HAL_OK)
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Codec_WriteRegister+0x80>)
 80005e0:	2134      	movs	r1, #52	; 0x34
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <Codec_WriteRegister+0x84>)
 80005e4:	f002 fbf0 	bl	8002dc8 <HAL_I2C_Master_Transmit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <Codec_WriteRegister+0x66>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Codec_WriteRegister+0x88>)
 80005f4:	f002 fa7c 	bl	8002af0 <HAL_GPIO_WritePin>

		result = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e006      	b.n	800060c <Codec_WriteRegister+0x74>
		}
	else {

		result =1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2120      	movs	r1, #32
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <Codec_WriteRegister+0x88>)
 8000608:	f002 fa72 	bl	8002af0 <HAL_GPIO_WritePin>
	}

	return result;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000ec1c 	.word	0x2000ec1c
 800061c:	2000ebc8 	.word	0x2000ebc8
 8000620:	40020000 	.word	0x40020000

08000624 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800062a:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <MX_DFSDM1_Init+0xbc>)
 800062c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800063c:	2201      	movs	r2, #1
 800063e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000646:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000650:	2201      	movs	r2, #1
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000656:	f001 fa81 	bl	8001b5c <HAL_DFSDM_FilterInit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000660:	f000 fe72 	bl	8001348 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <MX_DFSDM1_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800066c:	2201      	movs	r2, #1
 800066e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 14;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000678:	220e      	movs	r2, #14
 800067a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000696:	2204      	movs	r2, #4
 8000698:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006a2:	220a      	movs	r2, #10
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b4:	f001 f962 	bl	800197c <HAL_DFSDM_ChannelInit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80006be:	f000 fe43 	bl	8001348 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80006c2:	2201      	movs	r2, #1
 80006c4:	4909      	ldr	r1, [pc, #36]	; (80006ec <MX_DFSDM1_Init+0xc8>)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 80006c8:	f001 fb34 	bl	8001d34 <HAL_DFSDM_FilterConfigRegChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80006d2:	f000 fe39 	bl	8001348 <Error_Handler>
  }

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000f600 	.word	0x2000f600
 80006e0:	40016100 	.word	0x40016100
 80006e4:	2000f5c8 	.word	0x2000f5c8
 80006e8:	40016020 	.word	0x40016020
 80006ec:	00010002 	.word	0x00010002

080006f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(dfsdm_filterHandle->Instance))&&(DFSDM1_Init == 0))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <HAL_DFSDM_FilterMspInit+0x14c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <HAL_DFSDM_FilterMspInit+0x2c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <HAL_DFSDM_FilterMspInit+0x150>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d14e      	bne.n	80007ba <HAL_DFSDM_FilterMspInit+0xca>
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14a      	bne.n	80007ba <HAL_DFSDM_FilterMspInit+0xca>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000724:	4b48      	ldr	r3, [pc, #288]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a47      	ldr	r2, [pc, #284]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 800072c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800072e:	4b46      	ldr	r3, [pc, #280]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10d      	bne.n	8000752 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a3c      	ldr	r2, [pc, #240]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PA4     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800076e:	2310      	movs	r3, #16
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 800077e:	2308      	movs	r3, #8
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4831      	ldr	r0, [pc, #196]	; (8000850 <HAL_DFSDM_FilterMspInit+0x160>)
 800078a:	f002 f81f 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007a0:	2306      	movs	r3, #6
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4829      	ldr	r0, [pc, #164]	; (8000850 <HAL_DFSDM_FilterMspInit+0x160>)
 80007ac:	f002 f80e 	bl	80027cc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 80007b8:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <HAL_DFSDM_FilterMspInit+0x14c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d137      	bne.n	8000834 <HAL_DFSDM_FilterMspInit+0x144>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <HAL_DFSDM_FilterMspInit+0x168>)
 80007c8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007cc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007d0:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ec:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fc:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000804:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 800080e:	f001 fc4d 	bl	80020ac <HAL_DMA_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_DFSDM_FilterMspInit+0x12c>
    {
      Error_Handler();
 8000818:	f000 fd96 	bl	8001348 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40016100 	.word	0x40016100
 8000840:	40016180 	.word	0x40016180
 8000844:	2000ec24 	.word	0x2000ec24
 8000848:	2000ec20 	.word	0x2000ec20
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	2000f654 	.word	0x2000f654
 8000858:	40026410 	.word	0x40026410

0800085c <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(dfsdm_channelHandle->Instance))&&(DFSDM1_Init == 0))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <HAL_DFSDM_ChannelMspInit+0xe8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d00e      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a31      	ldr	r2, [pc, #196]	; (8000948 <HAL_DFSDM_ChannelMspInit+0xec>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d009      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a2f      	ldr	r2, [pc, #188]	; (800094c <HAL_DFSDM_ChannelMspInit+0xf0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d004      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d14e      	bne.n	800093a <HAL_DFSDM_ChannelMspInit+0xde>
 800089c:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d14a      	bne.n	800093a <HAL_DFSDM_ChannelMspInit+0xde>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10d      	bne.n	80008d2 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a20      	ldr	r2, [pc, #128]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PA4     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008ee:	2310      	movs	r3, #16
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008fe:	2308      	movs	r3, #8
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4815      	ldr	r0, [pc, #84]	; (8000960 <HAL_DFSDM_ChannelMspInit+0x104>)
 800090a:	f001 ff5f 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000920:	2306      	movs	r3, #6
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <HAL_DFSDM_ChannelMspInit+0x104>)
 800092c:	f001 ff4e 	bl	80027cc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8000938:	6013      	str	r3, [r2, #0]
  }
}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40016000 	.word	0x40016000
 8000948:	40016020 	.word	0x40016020
 800094c:	40016040 	.word	0x40016040
 8000950:	40016060 	.word	0x40016060
 8000954:	2000ec24 	.word	0x2000ec24
 8000958:	2000ec20 	.word	0x2000ec20
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_DMA_Init+0x78>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <MX_DMA_Init+0x78>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_DMA_Init+0x78>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_DMA_Init+0x78>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_DMA_Init+0x78>)
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_DMA_Init+0x78>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	200b      	movs	r0, #11
 80009a8:	f000 ffb1 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ac:	200b      	movs	r0, #11
 80009ae:	f000 ffca 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	202f      	movs	r0, #47	; 0x2f
 80009b8:	f000 ffa9 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009bc:	202f      	movs	r0, #47	; 0x2f
 80009be:	f000 ffc2 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2038      	movs	r0, #56	; 0x38
 80009c8:	f000 ffa1 	bl	800190e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009cc:	2038      	movs	r0, #56	; 0x38
 80009ce:	f000 ffba 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_GPIO_Init+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0x9c>)
 8000a50:	f002 f84e 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a54:	2320      	movs	r3, #32
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0x9c>)
 8000a6c:	f001 feae 	bl	80027cc <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f002 f84b 	bl	8002b58 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fc3e 	bl	8001348 <Error_Handler>
  }

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000f6b4 	.word	0x2000f6b4
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_I2C_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_I2C_MspInit+0x8c>)
 8000b36:	f001 fe49 	bl	80027cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_I2S3_Init+0x58>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b94:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000b98:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000bae:	f002 fd41 	bl	8003634 <HAL_I2S_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bb8:	f000 fbc6 	bl	8001348 <Error_Handler>
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000f768 	.word	0x2000f768
 8000bc4:	40003c00 	.word	0x40003c00

08000bc8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <HAL_I2S_MspInit+0x124>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d17c      	bne.n	8000ce4 <HAL_I2S_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a3f      	ldr	r2, [pc, #252]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 8000c3e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c50:	2306      	movs	r3, #6
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <HAL_I2S_MspInit+0x12c>)
 8000c5c:	f001 fdb6 	bl	80027cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c72:	2306      	movs	r3, #6
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <HAL_I2S_MspInit+0x130>)
 8000c7e:	f001 fda5 	bl	80027cc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_I2S_MspInit+0x138>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cca:	f001 f9ef 	bl	80020ac <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000cd4:	f000 fb38 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40003c00 	.word	0x40003c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	2000f708 	.word	0x2000f708
 8000d00:	400260b8 	.word	0x400260b8

08000d04 <main>:
int gainDB[5] = {10,10,5,6,7};

void TestBlinking(void);

int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d08:	f000 fc92 	bl	8001630 <HAL_Init>
	SystemClock_Config();
 8000d0c:	f000 fa88 	bl	8001220 <SystemClock_Config>
	MX_GPIO_Init();
 8000d10:	f7ff fe66 	bl	80009e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d14:	f7ff fe26 	bl	8000964 <MX_DMA_Init>
	MX_I2C1_Init();
 8000d18:	f7ff feb2 	bl	8000a80 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000d1c:	f7ff ff26 	bl	8000b6c <MX_I2S3_Init>
	MX_DFSDM1_Init();
 8000d20:	f7ff fc80 	bl	8000624 <MX_DFSDM1_Init>
	MX_UART5_Init();
 8000d24:	f000 fbac 	bl	8001480 <MX_UART5_Init>
	HAL_Delay(1000);
 8000d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2c:	f000 fcf2 	bl	8001714 <HAL_Delay>
	if (HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 1, 10) == HAL_OK){
 8000d30:	230a      	movs	r3, #10
 8000d32:	2201      	movs	r2, #1
 8000d34:	2134      	movs	r1, #52	; 0x34
 8000d36:	48a5      	ldr	r0, [pc, #660]	; (8000fcc <main+0x2c8>)
 8000d38:	f002 f944 	bl	8002fc4 <HAL_I2C_IsDeviceReady>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <main+0x42>
		TestBlinking();
 8000d42:	f000 fa55 	bl	80011f0 <TestBlinking>
	}
	Codec_Reset(&hi2c1);
 8000d46:	48a1      	ldr	r0, [pc, #644]	; (8000fcc <main+0x2c8>)
 8000d48:	f7ff fbe6 	bl	8000518 <Codec_Reset>
	//10*(gainDB[0]+10)  ==> first 10 is for (5*NUMSTAGES)  , second 10 is for -10 to 10 gainDB
	arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8000d4c:	4ba0      	ldr	r3, [pc, #640]	; (8000fd0 <main+0x2cc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d54:	4613      	mov	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4a9d      	ldr	r2, [pc, #628]	; (8000fd4 <main+0x2d0>)
 8000d5e:	441a      	add	r2, r3
 8000d60:	4b9d      	ldr	r3, [pc, #628]	; (8000fd8 <main+0x2d4>)
 8000d62:	2103      	movs	r1, #3
 8000d64:	489d      	ldr	r0, [pc, #628]	; (8000fdc <main+0x2d8>)
 8000d66:	f005 f985 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 8000d6a:	4b99      	ldr	r3, [pc, #612]	; (8000fd0 <main+0x2cc>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d72:	4613      	mov	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4a99      	ldr	r2, [pc, #612]	; (8000fe0 <main+0x2dc>)
 8000d7c:	441a      	add	r2, r3
 8000d7e:	4b99      	ldr	r3, [pc, #612]	; (8000fe4 <main+0x2e0>)
 8000d80:	2103      	movs	r1, #3
 8000d82:	4899      	ldr	r0, [pc, #612]	; (8000fe8 <main+0x2e4>)
 8000d84:	f005 f976 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000d88:	4b91      	ldr	r3, [pc, #580]	; (8000fd0 <main+0x2cc>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d90:	4613      	mov	r3, r2
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4a94      	ldr	r2, [pc, #592]	; (8000fec <main+0x2e8>)
 8000d9a:	441a      	add	r2, r3
 8000d9c:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <main+0x2ec>)
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4894      	ldr	r0, [pc, #592]	; (8000ff4 <main+0x2f0>)
 8000da2:	f005 f967 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8000da6:	4b8a      	ldr	r3, [pc, #552]	; (8000fd0 <main+0x2cc>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dae:	4613      	mov	r3, r2
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4a90      	ldr	r2, [pc, #576]	; (8000ff8 <main+0x2f4>)
 8000db8:	441a      	add	r2, r3
 8000dba:	4b90      	ldr	r3, [pc, #576]	; (8000ffc <main+0x2f8>)
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	4890      	ldr	r0, [pc, #576]	; (8001000 <main+0x2fc>)
 8000dc0:	f005 f958 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8000dc4:	4b82      	ldr	r3, [pc, #520]	; (8000fd0 <main+0x2cc>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dcc:	4613      	mov	r3, r2
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4a8b      	ldr	r2, [pc, #556]	; (8001004 <main+0x300>)
 8000dd6:	441a      	add	r2, r3
 8000dd8:	4b8b      	ldr	r3, [pc, #556]	; (8001008 <main+0x304>)
 8000dda:	2103      	movs	r1, #3
 8000ddc:	488b      	ldr	r0, [pc, #556]	; (800100c <main+0x308>)
 8000dde:	f005 f949 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>

	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000de2:	22c8      	movs	r2, #200	; 0xc8
 8000de4:	498a      	ldr	r1, [pc, #552]	; (8001010 <main+0x30c>)
 8000de6:	488b      	ldr	r0, [pc, #556]	; (8001014 <main+0x310>)
 8000de8:	f000 ffea 	bl	8001dc0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <main+0xf2>
	{
		Error_Handler();
 8000df2:	f000 faa9 	bl	8001348 <Error_Handler>
	}
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2);
	HAL_UART_Receive_DMA(&huart5, Uart_array, 2);
 8000df6:	2202      	movs	r2, #2
 8000df8:	4987      	ldr	r1, [pc, #540]	; (8001018 <main+0x314>)
 8000dfa:	4888      	ldr	r0, [pc, #544]	; (800101c <main+0x318>)
 8000dfc:	f004 fa40 	bl	8005280 <HAL_UART_Receive_DMA>
	while (1)
	{
		if((DmaRightRecHalfBuffCplt == 1))
 8000e00:	4b87      	ldr	r3, [pc, #540]	; (8001020 <main+0x31c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d176      	bne.n	8000ef6 <main+0x1f2>
		{
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e08:	4b86      	ldr	r3, [pc, #536]	; (8001024 <main+0x320>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e014      	b.n	8000e3a <main+0x136>
			{
				r_buf_in[i]= (float) RightRecBuff[i];
 8000e10:	4b84      	ldr	r3, [pc, #528]	; (8001024 <main+0x320>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a7e      	ldr	r2, [pc, #504]	; (8001010 <main+0x30c>)
 8000e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e1a:	4b82      	ldr	r3, [pc, #520]	; (8001024 <main+0x320>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	ee07 2a90 	vmov	s15, r2
 8000e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e26:	4a80      	ldr	r2, [pc, #512]	; (8001028 <main+0x324>)
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e30:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <main+0x320>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	4a7b      	ldr	r2, [pc, #492]	; (8001024 <main+0x320>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <main+0x320>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b63      	cmp	r3, #99	; 0x63
 8000e40:	d9e6      	bls.n	8000e10 <main+0x10c>
			/*arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&r_buf_in[0], &r_buf_out[0],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S2, &r_buf_out[0],&r_buf_out[0],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S3, &r_buf_out[0],&r_buf_out[0],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S4, &r_buf_out[0],&r_buf_out[0],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S5, &r_buf_out[0],&r_buf_out[0],AUDIO_REC/2);*/
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e42:	4b78      	ldr	r3, [pc, #480]	; (8001024 <main+0x320>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e039      	b.n	8000ebe <main+0x1ba>
			{
				txBuf[i*4]  =  ((int)RightRecBuff[i])>>16;
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <main+0x320>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a70      	ldr	r2, [pc, #448]	; (8001010 <main+0x30c>)
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	141a      	asrs	r2, r3, #16
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <main+0x320>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	b291      	uxth	r1, r2
 8000e5e:	4a73      	ldr	r2, [pc, #460]	; (800102c <main+0x328>)
 8000e60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1]= ((int)RightRecBuff[i])&0xFFFF;
 8000e64:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <main+0x320>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a69      	ldr	r2, [pc, #420]	; (8001010 <main+0x30c>)
 8000e6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6e:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <main+0x320>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3301      	adds	r3, #1
 8000e76:	b291      	uxth	r1, r2
 8000e78:	4a6c      	ldr	r2, [pc, #432]	; (800102c <main+0x328>)
 8000e7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 8000e7e:	4b69      	ldr	r3, [pc, #420]	; (8001024 <main+0x320>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	009a      	lsls	r2, r3, #2
 8000e84:	4b67      	ldr	r3, [pc, #412]	; (8001024 <main+0x320>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	4967      	ldr	r1, [pc, #412]	; (800102c <main+0x328>)
 8000e8e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e92:	4a66      	ldr	r2, [pc, #408]	; (800102c <main+0x328>)
 8000e94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 8000e98:	4b62      	ldr	r3, [pc, #392]	; (8001024 <main+0x320>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	4b60      	ldr	r3, [pc, #384]	; (8001024 <main+0x320>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	3303      	adds	r3, #3
 8000ea8:	4960      	ldr	r1, [pc, #384]	; (800102c <main+0x328>)
 8000eaa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000eae:	4a5f      	ldr	r2, [pc, #380]	; (800102c <main+0x328>)
 8000eb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <main+0x320>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <main+0x320>)
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b59      	ldr	r3, [pc, #356]	; (8001024 <main+0x320>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	d9c1      	bls.n	8000e4a <main+0x146>
			}

			if(PlaybackStarted == 0)
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <main+0x32c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <main+0x1e6>
			{
				if(HAL_OK != HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2))
 8000ece:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000ed2:	4956      	ldr	r1, [pc, #344]	; (800102c <main+0x328>)
 8000ed4:	4857      	ldr	r0, [pc, #348]	; (8001034 <main+0x330>)
 8000ed6:	f002 fd0f 	bl	80038f8 <HAL_I2S_Transmit_DMA>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <main+0x1e0>
				{
					Error_Handler();
 8000ee0:	f000 fa32 	bl	8001348 <Error_Handler>
				}
				PlaybackStarted = 1;
 8000ee4:	4b52      	ldr	r3, [pc, #328]	; (8001030 <main+0x32c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
			}
			DmaLeftRecHalfBuffCplt  = 0;
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <main+0x334>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
			DmaRightRecHalfBuffCplt = 0;
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <main+0x31c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <main+0x338>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d180      	bne.n	8000e00 <main+0xfc>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <main+0x320>)
 8000f00:	2264      	movs	r2, #100	; 0x64
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e014      	b.n	8000f30 <main+0x22c>
			{
				r_buf_in[i]= (float) RightRecBuff[i];
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <main+0x320>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a41      	ldr	r2, [pc, #260]	; (8001010 <main+0x30c>)
 8000f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <main+0x320>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	ee07 2a90 	vmov	s15, r2
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	4a42      	ldr	r2, [pc, #264]	; (8001028 <main+0x324>)
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	edc3 7a00 	vstr	s15, [r3]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <main+0x320>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a3d      	ldr	r2, [pc, #244]	; (8001024 <main+0x320>)
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <main+0x320>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2bc7      	cmp	r3, #199	; 0xc7
 8000f36:	d9e6      	bls.n	8000f06 <main+0x202>
			/*arm_biquad_cascade_df2T_f32(&S1,(float32_t *)&r_buf_in[AUDIO_REC/2] , &r_buf_out[AUDIO_REC/2],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S2, &r_buf_out[AUDIO_REC/2],&r_buf_out[AUDIO_REC/2],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S3, &r_buf_out[AUDIO_REC/2],&r_buf_out[AUDIO_REC/2],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S4, &r_buf_out[AUDIO_REC/2],&r_buf_out[AUDIO_REC/2],AUDIO_REC/2);
			arm_biquad_cascade_df2T_f32(&S5, &r_buf_out[AUDIO_REC/2],&r_buf_out[AUDIO_REC/2],AUDIO_REC/2);*/
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000f38:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <main+0x320>)
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e039      	b.n	8000fb4 <main+0x2b0>
			{
				txBuf[i*4]  =  ((int)RightRecBuff[i])>>16;
 8000f40:	4b38      	ldr	r3, [pc, #224]	; (8001024 <main+0x320>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <main+0x30c>)
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	141a      	asrs	r2, r3, #16
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <main+0x320>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	b291      	uxth	r1, r2
 8000f54:	4a35      	ldr	r2, [pc, #212]	; (800102c <main+0x328>)
 8000f56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1]= ((int)RightRecBuff[i])&0xFFFF;
 8000f5a:	4b32      	ldr	r3, [pc, #200]	; (8001024 <main+0x320>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <main+0x30c>)
 8000f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f64:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <main+0x320>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b291      	uxth	r1, r2
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <main+0x328>)
 8000f70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <main+0x320>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	009a      	lsls	r2, r3, #2
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <main+0x320>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	492a      	ldr	r1, [pc, #168]	; (800102c <main+0x328>)
 8000f84:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <main+0x328>)
 8000f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <main+0x320>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <main+0x320>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	4923      	ldr	r1, [pc, #140]	; (800102c <main+0x328>)
 8000fa0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <main+0x328>)
 8000fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <main+0x320>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <main+0x320>)
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <main+0x320>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2bc7      	cmp	r3, #199	; 0xc7
 8000fba:	d9c1      	bls.n	8000f40 <main+0x23c>
			{
				uSample32=PlayBuff[i];
				PlayBuff[i]=  uSample32 <<16 | uSample32 >>16;
			}*/
			//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&txBuf[0], AUDIO_REC*2);
			DmaLeftRecBuffCplt  = 0;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <main+0x33c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			DmaRightRecBuffCplt = 0;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <main+0x338>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 8000fc8:	e71a      	b.n	8000e00 <main+0xfc>
 8000fca:	bf00      	nop
 8000fcc:	2000f6b4 	.word	0x2000f6b4
 8000fd0:	2000eb8c 	.word	0x2000eb8c
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	2000f7bc 	.word	0x2000f7bc
 8000fdc:	2000fb14 	.word	0x2000fb14
 8000fe0:	20002f1c 	.word	0x20002f1c
 8000fe4:	2000fb9c 	.word	0x2000fb9c
 8000fe8:	2000fb90 	.word	0x2000fb90
 8000fec:	20005e38 	.word	0x20005e38
 8000ff0:	2000fb20 	.word	0x2000fb20
 8000ff4:	2000f7b0 	.word	0x2000f7b0
 8000ff8:	20008d54 	.word	0x20008d54
 8000ffc:	2000fbd8 	.word	0x2000fbd8
 8001000:	2000fb84 	.word	0x2000fb84
 8001004:	2000bc70 	.word	0x2000bc70
 8001008:	2000fb54 	.word	0x2000fb54
 800100c:	2000fbcc 	.word	0x2000fbcc
 8001010:	2000ec28 	.word	0x2000ec28
 8001014:	2000f600 	.word	0x2000f600
 8001018:	2000f7f0 	.word	0x2000f7f0
 800101c:	2000ff28 	.word	0x2000ff28
 8001020:	2000f58a 	.word	0x2000f58a
 8001024:	2000fb50 	.word	0x2000fb50
 8001028:	2000fc08 	.word	0x2000fc08
 800102c:	2000ef48 	.word	0x2000ef48
 8001030:	2000f58c 	.word	0x2000f58c
 8001034:	2000f768 	.word	0x2000f768
 8001038:	2000f588 	.word	0x2000f588
 800103c:	2000f58b 	.word	0x2000f58b
 8001040:	2000f589 	.word	0x2000f589

08001044 <HAL_UART_RxCpltCallback>:
/*void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	playSong();
}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	switch((int8_t)Uart_array[0])
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	3b01      	subs	r3, #1
 8001054:	2b04      	cmp	r3, #4
 8001056:	f200 8083 	bhi.w	8001160 <HAL_UART_RxCpltCallback+0x11c>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <HAL_UART_RxCpltCallback+0x1c>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001075 	.word	0x08001075
 8001064:	080010a9 	.word	0x080010a9
 8001068:	080010dd 	.word	0x080010dd
 800106c:	08001109 	.word	0x08001109
 8001070:	08001135 	.word	0x08001135
	{
	case 1:
		gainDB[0] =(int8_t)(Uart_array[1]);
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 800107e:	601a      	str	r2, [r3, #0]
		//S1.pCoeffs=&band1_coeff[(5*NUMSTAGES)*(gainDB[0]+10)];
		arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001088:	4613      	mov	r3, r2
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <HAL_UART_RxCpltCallback+0x12c>)
 8001092:	441a      	add	r2, r3
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <HAL_UART_RxCpltCallback+0x130>)
 8001096:	2103      	movs	r1, #3
 8001098:	4837      	ldr	r0, [pc, #220]	; (8001178 <HAL_UART_RxCpltCallback+0x134>)
 800109a:	f004 ffeb 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800109e:	2120      	movs	r1, #32
 80010a0:	4836      	ldr	r0, [pc, #216]	; (800117c <HAL_UART_RxCpltCallback+0x138>)
 80010a2:	f001 fd3e 	bl	8002b22 <HAL_GPIO_TogglePin>
		break;
 80010a6:	e05b      	b.n	8001160 <HAL_UART_RxCpltCallback+0x11c>
	case 2:
		gainDB[1] =(int8_t)(Uart_array[1]);
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 80010b2:	605a      	str	r2, [r3, #4]
		//S2.pCoeffs=&band2_coeff[(5*NUMSTAGES)*(gainDB[1]+10)];
		arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80010bc:	4613      	mov	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <HAL_UART_RxCpltCallback+0x13c>)
 80010c6:	441a      	add	r2, r3
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_UART_RxCpltCallback+0x140>)
 80010ca:	2103      	movs	r1, #3
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <HAL_UART_RxCpltCallback+0x144>)
 80010ce:	f004 ffd1 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010d2:	2120      	movs	r1, #32
 80010d4:	4829      	ldr	r0, [pc, #164]	; (800117c <HAL_UART_RxCpltCallback+0x138>)
 80010d6:	f001 fd24 	bl	8002b22 <HAL_GPIO_TogglePin>
		break;
 80010da:	e041      	b.n	8001160 <HAL_UART_RxCpltCallback+0x11c>
	case 3:
		gainDB[2] =(int8_t)(Uart_array[1]);
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 80010e6:	609a      	str	r2, [r3, #8]
		arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80010f0:	4613      	mov	r3, r2
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_UART_RxCpltCallback+0x148>)
 80010fa:	441a      	add	r2, r3
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_UART_RxCpltCallback+0x14c>)
 80010fe:	2103      	movs	r1, #3
 8001100:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_UART_RxCpltCallback+0x150>)
 8001102:	f004 ffb7 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
		break;
 8001106:	e02b      	b.n	8001160 <HAL_UART_RxCpltCallback+0x11c>
	case 4:
		gainDB[3] =(int8_t)(Uart_array[1]);
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 8001112:	60da      	str	r2, [r3, #12]
		arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800111c:	4613      	mov	r3, r2
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_UART_RxCpltCallback+0x154>)
 8001126:	441a      	add	r2, r3
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_UART_RxCpltCallback+0x158>)
 800112a:	2103      	movs	r1, #3
 800112c:	481c      	ldr	r0, [pc, #112]	; (80011a0 <HAL_UART_RxCpltCallback+0x15c>)
 800112e:	f004 ffa1 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
		break;
 8001132:	e015      	b.n	8001160 <HAL_UART_RxCpltCallback+0x11c>
	case 5:
		gainDB[4] =(int8_t)(Uart_array[1]);
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_UART_RxCpltCallback+0x124>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 800113e:	611a      	str	r2, [r3, #16]
		arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_UART_RxCpltCallback+0x128>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001148:	4613      	mov	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_UART_RxCpltCallback+0x160>)
 8001152:	441a      	add	r2, r3
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_UART_RxCpltCallback+0x164>)
 8001156:	2103      	movs	r1, #3
 8001158:	4814      	ldr	r0, [pc, #80]	; (80011ac <HAL_UART_RxCpltCallback+0x168>)
 800115a:	f004 ff8b 	bl	8006074 <arm_biquad_cascade_df2T_init_f32>
		break;
 800115e:	bf00      	nop
	}
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000f7f0 	.word	0x2000f7f0
 800116c:	2000eb8c 	.word	0x2000eb8c
 8001170:	20000000 	.word	0x20000000
 8001174:	2000f7bc 	.word	0x2000f7bc
 8001178:	2000fb14 	.word	0x2000fb14
 800117c:	40020000 	.word	0x40020000
 8001180:	20002f1c 	.word	0x20002f1c
 8001184:	2000fb9c 	.word	0x2000fb9c
 8001188:	2000fb90 	.word	0x2000fb90
 800118c:	20005e38 	.word	0x20005e38
 8001190:	2000fb20 	.word	0x2000fb20
 8001194:	2000f7b0 	.word	0x2000f7b0
 8001198:	20008d54 	.word	0x20008d54
 800119c:	2000fbd8 	.word	0x2000fbd8
 80011a0:	2000fb84 	.word	0x2000fb84
 80011a4:	2000bc70 	.word	0x2000bc70
 80011a8:	2000fb54 	.word	0x2000fb54
 80011ac:	2000fbcc 	.word	0x2000fbcc

080011b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
		DmaRightRecHalfBuffCplt = 1;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000f58a 	.word	0x2000f58a

080011d0 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	DmaRightRecBuffCplt = 1;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000f58b 	.word	0x2000f58b

080011f0 <TestBlinking>:
void TestBlinking(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <TestBlinking+0x2c>)
 80011fa:	f001 fc79 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001202:	f000 fa87 	bl	8001714 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2120      	movs	r1, #32
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <TestBlinking+0x2c>)
 800120c:	f001 fc70 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001214:	f000 fa7e 	bl	8001714 <HAL_Delay>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020000 	.word	0x40020000

08001220 <SystemClock_Config>:
  * @brief  The application entry point.
  * @retval int
  */
#include"body_df2T_mono.h"
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0aa      	sub	sp, #168	; 0xa8
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800122a:	2234      	movs	r2, #52	; 0x34
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f004 ff5b 	bl	80060ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2258      	movs	r2, #88	; 0x58
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f004 ff4c 	bl	80060ea <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <SystemClock_Config+0x120>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a39      	ldr	r2, [pc, #228]	; (8001340 <SystemClock_Config+0x120>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <SystemClock_Config+0x120>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <SystemClock_Config+0x124>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a33      	ldr	r2, [pc, #204]	; (8001344 <SystemClock_Config+0x124>)
 8001278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <SystemClock_Config+0x124>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128a:	2301      	movs	r3, #1
 800128c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800128e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001292:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800129e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a2:	2304      	movs	r3, #4
 80012a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 80;
 80012a8:	2350      	movs	r3, #80	; 0x50
 80012aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 5;
 80012ba:	2305      	movs	r3, #5
 80012bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fd4b 	bl	8004d60 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012d0:	f000 f83a 	bl	8001348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 ff66 	bl	80041c4 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80012fe:	f000 f823 	bl	8001348 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1;
 8001302:	f240 1301 	movw	r3, #257	; 0x101
 8001306:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 120;
 8001308:	2378      	movs	r3, #120	; 0x78
 800130a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 7;
 800130c:	2307      	movs	r3, #7
 800130e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001310:	2303      	movs	r3, #3
 8001312:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800131c:	2300      	movs	r3, #0
 800131e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f003 f93d 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001334:	f000 f808 	bl	8001348 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	37a8      	adds	r7, #168	; 0xa8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f96a 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Stream0_IRQHandler+0x10>)
 800140a:	f000 ff77 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000ff68 	.word	0x2000ff68

08001418 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Stream7_IRQHandler+0x10>)
 800141e:	f000 ff6d 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000f708 	.word	0x2000f708

0800142c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <UART5_IRQHandler+0x10>)
 8001432:	f003 ffa5 	bl	8005380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000ff28 	.word	0x2000ff28

08001440 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <DMA2_Stream0_IRQHandler+0x10>)
 8001446:	f000 ff59 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000f654 	.word	0x2000f654

08001454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SystemInit+0x28>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <SystemInit+0x28>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <SystemInit+0x28>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146e:	609a      	str	r2, [r3, #8]
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_UART5_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_UART5_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_UART5_Init+0x4c>)
 800148c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001490:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_UART5_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_UART5_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_UART5_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_UART5_Init+0x4c>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_UART5_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_UART5_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_UART5_Init+0x4c>)
 80014b8:	f003 fe94 	bl	80051e4 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff ff41 	bl	8001348 <Error_Handler>
  }

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000ff28 	.word	0x2000ff28
 80014d0:	40005000 	.word	0x40005000

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <HAL_UART_MspInit+0xf4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d163      	bne.n	80015be <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_UART_MspInit+0xf8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a33      	ldr	r2, [pc, #204]	; (80015cc <HAL_UART_MspInit+0xf8>)
 8001500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_UART_MspInit+0xf8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_UART_MspInit+0xf8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <HAL_UART_MspInit+0xf8>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <HAL_UART_MspInit+0xf8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001540:	230b      	movs	r3, #11
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4821      	ldr	r0, [pc, #132]	; (80015d0 <HAL_UART_MspInit+0xfc>)
 800154c:	f001 f93e 	bl	80027cc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_UART_MspInit+0x104>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_UART_MspInit+0x100>)
 800156c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_UART_MspInit+0x100>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_UART_MspInit+0x100>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001592:	4810      	ldr	r0, [pc, #64]	; (80015d4 <HAL_UART_MspInit+0x100>)
 8001594:	f000 fd8a 	bl	80020ac <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800159e:	f7ff fed3 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_UART_MspInit+0x100>)
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_UART_MspInit+0x100>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2035      	movs	r0, #53	; 0x35
 80015b4:	f000 f9ab 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015b8:	2035      	movs	r0, #53	; 0x35
 80015ba:	f000 f9c4 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40005000 	.word	0x40005000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400
 80015d4:	2000ff68 	.word	0x2000ff68
 80015d8:	40026010 	.word	0x40026010

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80015e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
  ldr  r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80015fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015fc:	f842 3b04 	str.w	r3, [r2], #4

08001600 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001606:	f7ff ff25 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f004 fd3f 	bl	800608c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7ff fb79 	bl	8000d04 <main>
  bx  lr    
 8001612:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001614:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001618:	08006158 	.word	0x08006158
  ldr  r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001620:	2000ebac 	.word	0x2000ebac
  ldr  r2, =_sbss
 8001624:	2000ebac 	.word	0x2000ebac
  ldr  r3, = _ebss
 8001628:	2000ffcc 	.word	0x2000ffcc

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f94d 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff fe78 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f965 	bl	8001962 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f000 f92d 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000eba0 	.word	0x2000eba0
 80016cc:	2000eba8 	.word	0x2000eba8
 80016d0:	2000eba4 	.word	0x2000eba4

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000eba8 	.word	0x2000eba8
 80016f8:	2000ffc8 	.word	0x2000ffc8

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	2000ffc8 	.word	0x2000ffc8

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_Delay+0x40>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000eba8 	.word	0x2000eba8

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0cf      	b.n	8001b2e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00e      	beq.n	80019b6 <HAL_DFSDM_ChannelInit+0x3a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <HAL_DFSDM_ChannelInit+0x1c0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d009      	beq.n	80019b6 <HAL_DFSDM_ChannelInit+0x3a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a66      	ldr	r2, [pc, #408]	; (8001b40 <HAL_DFSDM_ChannelInit+0x1c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d004      	beq.n	80019b6 <HAL_DFSDM_ChannelInit+0x3a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a64      	ldr	r2, [pc, #400]	; (8001b44 <HAL_DFSDM_ChannelInit+0x1c8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80019b6:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_DFSDM_ChannelInit+0x1cc>)
 80019b8:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <HAL_DFSDM_ChannelInit+0x1d0>)
 80019bc:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_DFSDM_ChannelInit+0x1bc>)
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e005      	b.n	80019d0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_DFSDM_ChannelInit+0x1d4>)
 80019c6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80019c8:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_DFSDM_ChannelInit+0x1d8>)
 80019ca:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_DFSDM_ChannelInit+0x1dc>)
 80019ce:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 faaf 	bl	8001f38 <DFSDM_GetChannelFromInstance>
 80019da:	4603      	mov	r3, r0
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0a0      	b.n	8001b2e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe ff35 	bl	800085c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d125      	bne.n	8001a50 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a5e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a6e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001a74:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 020f 	bic.w	r2, r2, #15
 8001a8c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ab4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f002 0207 	and.w	r2, r2, #7
 8001ae0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b0c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fa0c 	bl	8001f38 <DFSDM_GetChannelFromInstance>
 8001b20:	4603      	mov	r3, r0
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40016000 	.word	0x40016000
 8001b3c:	40016020 	.word	0x40016020
 8001b40:	40016040 	.word	0x40016040
 8001b44:	40016060 	.word	0x40016060
 8001b48:	2000f590 	.word	0x2000f590
 8001b4c:	2000f594 	.word	0x2000f594
 8001b50:	2000f5a4 	.word	0x2000f5a4
 8001b54:	2000f5a8 	.word	0x2000f5a8
 8001b58:	40016400 	.word	0x40016400

08001b5c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0d9      	b.n	8001d22 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_DFSDM_FilterInit+0x1d0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d109      	bne.n	8001b8c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d003      	beq.n	8001b88 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ca      	b.n	8001d22 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a67      	ldr	r2, [pc, #412]	; (8001d30 <HAL_DFSDM_FilterInit+0x1d4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d109      	bne.n	8001baa <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d003      	beq.n	8001ba6 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0bb      	b.n	8001d22 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fd94 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001bd6:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7a1b      	ldrb	r3, [r3, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001c00:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7a5b      	ldrb	r3, [r3, #9]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001c3a:	f023 0308 	bic.w	r3, r3, #8
 8001c3e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d108      	bne.n	8001c5a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7c1b      	ldrb	r3, [r3, #16]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0210 	orr.w	r2, r2, #16
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7c5b      	ldrb	r3, [r3, #17]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e007      	b.n	8001cae <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0220 	bic.w	r2, r2, #32
 8001cac:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001cbc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001cc0:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6959      	ldr	r1, [r3, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001cd4:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001cdc:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7c1a      	ldrb	r2, [r3, #16]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40016100 	.word	0x40016100
 8001d30:	40016500 	.word	0x40016500

08001d34 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02e      	beq.n	8001dac <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001d54:	2bff      	cmp	r3, #255	; 0xff
 8001d56:	d029      	beq.n	8001dac <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10d      	bne.n	8001d8e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e00a      	b.n	8001da4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
 8001daa:	e001      	b.n	8001db0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]
 8001de0:	e066      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df0:	d002      	beq.n	8001df8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
 8001df6:	e05b      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10e      	bne.n	8001e1e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10a      	bne.n	8001e1e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d002      	beq.n	8001e1e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]
 8001e1c:	e048      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e38:	d102      	bne.n	8001e40 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
 8001e3e:	e037      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d004      	beq.n	8001e54 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d12b      	bne.n	8001eac <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001e62:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6e:	d101      	bne.n	8001e74 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001e72:	e000      	b.n	8001e76 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001e74:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	331c      	adds	r3, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f000 f9bc 	bl	8002208 <HAL_DMA_Start_IT>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001ea2:	e005      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8ab 	bl	8002000 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001eaa:	e001      	b.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08001ef9 	.word	0x08001ef9
 8001ec0:	08001f15 	.word	0x08001f15
 8001ec4:	08001edd 	.word	0x08001edd

08001ec8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff f960 	bl	80011b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff f962 	bl	80011d0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2203      	movs	r2, #3
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff ffcd 	bl	8001ec8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <DFSDM_GetChannelFromInstance+0x9c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <DFSDM_GetChannelFromInstance+0x18>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <DFSDM_GetChannelFromInstance+0xa0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e037      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <DFSDM_GetChannelFromInstance+0xa4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <DFSDM_GetChannelFromInstance+0x2e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <DFSDM_GetChannelFromInstance+0xa8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d102      	bne.n	8001f6c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8001f66:	2301      	movs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e02c      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <DFSDM_GetChannelFromInstance+0xac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <DFSDM_GetChannelFromInstance+0x44>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <DFSDM_GetChannelFromInstance+0xb0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e021      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <DFSDM_GetChannelFromInstance+0xb4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <DFSDM_GetChannelFromInstance+0x5a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <DFSDM_GetChannelFromInstance+0xb8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d102      	bne.n	8001f98 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8001f92:	2303      	movs	r3, #3
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e016      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <DFSDM_GetChannelFromInstance+0xbc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e00f      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <DFSDM_GetChannelFromInstance+0xc0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d102      	bne.n	8001fb4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e008      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <DFSDM_GetChannelFromInstance+0xc4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8001fbc:	2306      	movs	r3, #6
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e001      	b.n	8001fc6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40016000 	.word	0x40016000
 8001fd8:	40016400 	.word	0x40016400
 8001fdc:	40016020 	.word	0x40016020
 8001fe0:	40016420 	.word	0x40016420
 8001fe4:	40016040 	.word	0x40016040
 8001fe8:	40016440 	.word	0x40016440
 8001fec:	40016060 	.word	0x40016060
 8001ff0:	40016460 	.word	0x40016460
 8001ff4:	40016480 	.word	0x40016480
 8001ff8:	400164a0 	.word	0x400164a0
 8001ffc:	400164c0 	.word	0x400164c0

08002000 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e033      	b.n	800208a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002040:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002058:	2b03      	cmp	r3, #3
 800205a:	d116      	bne.n	800208a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0202 	orr.w	r2, r2, #2
 8002072:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <DFSDM_RegConvStart+0x84>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	e000      	b.n	8002086 <DFSDM_RegConvStart+0x86>
 8002084:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <DFSDM_RegConvStart+0x98>
 8002094:	2202      	movs	r2, #2
 8002096:	e000      	b.n	800209a <DFSDM_RegConvStart+0x9a>
 8002098:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff fb20 	bl	80016fc <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e099      	b.n	80021fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e8:	e00f      	b.n	800210a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ea:	f7ff fb07 	bl	80016fc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d908      	bls.n	800210a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e078      	b.n	80021fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e8      	bne.n	80020ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_DMA_Init+0x158>)
 8002124:	4013      	ands	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4313      	orrs	r3, r2
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b04      	cmp	r3, #4
 800219c:	d117      	bne.n	80021ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fa91 	bl	80026d8 <DMA_CheckFifoParam>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ca:	2301      	movs	r3, #1
 80021cc:	e016      	b.n	80021fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fa48 	bl	800266c <DMA_CalcBaseAndBitshift>
 80021dc:	4603      	mov	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	e010803f 	.word	0xe010803f

08002208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_DMA_Start_IT+0x26>
 800222a:	2302      	movs	r3, #2
 800222c:	e040      	b.n	80022b0 <HAL_DMA_Start_IT+0xa8>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12f      	bne.n	80022a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2202      	movs	r2, #2
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f9da 	bl	8002610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	223f      	movs	r2, #63	; 0x3f
 8002262:	409a      	lsls	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0216 	orr.w	r2, r2, #22
 8002276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e005      	b.n	80022ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
 80022ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00c      	b.n	80022f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_DMA_IRQHandler+0x258>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a92      	ldr	r2, [pc, #584]	; (8002558 <HAL_DMA_IRQHandler+0x25c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0204 	bic.w	r2, r2, #4
 800234e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	2208      	movs	r2, #8
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2201      	movs	r2, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f043 0202 	orr.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2204      	movs	r2, #4
 80023a4:	409a      	lsls	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d012      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2204      	movs	r2, #4
 80023c2:	409a      	lsls	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2210      	movs	r2, #16
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d043      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d03c      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2210      	movs	r2, #16
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d018      	beq.n	800243e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d024      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
 800242a:	e01f      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e016      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0208 	bic.w	r2, r2, #8
 800245a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2220      	movs	r2, #32
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808e 	beq.w	800259a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8086 	beq.w	800259a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2220      	movs	r2, #32
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d136      	bne.n	8002514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0216 	bic.w	r2, r2, #22
 80024b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x1da>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	223f      	movs	r2, #63	; 0x3f
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d07d      	beq.n	8002606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
        }
        return;
 8002512:	e078      	b.n	8002606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01c      	beq.n	800255c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d108      	bne.n	8002542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	2b00      	cmp	r3, #0
 8002536:	d030      	beq.n	800259a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e02b      	b.n	800259a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d027      	beq.n	800259a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e022      	b.n	800259a <HAL_DMA_IRQHandler+0x29e>
 8002554:	2000eba0 	.word	0x2000eba0
 8002558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0210 	bic.w	r2, r2, #16
 8002578:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d032      	beq.n	8002608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d307      	bcc.n	80025e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f2      	bne.n	80025c6 <HAL_DMA_IRQHandler+0x2ca>
 80025e0:	e000      	b.n	80025e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e000      	b.n	8002608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002606:	bf00      	nop
    }
  }
}
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop

08002610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800262c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d108      	bne.n	8002650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800264e:	e007      	b.n	8002660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	60da      	str	r2, [r3, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3b10      	subs	r3, #16
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <DMA_CalcBaseAndBitshift+0x64>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002686:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d909      	bls.n	80026ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	1d1a      	adds	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58
 80026ac:	e007      	b.n	80026be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	aaaaaaab 	.word	0xaaaaaaab
 80026d4:	08006140 	.word	0x08006140

080026d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11f      	bne.n	8002732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d855      	bhi.n	80027a4 <DMA_CheckFifoParam+0xcc>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <DMA_CheckFifoParam+0x28>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	08002723 	.word	0x08002723
 8002708:	08002711 	.word	0x08002711
 800270c:	080027a5 	.word	0x080027a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d045      	beq.n	80027a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002720:	e042      	b.n	80027a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800272a:	d13f      	bne.n	80027ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002730:	e03c      	b.n	80027ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273a:	d121      	bne.n	8002780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d836      	bhi.n	80027b0 <DMA_CheckFifoParam+0xd8>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <DMA_CheckFifoParam+0x70>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	08002759 	.word	0x08002759
 800274c:	0800275f 	.word	0x0800275f
 8002750:	08002759 	.word	0x08002759
 8002754:	08002771 	.word	0x08002771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e02f      	b.n	80027be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d024      	beq.n	80027b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276e:	e021      	b.n	80027b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002778:	d11e      	bne.n	80027b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800277e:	e01b      	b.n	80027b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <DMA_CheckFifoParam+0xb4>
 8002786:	2b03      	cmp	r3, #3
 8002788:	d003      	beq.n	8002792 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800278a:	e018      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      break;
 8002790:	e015      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      break;
 80027a2:	e00b      	b.n	80027bc <DMA_CheckFifoParam+0xe4>
      break;
 80027a4:	bf00      	nop
 80027a6:	e00a      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;
 80027a8:	bf00      	nop
 80027aa:	e008      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;
 80027ac:	bf00      	nop
 80027ae:	e006      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;
 80027b0:	bf00      	nop
 80027b2:	e004      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;
 80027b4:	bf00      	nop
 80027b6:	e002      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;   
 80027b8:	bf00      	nop
 80027ba:	e000      	b.n	80027be <DMA_CheckFifoParam+0xe6>
      break;
 80027bc:	bf00      	nop
    }
  } 
  
  return status; 
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e165      	b.n	8002ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8154 	bne.w	8002aae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d00b      	beq.n	8002826 <HAL_GPIO_Init+0x5a>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281a:	2b11      	cmp	r3, #17
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b12      	cmp	r3, #18
 8002824:	d130      	bne.n	8002888 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 0201 	and.w	r2, r3, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0xfc>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b12      	cmp	r3, #18
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80ae 	beq.w	8002aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_GPIO_Init+0x2fc>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_GPIO_Init+0x2fc>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b59      	ldr	r3, [pc, #356]	; (8002ac8 <HAL_GPIO_Init+0x2fc>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_GPIO_Init+0x300>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4e      	ldr	r2, [pc, #312]	; (8002ad0 <HAL_GPIO_Init+0x304>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d025      	beq.n	80029e6 <HAL_GPIO_Init+0x21a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4d      	ldr	r2, [pc, #308]	; (8002ad4 <HAL_GPIO_Init+0x308>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01f      	beq.n	80029e2 <HAL_GPIO_Init+0x216>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <HAL_GPIO_Init+0x30c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d019      	beq.n	80029de <HAL_GPIO_Init+0x212>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_GPIO_Init+0x310>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0x20e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4a      	ldr	r2, [pc, #296]	; (8002ae0 <HAL_GPIO_Init+0x314>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00d      	beq.n	80029d6 <HAL_GPIO_Init+0x20a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x318>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_GPIO_Init+0x206>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_GPIO_Init+0x202>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00c      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00a      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e008      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x21c>
 80029e6:	2300      	movs	r3, #0
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f002 0203 	and.w	r2, r2, #3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f8:	4934      	ldr	r1, [pc, #208]	; (8002acc <HAL_GPIO_Init+0x300>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2a:	4a30      	ldr	r2, [pc, #192]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa8:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_GPIO_Init+0x320>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	f67f ae96 	bls.w	80027e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3724      	adds	r7, #36	; 0x24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	401a      	ands	r2, r3
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d104      	bne.n	8002b46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b3c:	887b      	ldrh	r3, [r7, #2]
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e11f      	b.n	8002daa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fd ffac 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2224      	movs	r2, #36	; 0x24
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f001 fccc 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8002bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	; (8002db4 <HAL_I2C_Init+0x25c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d807      	bhi.n	8002bdc <HAL_I2C_Init+0x84>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a7a      	ldr	r2, [pc, #488]	; (8002db8 <HAL_I2C_Init+0x260>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bf94      	ite	ls
 8002bd4:	2301      	movls	r3, #1
 8002bd6:	2300      	movhi	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e006      	b.n	8002bea <HAL_I2C_Init+0x92>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_I2C_Init+0x264>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	bf94      	ite	ls
 8002be4:	2301      	movls	r3, #1
 8002be6:	2300      	movhi	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0db      	b.n	8002daa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a72      	ldr	r2, [pc, #456]	; (8002dc0 <HAL_I2C_Init+0x268>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a64      	ldr	r2, [pc, #400]	; (8002db4 <HAL_I2C_Init+0x25c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d802      	bhi.n	8002c2c <HAL_I2C_Init+0xd4>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	e009      	b.n	8002c40 <HAL_I2C_Init+0xe8>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	4a63      	ldr	r2, [pc, #396]	; (8002dc4 <HAL_I2C_Init+0x26c>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	3301      	adds	r3, #1
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4956      	ldr	r1, [pc, #344]	; (8002db4 <HAL_I2C_Init+0x25c>)
 8002c5c:	428b      	cmp	r3, r1
 8002c5e:	d80d      	bhi.n	8002c7c <HAL_I2C_Init+0x124>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e59      	subs	r1, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	bf38      	it	cc
 8002c78:	2304      	movcc	r3, #4
 8002c7a:	e04f      	b.n	8002d1c <HAL_I2C_Init+0x1c4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_I2C_Init+0x150>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	440b      	add	r3, r1
 8002c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e012      	b.n	8002cce <HAL_I2C_Init+0x176>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Init+0x17e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e022      	b.n	8002d1c <HAL_I2C_Init+0x1c4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10e      	bne.n	8002cfc <HAL_I2C_Init+0x1a4>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e58      	subs	r0, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	440b      	add	r3, r1
 8002cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Init+0x1c4>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	6809      	ldr	r1, [r1, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6911      	ldr	r1, [r2, #16]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	000186a0 	.word	0x000186a0
 8002db8:	001e847f 	.word	0x001e847f
 8002dbc:	003d08ff 	.word	0x003d08ff
 8002dc0:	431bde83 	.word	0x431bde83
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7fe fc8e 	bl	80016fc <HAL_GetTick>
 8002de0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 80e0 	bne.w	8002fb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4970      	ldr	r1, [pc, #448]	; (8002fbc <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa92 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0d3      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0cc      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	893a      	ldrh	r2, [r7, #8]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f9ca 	bl	8003220 <I2C_MasterRequestWrite>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08d      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eac:	e066      	b.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb0c 	bl	80034d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	781a      	ldrb	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fafc 	bl	8003552 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01a      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d194      	bne.n	8002eae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7fe fb92 	bl	80016fc <HAL_GetTick>
 8002fd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 8110 	bne.w	800320c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4988      	ldr	r1, [pc, #544]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f994 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e103      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x50>
 8003010:	2302      	movs	r3, #2
 8003012:	e0fc      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d007      	beq.n	800303a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2224      	movs	r2, #36	; 0x24
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_I2C_IsDeviceReady+0x258>)
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f952 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0b6      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030ae:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fb24 	bl	80016fc <HAL_GetTick>
 80030b4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030e4:	e025      	b.n	8003132 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fb09 	bl	80016fc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <HAL_I2C_IsDeviceReady+0x138>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	22a0      	movs	r2, #160	; 0xa0
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2ba0      	cmp	r3, #160	; 0xa0
 800313c:	d005      	beq.n	800314a <HAL_I2C_IsDeviceReady+0x186>
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_I2C_IsDeviceReady+0x186>
 8003144:	7dbb      	ldrb	r3, [r7, #22]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0cd      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b02      	cmp	r3, #2
 800315e:	d129      	bne.n	80031b4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2319      	movs	r3, #25
 800318c:	2201      	movs	r2, #1
 800318e:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8c7 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e036      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e02c      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031cc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2319      	movs	r3, #25
 80031d4:	2201      	movs	r2, #1
 80031d6:	4910      	ldr	r1, [pc, #64]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8a3 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e012      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	f4ff af33 	bcc.w	800305e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	00100002 	.word	0x00100002
 800321c:	ffff0000 	.word	0xffff0000

08003220 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d006      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d003      	beq.n	800324a <I2C_MasterRequestWrite+0x2a>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003248:	d108      	bne.n	800325c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e00b      	b.n	8003274 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	2b12      	cmp	r3, #18
 8003262:	d107      	bne.n	8003274 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f84f 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e035      	b.n	8003312 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ae:	d108      	bne.n	80032c2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032be:	611a      	str	r2, [r3, #16]
 80032c0:	e01b      	b.n	80032fa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	11db      	asrs	r3, r3, #7
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f003 0306 	and.w	r3, r3, #6
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f063 030f 	orn	r3, r3, #15
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	490f      	ldr	r1, [pc, #60]	; (800331c <I2C_MasterRequestWrite+0xfc>)
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f876 	bl	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e010      	b.n	8003312 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032f0:	897b      	ldrh	r3, [r7, #10]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <I2C_MasterRequestWrite+0x100>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f866 	bl	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00010008 	.word	0x00010008
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003334:	e025      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d021      	beq.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe f9dd 	bl	80016fc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e023      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10d      	bne.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	e00c      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	43da      	mvns	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0b6      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e0:	e051      	b.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f0:	d123      	bne.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003400:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e046      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d021      	beq.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fe f95b 	bl	80016fc <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d116      	bne.n	8003486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e020      	b.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d10c      	bne.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	43da      	mvns	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4013      	ands	r3, r2
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e00b      	b.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	43da      	mvns	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d18d      	bne.n	80033e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034dc:	e02d      	b.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f878 	bl	80035d4 <I2C_IsAcknowledgeFailed>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e02d      	b.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d021      	beq.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe f901 	bl	80016fc <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d116      	bne.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e007      	b.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d1ca      	bne.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800355e:	e02d      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f837 	bl	80035d4 <I2C_IsAcknowledgeFailed>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e02d      	b.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d021      	beq.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7fe f8c0 	bl	80016fc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d1ca      	bne.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d11b      	bne.n	8003624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f043 0204 	orr.w	r2, r3, #4
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e154      	b.n	80038f0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a98      	ldr	r2, [pc, #608]	; (80038c0 <HAL_I2S_Init+0x28c>)
 800365e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fd fab1 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800367c:	f023 030f 	bic.w	r3, r3, #15
 8003680:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2202      	movs	r2, #2
 8003688:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d06f      	beq.n	8003772 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800369a:	2310      	movs	r3, #16
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e001      	b.n	80036a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d802      	bhi.n	80036b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a83      	ldr	r2, [pc, #524]	; (80038c4 <HAL_I2S_Init+0x290>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_I2S_Init+0x92>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a81      	ldr	r2, [pc, #516]	; (80038c8 <HAL_I2S_Init+0x294>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d104      	bne.n	80036d0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f001 f9fa 	bl	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	e003      	b.n	80036d8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80036d0:	2002      	movs	r0, #2
 80036d2:	f001 f9f5 	bl	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 80036d6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d125      	bne.n	800372e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	3305      	adds	r3, #5
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e01f      	b.n	800374c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fbb2 f2f3 	udiv	r2, r2, r3
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	3305      	adds	r3, #5
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e00e      	b.n	800374c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fbb2 f2f3 	udiv	r2, r2, r3
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	3305      	adds	r3, #5
 800374a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4a5f      	ldr	r2, [pc, #380]	; (80038cc <HAL_I2S_Init+0x298>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	e003      	b.n	800377a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003772:	2302      	movs	r3, #2
 8003774:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d902      	bls.n	8003786 <HAL_I2S_Init+0x152>
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2bff      	cmp	r3, #255	; 0xff
 8003784:	d907      	bls.n	8003796 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0210 	orr.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0ac      	b.n	80038f0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6851      	ldr	r1, [r2, #4]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6992      	ldr	r2, [r2, #24]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b30      	cmp	r3, #48	; 0x30
 80037e0:	d003      	beq.n	80037ea <HAL_I2S_Init+0x1b6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2bb0      	cmp	r3, #176	; 0xb0
 80037e8:	d107      	bne.n	80037fa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037f8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d16e      	bne.n	80038e0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a32      	ldr	r2, [pc, #200]	; (80038d0 <HAL_I2S_Init+0x29c>)
 8003806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_I2S_Init+0x290>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_I2S_Init+0x1e2>
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_I2S_Init+0x2a0>)
 8003814:	e001      	b.n	800381a <HAL_I2S_Init+0x1e6>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	4928      	ldr	r1, [pc, #160]	; (80038c4 <HAL_I2S_Init+0x290>)
 8003822:	428a      	cmp	r2, r1
 8003824:	d101      	bne.n	800382a <HAL_I2S_Init+0x1f6>
 8003826:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_I2S_Init+0x2a0>)
 8003828:	e001      	b.n	800382e <HAL_I2S_Init+0x1fa>
 800382a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800382e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003832:	f023 030f 	bic.w	r3, r3, #15
 8003836:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_I2S_Init+0x290>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d101      	bne.n	8003846 <HAL_I2S_Init+0x212>
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_I2S_Init+0x2a0>)
 8003844:	e001      	b.n	800384a <HAL_I2S_Init+0x216>
 8003846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384a:	2202      	movs	r2, #2
 800384c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_I2S_Init+0x290>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_I2S_Init+0x228>
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_I2S_Init+0x2a0>)
 800385a:	e001      	b.n	8003860 <HAL_I2S_Init+0x22c>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d003      	beq.n	8003876 <HAL_I2S_Init+0x242>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e001      	b.n	8003882 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	b299      	uxth	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003898:	4303      	orrs	r3, r0
 800389a:	b29b      	uxth	r3, r3
 800389c:	430b      	orrs	r3, r1
 800389e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80038a0:	4313      	orrs	r3, r2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	897b      	ldrh	r3, [r7, #10]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ae:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_I2S_Init+0x290>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10e      	bne.n	80038d8 <HAL_I2S_Init+0x2a4>
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_I2S_Init+0x2a0>)
 80038bc:	e00e      	b.n	80038dc <HAL_I2S_Init+0x2a8>
 80038be:	bf00      	nop
 80038c0:	08003bfd 	.word	0x08003bfd
 80038c4:	40003800 	.word	0x40003800
 80038c8:	40003c00 	.word	0x40003c00
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	08003d11 	.word	0x08003d11
 80038d4:	40003400 	.word	0x40003400
 80038d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038dc:	897a      	ldrh	r2, [r7, #10]
 80038de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_I2S_Transmit_DMA+0x1a>
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e08e      	b.n	8003a34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_I2S_Transmit_DMA+0x2e>
 8003922:	2302      	movs	r3, #2
 8003924:	e086      	b.n	8003a34 <HAL_I2S_Transmit_DMA+0x13c>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d005      	beq.n	8003946 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
 8003944:	e076      	b.n	8003a34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2203      	movs	r2, #3
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d002      	beq.n	8003972 <HAL_I2S_Transmit_DMA+0x7a>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d10a      	bne.n	8003988 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003986:	e005      	b.n	8003994 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <HAL_I2S_Transmit_DMA+0x144>)
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <HAL_I2S_Transmit_DMA+0x148>)
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	4a26      	ldr	r2, [pc, #152]	; (8003a44 <HAL_I2S_Transmit_DMA+0x14c>)
 80039aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039b4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039bc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80039c4:	f7fe fc20 	bl	8002208 <HAL_DMA_Start_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00f      	beq.n	80039ee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f043 0208 	orr.w	r2, r3, #8
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e022      	b.n	8003a34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a0a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0202 	orr.w	r2, r2, #2
 8003a28:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	08003adb 	.word	0x08003adb
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003af7 	.word	0x08003af7

08003a48 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10e      	bne.n	8003acc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0202 	bic.w	r2, r2, #2
 8003abc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ffc5 	bl	8003a5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ffad 	bl	8003a48 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0203 	bic.w	r2, r2, #3
 8003b12:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f043 0208 	orr.w	r2, r3, #8
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ffa5 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	881a      	ldrh	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c9a      	adds	r2, r3, #2
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff63 	bl	8003a5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10e      	bne.n	8003bf4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff3e 	bl	8003a70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d13a      	bne.n	8003c8e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d109      	bne.n	8003c36 <I2S_IRQHandler+0x3a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d102      	bne.n	8003c36 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff ffb4 	bl	8003b9e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d126      	bne.n	8003c8e <I2S_IRQHandler+0x92>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d11f      	bne.n	8003c8e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	f043 0202 	orr.w	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fefb 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d136      	bne.n	8003d08 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d109      	bne.n	8003cb8 <I2S_IRQHandler+0xbc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d102      	bne.n	8003cb8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff45 	bl	8003b42 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d122      	bne.n	8003d08 <I2S_IRQHandler+0x10c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d11b      	bne.n	8003d08 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cde:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff febe 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4aa2      	ldr	r2, [pc, #648]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d2a:	4ba2      	ldr	r3, [pc, #648]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a9b      	ldr	r2, [pc, #620]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d48:	4b9a      	ldr	r3, [pc, #616]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d4a:	e001      	b.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5c:	d004      	beq.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 8099 	bne.w	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d107      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f925 	bl	8003fcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9c8 	bl	800412c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d13a      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d035      	beq.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7e      	ldr	r2, [pc, #504]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dba:	4b7e      	ldr	r3, [pc, #504]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dbc:	e001      	b.n	8003dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4979      	ldr	r1, [pc, #484]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dca:	428b      	cmp	r3, r1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003dce:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd0:	e001      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fe34 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	f040 80be 	bne.w	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80b8 	beq.w	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a59      	ldr	r2, [pc, #356]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e4e:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e50:	e001      	b.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4954      	ldr	r1, [pc, #336]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e62:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e64:	e001      	b.n	8003e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f043 0204 	orr.w	r2, r3, #4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fdf6 	bl	8003a84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e98:	e084      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d107      	bne.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8be 	bl	8004030 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8fd 	bl	80040c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d12f      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02a      	beq.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2e      	ldr	r2, [pc, #184]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003efe:	e001      	b.n	8003f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4929      	ldr	r1, [pc, #164]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f12:	e001      	b.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fda6 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d131      	bne.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02c      	beq.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f58:	e001      	b.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4912      	ldr	r1, [pc, #72]	; (8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f66:	428b      	cmp	r3, r1
 8003f68:	d101      	bne.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f6c:	e001      	b.n	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fd71 	bl	8003a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa2:	e000      	b.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa4:	bf00      	nop
}
 8003fa6:	bf00      	nop
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40003800 	.word	0x40003800
 8003fb4:	40003400 	.word	0x40003400

08003fb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c99      	adds	r1, r3, #2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6251      	str	r1, [r2, #36]	; 0x24
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d113      	bne.n	8004026 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800400c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffc9 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c99      	adds	r1, r3, #2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6251      	str	r1, [r2, #36]	; 0x24
 8004042:	8819      	ldrh	r1, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <I2SEx_TxISR_I2SExt+0x22>
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004050:	e001      	b.n	8004056 <I2SEx_TxISR_I2SExt+0x26>
 8004052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004056:	460a      	mov	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d121      	bne.n	80040b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <I2SEx_TxISR_I2SExt+0x50>
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 800407e:	e001      	b.n	8004084 <I2SEx_TxISR_I2SExt+0x54>
 8004080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	490d      	ldr	r1, [pc, #52]	; (80040c0 <I2SEx_TxISR_I2SExt+0x90>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d101      	bne.n	8004094 <I2SEx_TxISR_I2SExt+0x64>
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004092:	e001      	b.n	8004098 <I2SEx_TxISR_I2SExt+0x68>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800409c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff81 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40003800 	.word	0x40003800
 80040c4:	40003400 	.word	0x40003400

080040c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68d8      	ldr	r0, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	1c99      	adds	r1, r3, #2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040e0:	b282      	uxth	r2, r0
 80040e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d113      	bne.n	8004124 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800410a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff4a 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004124:	bf00      	nop
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <I2SEx_RxISR_I2SExt+0x16>
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004140:	e001      	b.n	8004146 <I2SEx_RxISR_I2SExt+0x1a>
 8004142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004146:	68d8      	ldr	r0, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	1c99      	adds	r1, r3, #2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004152:	b282      	uxth	r2, r0
 8004154:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_RxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_RxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	; (80041bc <I2SEx_RxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_RxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <I2SEx_RxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_RxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff03 	bl	8003fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd fa22 	bl	80016fc <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fa1e 	bl	80016fc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4601      	mov	r1, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	fa21 f303 	lsr.w	r3, r1, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd f982 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	08006128 	.word	0x08006128
 8004388:	2000eba0 	.word	0x2000eba0
 800438c:	2000eba4 	.word	0x2000eba4

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	2300      	movs	r3, #0
 80043a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d007      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x32>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d008      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x38>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 80b4 	bne.w	8004524 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b5e      	ldr	r3, [pc, #376]	; (8004538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043be:	60bb      	str	r3, [r7, #8]
       break;
 80043c0:	e0b3      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c2:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043c4:	60bb      	str	r3, [r7, #8]
      break;
 80043c6:	e0b0      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c8:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d2:	4b58      	ldr	r3, [pc, #352]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d04a      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043de:	4b55      	ldr	r3, [pc, #340]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	099b      	lsrs	r3, r3, #6
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	ea03 0501 	and.w	r5, r3, r1
 80043f4:	ea04 0602 	and.w	r6, r4, r2
 80043f8:	4629      	mov	r1, r5
 80043fa:	4632      	mov	r2, r6
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	0154      	lsls	r4, r2, #5
 8004406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800440a:	014b      	lsls	r3, r1, #5
 800440c:	4619      	mov	r1, r3
 800440e:	4622      	mov	r2, r4
 8004410:	1b49      	subs	r1, r1, r5
 8004412:	eb62 0206 	sbc.w	r2, r2, r6
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	0194      	lsls	r4, r2, #6
 8004420:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004424:	018b      	lsls	r3, r1, #6
 8004426:	1a5b      	subs	r3, r3, r1
 8004428:	eb64 0402 	sbc.w	r4, r4, r2
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	00e2      	lsls	r2, r4, #3
 8004436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800443a:	00d9      	lsls	r1, r3, #3
 800443c:	460b      	mov	r3, r1
 800443e:	4614      	mov	r4, r2
 8004440:	195b      	adds	r3, r3, r5
 8004442:	eb44 0406 	adc.w	r4, r4, r6
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	0262      	lsls	r2, r4, #9
 8004450:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004454:	0259      	lsls	r1, r3, #9
 8004456:	460b      	mov	r3, r1
 8004458:	4614      	mov	r4, r2
 800445a:	4618      	mov	r0, r3
 800445c:	4621      	mov	r1, r4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	461a      	mov	r2, r3
 8004466:	4623      	mov	r3, r4
 8004468:	f7fb fed6 	bl	8000218 <__aeabi_uldivmod>
 800446c:	4603      	mov	r3, r0
 800446e:	460c      	mov	r4, r1
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e049      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	f04f 0400 	mov.w	r4, #0
 800447e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	ea03 0501 	and.w	r5, r3, r1
 800448a:	ea04 0602 	and.w	r6, r4, r2
 800448e:	4629      	mov	r1, r5
 8004490:	4632      	mov	r2, r6
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	0154      	lsls	r4, r2, #5
 800449c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044a0:	014b      	lsls	r3, r1, #5
 80044a2:	4619      	mov	r1, r3
 80044a4:	4622      	mov	r2, r4
 80044a6:	1b49      	subs	r1, r1, r5
 80044a8:	eb62 0206 	sbc.w	r2, r2, r6
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	0194      	lsls	r4, r2, #6
 80044b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044ba:	018b      	lsls	r3, r1, #6
 80044bc:	1a5b      	subs	r3, r3, r1
 80044be:	eb64 0402 	sbc.w	r4, r4, r2
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	00e2      	lsls	r2, r4, #3
 80044cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044d0:	00d9      	lsls	r1, r3, #3
 80044d2:	460b      	mov	r3, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	195b      	adds	r3, r3, r5
 80044d8:	eb44 0406 	adc.w	r4, r4, r6
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	02a2      	lsls	r2, r4, #10
 80044e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044ea:	0299      	lsls	r1, r3, #10
 80044ec:	460b      	mov	r3, r1
 80044ee:	4614      	mov	r4, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	4621      	mov	r1, r4
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f04f 0400 	mov.w	r4, #0
 80044fa:	461a      	mov	r2, r3
 80044fc:	4623      	mov	r3, r4
 80044fe:	f7fb fe8b 	bl	8000218 <__aeabi_uldivmod>
 8004502:	4603      	mov	r3, r0
 8004504:	460c      	mov	r4, r1
 8004506:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	60bb      	str	r3, [r7, #8]
      break;
 8004522:	e002      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004526:	60bb      	str	r3, [r7, #8]
      break;
 8004528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452a:	68bb      	ldr	r3, [r7, #8]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	00f42400 	.word	0x00f42400
 800453c:	007a1200 	.word	0x007a1200

08004540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCC_GetHCLKFreq+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000eba0 	.word	0x2000eba0

08004558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800455c:	f7ff fff0 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004560:	4601      	mov	r1, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0a9b      	lsrs	r3, r3, #10
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4a03      	ldr	r2, [pc, #12]	; (800457c <HAL_RCC_GetPCLK1Freq+0x24>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	08006138 	.word	0x08006138

08004580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004584:	f7ff ffdc 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004588:	4601      	mov	r1, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0b5b      	lsrs	r3, r3, #13
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4a03      	ldr	r2, [pc, #12]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	08006138 	.word	0x08006138

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80045cc:	4b7a      	ldr	r3, [pc, #488]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4977      	ldr	r1, [pc, #476]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80045fa:	4b6f      	ldr	r3, [pc, #444]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004600:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	496b      	ldr	r1, [pc, #428]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004618:	2301      	movs	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d022      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004628:	4b63      	ldr	r3, [pc, #396]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800462a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	4960      	ldr	r1, [pc, #384]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004654:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	3b01      	subs	r3, #1
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4954      	ldr	r1, [pc, #336]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d022      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800467a:	4b4f      	ldr	r3, [pc, #316]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004688:	494b      	ldr	r1, [pc, #300]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80046a6:	4b44      	ldr	r3, [pc, #272]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	493f      	ldr	r1, [pc, #252]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 808a 	beq.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b39      	ldr	r3, [pc, #228]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	4a38      	ldr	r2, [pc, #224]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6413      	str	r3, [r2, #64]	; 0x40
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a33      	ldr	r2, [pc, #204]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80046f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046f6:	f7fd f801 	bl	80016fc <HAL_GetTick>
 80046fa:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046fe:	f7fc fffd 	bl	80016fc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e1d1      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800471c:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004724:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d02f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d028      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800473a:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d114      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc ffcb 	bl	80016fc <HAL_GetTick>
 8004766:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc ffc7 	bl	80016fc <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e199      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ee      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004798:	d114      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ae:	4902      	ldr	r1, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	608b      	str	r3, [r1, #8]
 80047b4:	e00c      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
 80047c0:	42470e40 	.word	0x42470e40
 80047c4:	4b89      	ldr	r3, [pc, #548]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a88      	ldr	r2, [pc, #544]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ce:	6093      	str	r3, [r2, #8]
 80047d0:	4b86      	ldr	r3, [pc, #536]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047dc:	4983      	ldr	r1, [pc, #524]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80047f4:	4b7e      	ldr	r3, [pc, #504]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80047f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004804:	4b79      	ldr	r3, [pc, #484]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	4976      	ldr	r1, [pc, #472]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d011      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004826:	4b71      	ldr	r3, [pc, #452]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	496d      	ldr	r1, [pc, #436]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004844:	d101      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004846:	2301      	movs	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004856:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	4961      	ldr	r1, [pc, #388]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d004      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	f040 80c6 	bne.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800487c:	4b5d      	ldr	r3, [pc, #372]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004882:	f7fc ff3b 	bl	80016fc <HAL_GetTick>
 8004886:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004888:	e008      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800488a:	f7fc ff37 	bl	80016fc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e10b      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f0      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80048a8:	4a53      	ldr	r2, [pc, #332]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d019      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ec:	d00e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d115      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800490a:	d110      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	071b      	lsls	r3, r3, #28
 8004926:	4931      	ldr	r1, [pc, #196]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d026      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d122      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495c:	0e1b      	lsrs	r3, r3, #24
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	431a      	orrs	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	071b      	lsls	r3, r3, #28
 800497c:	491b      	ldr	r1, [pc, #108]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498a:	f023 021f 	bic.w	r2, r3, #31
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	3b01      	subs	r3, #1
 8004994:	4915      	ldr	r1, [pc, #84]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d010      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	490a      	ldr	r1, [pc, #40]	; (80049ec <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d0:	f7fc fe94 	bl	80016fc <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d6:	e011      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049d8:	f7fc fe90 	bl	80016fc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d90a      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e064      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	424711e0 	.word	0x424711e0
 80049f4:	42470068 	.word	0x42470068
 80049f8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fc:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0e7      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a14:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	4926      	ldr	r1, [pc, #152]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	491d      	ldr	r1, [pc, #116]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	4915      	ldr	r1, [pc, #84]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	490c      	ldr	r1, [pc, #48]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	4904      	ldr	r1, [pc, #16]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	f000 8098 	beq.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004ae4:	e12d      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004ae6:	4b9a      	ldr	r3, [pc, #616]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004af0:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af8:	d00c      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afe:	d802      	bhi.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004b04:	e082      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b0a:	d047      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004b0c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004b10:	d06f      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8004b12:	e07b      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b14:	4b8f      	ldr	r3, [pc, #572]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b16:	617b      	str	r3, [r7, #20]
          break;
 8004b18:	e07b      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004b1a:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b28:	d109      	bne.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b2a:	4b89      	ldr	r3, [pc, #548]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b34:	4a87      	ldr	r2, [pc, #540]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	e019      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b3e:	4b84      	ldr	r3, [pc, #528]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4a:	d109      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b4c:	4b80      	ldr	r3, [pc, #512]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b56:	4a80      	ldr	r2, [pc, #512]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b60:	4b7b      	ldr	r3, [pc, #492]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b6a:	4a7c      	ldr	r2, [pc, #496]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b72:	4b77      	ldr	r3, [pc, #476]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b86:	4b72      	ldr	r3, [pc, #456]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8c:	0f1b      	lsrs	r3, r3, #28
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
          break;
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba8:	d108      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004baa:	4b69      	ldr	r3, [pc, #420]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb2:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	e007      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bbc:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc4:	4a65      	ldr	r2, [pc, #404]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004bcc:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004bde:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	0f1b      	lsrs	r3, r3, #28
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	617b      	str	r3, [r7, #20]
          break;
 8004bf0:	e00f      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8004c00:	4b55      	ldr	r3, [pc, #340]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c02:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004c06:	4b55      	ldr	r3, [pc, #340]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004c08:	617b      	str	r3, [r7, #20]
          break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
          break;
 8004c10:	bf00      	nop
        }
      }
      break;
 8004c12:	e096      	b.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004c14:	4b4e      	ldr	r3, [pc, #312]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004c1e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c26:	d00c      	beq.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2c:	d802      	bhi.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004c32:	e082      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c38:	d047      	beq.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004c3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c3e:	d06f      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004c40:	e07b      	b.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c42:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c44:	617b      	str	r3, [r7, #20]
          break;
 8004c46:	e07b      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c58:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c62:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e019      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c78:	d109      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c7a:	4b35      	ldr	r3, [pc, #212]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	4a34      	ldr	r2, [pc, #208]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c8e:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cba:	0f1b      	lsrs	r3, r3, #28
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	617b      	str	r3, [r7, #20]
          break;
 8004cc8:	e03a      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cca:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd6:	d108      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e007      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0f1b      	lsrs	r3, r3, #28
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
          break;
 8004d1e:	e00f      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d30:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004d32:	e005      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d36:	617b      	str	r3, [r7, #20]
          break;
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
          break;
 8004d3e:	bf00      	nop
        }
      }
      break;
 8004d40:	bf00      	nop
    }
  }
  return frequency;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00bb8000 	.word	0x00bb8000
 8004d58:	007a1200 	.word	0x007a1200
 8004d5c:	00f42400 	.word	0x00f42400

08004d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d075      	beq.n	8004e64 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d78:	4ba2      	ldr	r3, [pc, #648]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d00c      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d84:	4b9f      	ldr	r3, [pc, #636]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d112      	bne.n	8004db6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d90:	4b9c      	ldr	r3, [pc, #624]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d10b      	bne.n	8004db6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9e:	4b99      	ldr	r3, [pc, #612]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d05b      	beq.n	8004e62 <HAL_RCC_OscConfig+0x102>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d157      	bne.n	8004e62 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e20b      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x6e>
 8004dc0:	4b90      	ldr	r3, [pc, #576]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a8f      	ldr	r2, [pc, #572]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e01d      	b.n	8004e0a <HAL_RCC_OscConfig+0xaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd6:	d10c      	bne.n	8004df2 <HAL_RCC_OscConfig+0x92>
 8004dd8:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a89      	ldr	r2, [pc, #548]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b87      	ldr	r3, [pc, #540]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a86      	ldr	r2, [pc, #536]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e00b      	b.n	8004e0a <HAL_RCC_OscConfig+0xaa>
 8004df2:	4b84      	ldr	r3, [pc, #528]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a83      	ldr	r2, [pc, #524]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a80      	ldr	r2, [pc, #512]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fc fc73 	bl	80016fc <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e1a:	f7fc fc6f 	bl	80016fc <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1d0      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2c:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0xba>
 8004e38:	e014      	b.n	8004e64 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fc5f 	bl	80016fc <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e42:	f7fc fc5b 	bl	80016fc <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b64      	cmp	r3, #100	; 0x64
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e1bc      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e54:	4b6b      	ldr	r3, [pc, #428]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0xe2>
 8004e60:	e000      	b.n	8004e64 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d063      	beq.n	8004f38 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e70:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7c:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d11c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e88:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d116      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e94:	4b5b      	ldr	r3, [pc, #364]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_OscConfig+0x14c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e190      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b55      	ldr	r3, [pc, #340]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4952      	ldr	r1, [pc, #328]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec0:	e03a      	b.n	8004f38 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eca:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <HAL_RCC_OscConfig+0x2a8>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fc fc14 	bl	80016fc <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fc fc10 	bl	80016fc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e171      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	4b46      	ldr	r3, [pc, #280]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	4b43      	ldr	r3, [pc, #268]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	493f      	ldr	r1, [pc, #252]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]
 8004f0a:	e015      	b.n	8004f38 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0c:	4b3e      	ldr	r3, [pc, #248]	; (8005008 <HAL_RCC_OscConfig+0x2a8>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fc fbf3 	bl	80016fc <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fc fbef 	bl	80016fc <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e150      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2c:	4b35      	ldr	r3, [pc, #212]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d030      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d016      	beq.n	8004f7a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fc fbd3 	bl	80016fc <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fc fbcf 	bl	80016fc <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e130      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1fa>
 8004f78:	e015      	b.n	8004fa6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f80:	f7fc fbbc 	bl	80016fc <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f88:	f7fc fbb8 	bl	80016fc <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e119      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9a:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 809f 	beq.w	80050f2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	4a0d      	ldr	r2, [pc, #52]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_RCC_OscConfig+0x2a4>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_OscConfig+0x2b0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d120      	bne.n	8005032 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_RCC_OscConfig+0x2b0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a06      	ldr	r2, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x2b0>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fb7e 	bl	80016fc <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005002:	e010      	b.n	8005026 <HAL_RCC_OscConfig+0x2c6>
 8005004:	40023800 	.word	0x40023800
 8005008:	42470000 	.word	0x42470000
 800500c:	42470e80 	.word	0x42470e80
 8005010:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fc fb72 	bl	80016fc <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e0d3      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <HAL_RCC_OscConfig+0x478>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d106      	bne.n	8005048 <HAL_RCC_OscConfig+0x2e8>
 800503a:	4b68      	ldr	r3, [pc, #416]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a67      	ldr	r2, [pc, #412]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
 8005046:	e01c      	b.n	8005082 <HAL_RCC_OscConfig+0x322>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b05      	cmp	r3, #5
 800504e:	d10c      	bne.n	800506a <HAL_RCC_OscConfig+0x30a>
 8005050:	4b62      	ldr	r3, [pc, #392]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a61      	ldr	r2, [pc, #388]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005056:	f043 0304 	orr.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
 800505c:	4b5f      	ldr	r3, [pc, #380]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a5e      	ldr	r2, [pc, #376]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e00b      	b.n	8005082 <HAL_RCC_OscConfig+0x322>
 800506a:	4b5c      	ldr	r3, [pc, #368]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	4a5b      	ldr	r2, [pc, #364]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6713      	str	r3, [r2, #112]	; 0x70
 8005076:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a58      	ldr	r2, [pc, #352]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 800507c:	f023 0304 	bic.w	r3, r3, #4
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fc fb37 	bl	80016fc <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc fb33 	bl	80016fc <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e092      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a8:	4b4c      	ldr	r3, [pc, #304]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ee      	beq.n	8005092 <HAL_RCC_OscConfig+0x332>
 80050b4:	e014      	b.n	80050e0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fc fb21 	bl	80016fc <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fb1d 	bl	80016fc <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e07c      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ee      	bne.n	80050be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d105      	bne.n	80050f2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e6:	4b3d      	ldr	r3, [pc, #244]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a3c      	ldr	r2, [pc, #240]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80050ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d068      	beq.n	80051cc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d060      	beq.n	80051c8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d145      	bne.n	800519a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b34      	ldr	r3, [pc, #208]	; (80051e0 <HAL_RCC_OscConfig+0x480>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fc faf2 	bl	80016fc <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800511c:	f7fc faee 	bl	80016fc <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	071b      	lsls	r3, r3, #28
 8005166:	491d      	ldr	r1, [pc, #116]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800516c:	4b1c      	ldr	r3, [pc, #112]	; (80051e0 <HAL_RCC_OscConfig+0x480>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fc fac3 	bl	80016fc <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517a:	f7fc fabf 	bl	80016fc <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e020      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x41a>
 8005198:	e018      	b.n	80051cc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_RCC_OscConfig+0x480>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fc faac 	bl	80016fc <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fc faa8 	bl	80016fc <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e009      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCC_OscConfig+0x47c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x448>
 80051c6:	e001      	b.n	80051cc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40007000 	.word	0x40007000
 80051dc:	40023800 	.word	0x40023800
 80051e0:	42470060 	.word	0x42470060

080051e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e03f      	b.n	8005276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc f962 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2224      	movs	r2, #36	; 0x24
 8005214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb8b 	bl	8005944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800523c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800525c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d166      	bne.n	8005368 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_Receive_DMA+0x26>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e05f      	b.n	800536a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Receive_DMA+0x38>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e058      	b.n	800536a <HAL_UART_Receive_DMA+0xea>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2222      	movs	r2, #34	; 0x22
 80052d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	4a25      	ldr	r2, [pc, #148]	; (8005374 <HAL_UART_Receive_DMA+0xf4>)
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	4a24      	ldr	r2, [pc, #144]	; (8005378 <HAL_UART_Receive_DMA+0xf8>)
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	4a23      	ldr	r2, [pc, #140]	; (800537c <HAL_UART_Receive_DMA+0xfc>)
 80052f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	2200      	movs	r2, #0
 80052f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	f7fc ff79 	bl	8002208 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005342:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005362:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	080055bd 	.word	0x080055bd
 8005378:	08005625 	.word	0x08005625
 800537c:	08005641 	.word	0x08005641

08005380 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_UART_IRQHandler+0x52>
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa38 	bl	8005840 <UART_Receive_IT>
      return;
 80053d0:	e0d1      	b.n	8005576 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80b0 	beq.w	800553a <HAL_UART_IRQHandler+0x1ba>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <HAL_UART_IRQHandler+0x70>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80a5 	beq.w	800553a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_UART_IRQHandler+0x90>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	f043 0201 	orr.w	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_UART_IRQHandler+0xb0>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	f043 0202 	orr.w	r2, r3, #2
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_UART_IRQHandler+0xd0>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00f      	beq.n	800547a <HAL_UART_IRQHandler+0xfa>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_UART_IRQHandler+0xee>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	f043 0208 	orr.w	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d078      	beq.n	8005574 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_UART_IRQHandler+0x11c>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9d2 	bl	8005840 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_UART_IRQHandler+0x144>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d031      	beq.n	8005528 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f91b 	bl	8005700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d123      	bne.n	8005520 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_UART_IRQHandler+0x1fc>)
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fc fedb 	bl	80022b8 <HAL_DMA_Abort_IT>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d016      	beq.n	8005536 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005512:	4610      	mov	r0, r2
 8005514:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005516:	e00e      	b.n	8005536 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f845 	bl	80055a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551e:	e00a      	b.n	8005536 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f841 	bl	80055a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005526:	e006      	b.n	8005536 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f83d 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005534:	e01e      	b.n	8005574 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005536:	bf00      	nop
    return;
 8005538:	e01c      	b.n	8005574 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_UART_IRQHandler+0x1d6>
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f908 	bl	8005764 <UART_Transmit_IT>
    return;
 8005554:	e00f      	b.n	8005576 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_UART_IRQHandler+0x1f6>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f950 	bl	8005810 <UART_EndTransmit_IT>
    return;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005574:	bf00      	nop
  }
}
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	0800573d 	.word	0x0800573d

08005580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11e      	bne.n	8005616 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800560c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7fb fd14 	bl	8001044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff ffae 	bl	8005594 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b80      	cmp	r3, #128	; 0x80
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b21      	cmp	r3, #33	; 0x21
 8005672:	d108      	bne.n	8005686 <UART_DMAError+0x46>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f000 f827 	bl	80056d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b22      	cmp	r3, #34	; 0x22
 80056a6:	d108      	bne.n	80056ba <UART_DMAError+0x7a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056b4:	68b8      	ldr	r0, [r7, #8]
 80056b6:	f000 f823 	bl	8005700 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c6:	68b8      	ldr	r0, [r7, #8]
 80056c8:	f7ff ff6e 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80056ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005716:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff ff26 	bl	80055a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b21      	cmp	r3, #33	; 0x21
 8005776:	d144      	bne.n	8005802 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d11a      	bne.n	80057b8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005796:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]
 80057aa:	e00e      	b.n	80057ca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]
 80057b6:	e008      	b.n	80057ca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6211      	str	r1, [r2, #32]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4619      	mov	r1, r3
 80057d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005826:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff fea5 	bl	8005580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b22      	cmp	r3, #34	; 0x22
 8005852:	d171      	bne.n	8005938 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585c:	d123      	bne.n	80058a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10e      	bne.n	800588a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
 8005888:	e029      	b.n	80058de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	b29b      	uxth	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	; 0x28
 80058a4:	e01b      	b.n	80058de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6858      	ldr	r0, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6291      	str	r1, [r2, #40]	; 0x28
 80058be:	b2c2      	uxtb	r2, r0
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e00c      	b.n	80058de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	1c58      	adds	r0, r3, #1
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	6288      	str	r0, [r1, #40]	; 0x28
 80058d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4619      	mov	r1, r3
 80058ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d120      	bne.n	8005934 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0220 	bic.w	r2, r2, #32
 8005900:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fb8a 	bl	8001044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e002      	b.n	800593a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005986:	f023 030c 	bic.w	r3, r3, #12
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6812      	ldr	r2, [r2, #0]
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	430b      	orrs	r3, r1
 8005992:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b2:	f040 8199 	bne.w	8005ce8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4ac6      	ldr	r2, [pc, #792]	; (8005cd4 <UART_SetConfig+0x390>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00f      	beq.n	80059e0 <UART_SetConfig+0x9c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4ac4      	ldr	r2, [pc, #784]	; (8005cd8 <UART_SetConfig+0x394>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00a      	beq.n	80059e0 <UART_SetConfig+0x9c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4ac3      	ldr	r2, [pc, #780]	; (8005cdc <UART_SetConfig+0x398>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d005      	beq.n	80059e0 <UART_SetConfig+0x9c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4ac1      	ldr	r2, [pc, #772]	; (8005ce0 <UART_SetConfig+0x39c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	f040 80bd 	bne.w	8005b5a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fe fdce 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 80059e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	461d      	mov	r5, r3
 80059ea:	f04f 0600 	mov.w	r6, #0
 80059ee:	46a8      	mov	r8, r5
 80059f0:	46b1      	mov	r9, r6
 80059f2:	eb18 0308 	adds.w	r3, r8, r8
 80059f6:	eb49 0409 	adc.w	r4, r9, r9
 80059fa:	4698      	mov	r8, r3
 80059fc:	46a1      	mov	r9, r4
 80059fe:	eb18 0805 	adds.w	r8, r8, r5
 8005a02:	eb49 0906 	adc.w	r9, r9, r6
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a1a:	4688      	mov	r8, r1
 8005a1c:	4691      	mov	r9, r2
 8005a1e:	eb18 0005 	adds.w	r0, r8, r5
 8005a22:	eb49 0106 	adc.w	r1, r9, r6
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	f04f 0600 	mov.w	r6, #0
 8005a30:	196b      	adds	r3, r5, r5
 8005a32:	eb46 0406 	adc.w	r4, r6, r6
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	f7fa fbed 	bl	8000218 <__aeabi_uldivmod>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	461a      	mov	r2, r3
 8005a44:	4ba7      	ldr	r3, [pc, #668]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005a46:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	461d      	mov	r5, r3
 8005a54:	f04f 0600 	mov.w	r6, #0
 8005a58:	46a9      	mov	r9, r5
 8005a5a:	46b2      	mov	sl, r6
 8005a5c:	eb19 0309 	adds.w	r3, r9, r9
 8005a60:	eb4a 040a 	adc.w	r4, sl, sl
 8005a64:	4699      	mov	r9, r3
 8005a66:	46a2      	mov	sl, r4
 8005a68:	eb19 0905 	adds.w	r9, r9, r5
 8005a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a84:	4689      	mov	r9, r1
 8005a86:	4692      	mov	sl, r2
 8005a88:	eb19 0005 	adds.w	r0, r9, r5
 8005a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	461d      	mov	r5, r3
 8005a96:	f04f 0600 	mov.w	r6, #0
 8005a9a:	196b      	adds	r3, r5, r5
 8005a9c:	eb46 0406 	adc.w	r4, r6, r6
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f7fa fbb8 	bl	8000218 <__aeabi_uldivmod>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b8d      	ldr	r3, [pc, #564]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a88      	ldr	r2, [pc, #544]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad0:	4498      	add	r8, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	461d      	mov	r5, r3
 8005ad6:	f04f 0600 	mov.w	r6, #0
 8005ada:	46a9      	mov	r9, r5
 8005adc:	46b2      	mov	sl, r6
 8005ade:	eb19 0309 	adds.w	r3, r9, r9
 8005ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	46a2      	mov	sl, r4
 8005aea:	eb19 0905 	adds.w	r9, r9, r5
 8005aee:	eb4a 0a06 	adc.w	sl, sl, r6
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b06:	4689      	mov	r9, r1
 8005b08:	4692      	mov	sl, r2
 8005b0a:	eb19 0005 	adds.w	r0, r9, r5
 8005b0e:	eb4a 0106 	adc.w	r1, sl, r6
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	461d      	mov	r5, r3
 8005b18:	f04f 0600 	mov.w	r6, #0
 8005b1c:	196b      	adds	r3, r5, r5
 8005b1e:	eb46 0406 	adc.w	r4, r6, r6
 8005b22:	461a      	mov	r2, r3
 8005b24:	4623      	mov	r3, r4
 8005b26:	f7fa fb77 	bl	8000218 <__aeabi_uldivmod>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005b32:	fba3 1302 	umull	r1, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	2164      	movs	r1, #100	; 0x64
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	3332      	adds	r3, #50	; 0x32
 8005b44:	4a67      	ldr	r2, [pc, #412]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	f003 0207 	and.w	r2, r3, #7
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4442      	add	r2, r8
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	e27d      	b.n	8006056 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b5a:	f7fe fcfd 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8005b5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	461d      	mov	r5, r3
 8005b64:	f04f 0600 	mov.w	r6, #0
 8005b68:	46a8      	mov	r8, r5
 8005b6a:	46b1      	mov	r9, r6
 8005b6c:	eb18 0308 	adds.w	r3, r8, r8
 8005b70:	eb49 0409 	adc.w	r4, r9, r9
 8005b74:	4698      	mov	r8, r3
 8005b76:	46a1      	mov	r9, r4
 8005b78:	eb18 0805 	adds.w	r8, r8, r5
 8005b7c:	eb49 0906 	adc.w	r9, r9, r6
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b94:	4688      	mov	r8, r1
 8005b96:	4691      	mov	r9, r2
 8005b98:	eb18 0005 	adds.w	r0, r8, r5
 8005b9c:	eb49 0106 	adc.w	r1, r9, r6
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	461d      	mov	r5, r3
 8005ba6:	f04f 0600 	mov.w	r6, #0
 8005baa:	196b      	adds	r3, r5, r5
 8005bac:	eb46 0406 	adc.w	r4, r6, r6
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	f7fa fb30 	bl	8000218 <__aeabi_uldivmod>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	461d      	mov	r5, r3
 8005bce:	f04f 0600 	mov.w	r6, #0
 8005bd2:	46a9      	mov	r9, r5
 8005bd4:	46b2      	mov	sl, r6
 8005bd6:	eb19 0309 	adds.w	r3, r9, r9
 8005bda:	eb4a 040a 	adc.w	r4, sl, sl
 8005bde:	4699      	mov	r9, r3
 8005be0:	46a2      	mov	sl, r4
 8005be2:	eb19 0905 	adds.w	r9, r9, r5
 8005be6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfe:	4689      	mov	r9, r1
 8005c00:	4692      	mov	sl, r2
 8005c02:	eb19 0005 	adds.w	r0, r9, r5
 8005c06:	eb4a 0106 	adc.w	r1, sl, r6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	196b      	adds	r3, r5, r5
 8005c16:	eb46 0406 	adc.w	r4, r6, r6
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	f7fa fafb 	bl	8000218 <__aeabi_uldivmod>
 8005c22:	4603      	mov	r3, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2164      	movs	r1, #100	; 0x64
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	3332      	adds	r3, #50	; 0x32
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c4a:	4498      	add	r8, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	461d      	mov	r5, r3
 8005c50:	f04f 0600 	mov.w	r6, #0
 8005c54:	46a9      	mov	r9, r5
 8005c56:	46b2      	mov	sl, r6
 8005c58:	eb19 0309 	adds.w	r3, r9, r9
 8005c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c60:	4699      	mov	r9, r3
 8005c62:	46a2      	mov	sl, r4
 8005c64:	eb19 0905 	adds.w	r9, r9, r5
 8005c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c6c:	f04f 0100 	mov.w	r1, #0
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c80:	4689      	mov	r9, r1
 8005c82:	4692      	mov	sl, r2
 8005c84:	eb19 0005 	adds.w	r0, r9, r5
 8005c88:	eb4a 0106 	adc.w	r1, sl, r6
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	461d      	mov	r5, r3
 8005c92:	f04f 0600 	mov.w	r6, #0
 8005c96:	196b      	adds	r3, r5, r5
 8005c98:	eb46 0406 	adc.w	r4, r6, r6
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	f7fa faba 	bl	8000218 <__aeabi_uldivmod>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005cac:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	2164      	movs	r1, #100	; 0x64
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	3332      	adds	r3, #50	; 0x32
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <UART_SetConfig+0x3a0>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f003 0207 	and.w	r2, r3, #7
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4442      	add	r2, r8
 8005cd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005cd2:	e1c0      	b.n	8006056 <UART_SetConfig+0x712>
 8005cd4:	40011000 	.word	0x40011000
 8005cd8:	40011400 	.word	0x40011400
 8005cdc:	40011800 	.word	0x40011800
 8005ce0:	40011c00 	.word	0x40011c00
 8005ce4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4adc      	ldr	r2, [pc, #880]	; (8006060 <UART_SetConfig+0x71c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <UART_SetConfig+0x3ce>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4adb      	ldr	r2, [pc, #876]	; (8006064 <UART_SetConfig+0x720>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x3ce>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4ad9      	ldr	r2, [pc, #868]	; (8006068 <UART_SetConfig+0x724>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d005      	beq.n	8005d12 <UART_SetConfig+0x3ce>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4ad8      	ldr	r2, [pc, #864]	; (800606c <UART_SetConfig+0x728>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	f040 80d1 	bne.w	8005eb4 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d12:	f7fe fc35 	bl	8004580 <HAL_RCC_GetPCLK2Freq>
 8005d16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	469a      	mov	sl, r3
 8005d1c:	f04f 0b00 	mov.w	fp, #0
 8005d20:	46d0      	mov	r8, sl
 8005d22:	46d9      	mov	r9, fp
 8005d24:	eb18 0308 	adds.w	r3, r8, r8
 8005d28:	eb49 0409 	adc.w	r4, r9, r9
 8005d2c:	4698      	mov	r8, r3
 8005d2e:	46a1      	mov	r9, r4
 8005d30:	eb18 080a 	adds.w	r8, r8, sl
 8005d34:	eb49 090b 	adc.w	r9, r9, fp
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d4c:	4688      	mov	r8, r1
 8005d4e:	4691      	mov	r9, r2
 8005d50:	eb1a 0508 	adds.w	r5, sl, r8
 8005d54:	eb4b 0609 	adc.w	r6, fp, r9
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	0094      	lsls	r4, r2, #2
 8005d6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	461a      	mov	r2, r3
 8005d74:	4623      	mov	r3, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	4631      	mov	r1, r6
 8005d7a:	f7fa fa4d 	bl	8000218 <__aeabi_uldivmod>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	461a      	mov	r2, r3
 8005d84:	4bba      	ldr	r3, [pc, #744]	; (8006070 <UART_SetConfig+0x72c>)
 8005d86:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	469b      	mov	fp, r3
 8005d94:	f04f 0c00 	mov.w	ip, #0
 8005d98:	46d9      	mov	r9, fp
 8005d9a:	46e2      	mov	sl, ip
 8005d9c:	eb19 0309 	adds.w	r3, r9, r9
 8005da0:	eb4a 040a 	adc.w	r4, sl, sl
 8005da4:	4699      	mov	r9, r3
 8005da6:	46a2      	mov	sl, r4
 8005da8:	eb19 090b 	adds.w	r9, r9, fp
 8005dac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dc4:	4689      	mov	r9, r1
 8005dc6:	4692      	mov	sl, r2
 8005dc8:	eb1b 0509 	adds.w	r5, fp, r9
 8005dcc:	eb4c 060a 	adc.w	r6, ip, sl
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f04f 0200 	mov.w	r2, #0
 8005dda:	f04f 0300 	mov.w	r3, #0
 8005dde:	f04f 0400 	mov.w	r4, #0
 8005de2:	0094      	lsls	r4, r2, #2
 8005de4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	461a      	mov	r2, r3
 8005dec:	4623      	mov	r3, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	4631      	mov	r1, r6
 8005df2:	f7fa fa11 	bl	8000218 <__aeabi_uldivmod>
 8005df6:	4603      	mov	r3, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b9c      	ldr	r3, [pc, #624]	; (8006070 <UART_SetConfig+0x72c>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a97      	ldr	r2, [pc, #604]	; (8006070 <UART_SetConfig+0x72c>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1c:	4498      	add	r8, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	469b      	mov	fp, r3
 8005e22:	f04f 0c00 	mov.w	ip, #0
 8005e26:	46d9      	mov	r9, fp
 8005e28:	46e2      	mov	sl, ip
 8005e2a:	eb19 0309 	adds.w	r3, r9, r9
 8005e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e32:	4699      	mov	r9, r3
 8005e34:	46a2      	mov	sl, r4
 8005e36:	eb19 090b 	adds.w	r9, r9, fp
 8005e3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e52:	4689      	mov	r9, r1
 8005e54:	4692      	mov	sl, r2
 8005e56:	eb1b 0509 	adds.w	r5, fp, r9
 8005e5a:	eb4c 060a 	adc.w	r6, ip, sl
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	f04f 0400 	mov.w	r4, #0
 8005e70:	0094      	lsls	r4, r2, #2
 8005e72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	4631      	mov	r1, r6
 8005e80:	f7fa f9ca 	bl	8000218 <__aeabi_uldivmod>
 8005e84:	4603      	mov	r3, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b79      	ldr	r3, [pc, #484]	; (8006070 <UART_SetConfig+0x72c>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a74      	ldr	r2, [pc, #464]	; (8006070 <UART_SetConfig+0x72c>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4442      	add	r2, r8
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	e0d0      	b.n	8006056 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fe fb50 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8005eb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	469a      	mov	sl, r3
 8005ebe:	f04f 0b00 	mov.w	fp, #0
 8005ec2:	46d0      	mov	r8, sl
 8005ec4:	46d9      	mov	r9, fp
 8005ec6:	eb18 0308 	adds.w	r3, r8, r8
 8005eca:	eb49 0409 	adc.w	r4, r9, r9
 8005ece:	4698      	mov	r8, r3
 8005ed0:	46a1      	mov	r9, r4
 8005ed2:	eb18 080a 	adds.w	r8, r8, sl
 8005ed6:	eb49 090b 	adc.w	r9, r9, fp
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ee6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005eee:	4688      	mov	r8, r1
 8005ef0:	4691      	mov	r9, r2
 8005ef2:	eb1a 0508 	adds.w	r5, sl, r8
 8005ef6:	eb4b 0609 	adc.w	r6, fp, r9
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4619      	mov	r1, r3
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	0094      	lsls	r4, r2, #2
 8005f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	f7fa f97c 	bl	8000218 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b52      	ldr	r3, [pc, #328]	; (8006070 <UART_SetConfig+0x72c>)
 8005f28:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	469b      	mov	fp, r3
 8005f36:	f04f 0c00 	mov.w	ip, #0
 8005f3a:	46d9      	mov	r9, fp
 8005f3c:	46e2      	mov	sl, ip
 8005f3e:	eb19 0309 	adds.w	r3, r9, r9
 8005f42:	eb4a 040a 	adc.w	r4, sl, sl
 8005f46:	4699      	mov	r9, r3
 8005f48:	46a2      	mov	sl, r4
 8005f4a:	eb19 090b 	adds.w	r9, r9, fp
 8005f4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f66:	4689      	mov	r9, r1
 8005f68:	4692      	mov	sl, r2
 8005f6a:	eb1b 0509 	adds.w	r5, fp, r9
 8005f6e:	eb4c 060a 	adc.w	r6, ip, sl
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	f04f 0400 	mov.w	r4, #0
 8005f84:	0094      	lsls	r4, r2, #2
 8005f86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f8a:	008b      	lsls	r3, r1, #2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	4631      	mov	r1, r6
 8005f94:	f7fa f940 	bl	8000218 <__aeabi_uldivmod>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b34      	ldr	r3, [pc, #208]	; (8006070 <UART_SetConfig+0x72c>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	; 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a2f      	ldr	r2, [pc, #188]	; (8006070 <UART_SetConfig+0x72c>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbe:	4498      	add	r8, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	469b      	mov	fp, r3
 8005fc4:	f04f 0c00 	mov.w	ip, #0
 8005fc8:	46d9      	mov	r9, fp
 8005fca:	46e2      	mov	sl, ip
 8005fcc:	eb19 0309 	adds.w	r3, r9, r9
 8005fd0:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd4:	4699      	mov	r9, r3
 8005fd6:	46a2      	mov	sl, r4
 8005fd8:	eb19 090b 	adds.w	r9, r9, fp
 8005fdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ff0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff4:	4689      	mov	r9, r1
 8005ff6:	4692      	mov	sl, r2
 8005ff8:	eb1b 0509 	adds.w	r5, fp, r9
 8005ffc:	eb4c 060a 	adc.w	r6, ip, sl
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4619      	mov	r1, r3
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	f04f 0400 	mov.w	r4, #0
 8006012:	0094      	lsls	r4, r2, #2
 8006014:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006018:	008b      	lsls	r3, r1, #2
 800601a:	461a      	mov	r2, r3
 800601c:	4623      	mov	r3, r4
 800601e:	4628      	mov	r0, r5
 8006020:	4631      	mov	r1, r6
 8006022:	f7fa f8f9 	bl	8000218 <__aeabi_uldivmod>
 8006026:	4603      	mov	r3, r0
 8006028:	460c      	mov	r4, r1
 800602a:	461a      	mov	r2, r3
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <UART_SetConfig+0x72c>)
 800602e:	fba3 1302 	umull	r1, r3, r3, r2
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2164      	movs	r1, #100	; 0x64
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	3332      	adds	r3, #50	; 0x32
 8006040:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <UART_SetConfig+0x72c>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	f003 020f 	and.w	r2, r3, #15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4442      	add	r2, r8
 8006052:	609a      	str	r2, [r3, #8]
}
 8006054:	e7ff      	b.n	8006056 <UART_SetConfig+0x712>
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006060:	40011000 	.word	0x40011000
 8006064:	40011400 	.word	0x40011400
 8006068:	40011800 	.word	0x40011800
 800606c:	40011c00 	.word	0x40011c00
 8006070:	51eb851f 	.word	0x51eb851f

08006074 <arm_biquad_cascade_df2T_init_f32>:
 8006074:	b510      	push	{r4, lr}
 8006076:	6082      	str	r2, [r0, #8]
 8006078:	7001      	strb	r1, [r0, #0]
 800607a:	4604      	mov	r4, r0
 800607c:	00ca      	lsls	r2, r1, #3
 800607e:	4618      	mov	r0, r3
 8006080:	2100      	movs	r1, #0
 8006082:	f000 f832 	bl	80060ea <memset>
 8006086:	6060      	str	r0, [r4, #4]
 8006088:	bd10      	pop	{r4, pc}
 800608a:	bf00      	nop

0800608c <__libc_init_array>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	4e0d      	ldr	r6, [pc, #52]	; (80060c4 <__libc_init_array+0x38>)
 8006090:	4c0d      	ldr	r4, [pc, #52]	; (80060c8 <__libc_init_array+0x3c>)
 8006092:	1ba4      	subs	r4, r4, r6
 8006094:	10a4      	asrs	r4, r4, #2
 8006096:	2500      	movs	r5, #0
 8006098:	42a5      	cmp	r5, r4
 800609a:	d109      	bne.n	80060b0 <__libc_init_array+0x24>
 800609c:	4e0b      	ldr	r6, [pc, #44]	; (80060cc <__libc_init_array+0x40>)
 800609e:	4c0c      	ldr	r4, [pc, #48]	; (80060d0 <__libc_init_array+0x44>)
 80060a0:	f000 f82c 	bl	80060fc <_init>
 80060a4:	1ba4      	subs	r4, r4, r6
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	2500      	movs	r5, #0
 80060aa:	42a5      	cmp	r5, r4
 80060ac:	d105      	bne.n	80060ba <__libc_init_array+0x2e>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060b4:	4798      	blx	r3
 80060b6:	3501      	adds	r5, #1
 80060b8:	e7ee      	b.n	8006098 <__libc_init_array+0xc>
 80060ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060be:	4798      	blx	r3
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7f2      	b.n	80060aa <__libc_init_array+0x1e>
 80060c4:	08006150 	.word	0x08006150
 80060c8:	08006150 	.word	0x08006150
 80060cc:	08006150 	.word	0x08006150
 80060d0:	08006154 	.word	0x08006154

080060d4 <memcpy>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	1e43      	subs	r3, r0, #1
 80060d8:	440a      	add	r2, r1
 80060da:	4291      	cmp	r1, r2
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	bd10      	pop	{r4, pc}
 80060e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e8:	e7f7      	b.n	80060da <memcpy+0x6>

080060ea <memset>:
 80060ea:	4402      	add	r2, r0
 80060ec:	4603      	mov	r3, r0
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d100      	bne.n	80060f4 <memset+0xa>
 80060f2:	4770      	bx	lr
 80060f4:	f803 1b01 	strb.w	r1, [r3], #1
 80060f8:	e7f9      	b.n	80060ee <memset+0x4>
	...

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
