
STM32F413CG_DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f88  2000000c  08004bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f94  08004bb8  00020f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e66  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c21  00000000  00000000  00034ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fe3  00000000  00000000  0003a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001097d  00000000  00000000  0005d063  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d472f  00000000  00000000  0006d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014210f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  0014218c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b64 	.word	0x08004b64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004b64 	.word	0x08004b64

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_DAC_Init+0x4c>)
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <MX_DAC_Init+0x50>)
 800052a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_DAC_Init+0x4c>)
 800052e:	f001 f862 	bl	80015f6 <HAL_DAC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000538:	f000 fcf0 	bl	8000f1c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800053c:	2304      	movs	r3, #4
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <MX_DAC_Init+0x4c>)
 800054c:	f001 f9a8 	bl	80018a0 <HAL_DAC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000556:	f000 fce1 	bl	8000f1c <Error_Handler>
  }

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000d54 	.word	0x20000d54
 8000568:	40007400 	.word	0x40007400

0800056c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a30      	ldr	r2, [pc, #192]	; (800064c <HAL_DAC_MspInit+0xe0>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d159      	bne.n	8000642 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 8000594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000596:	4a2e      	ldr	r2, [pc, #184]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 8000598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800059c:	6413      	str	r3, [r2, #64]	; 0x40
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a27      	ldr	r2, [pc, #156]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_DAC_MspInit+0xe4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c6:	2310      	movs	r3, #16
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	481e      	ldr	r0, [pc, #120]	; (8000654 <HAL_DAC_MspInit+0xe8>)
 80005da:	f002 f961 	bl	80028a0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <HAL_DAC_MspInit+0xec>)
 80005e0:	4a1e      	ldr	r2, [pc, #120]	; (800065c <HAL_DAC_MspInit+0xf0>)
 80005e2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <HAL_DAC_MspInit+0xec>)
 80005e6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <HAL_DAC_MspInit+0xec>)
 80005ee:	2240      	movs	r2, #64	; 0x40
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <HAL_DAC_MspInit+0xec>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_DAC_MspInit+0xec>)
 80005fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_DAC_MspInit+0xec>)
 8000602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000606:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <HAL_DAC_MspInit+0xec>)
 800060a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800060e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_DAC_MspInit+0xec>)
 8000612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000616:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_DAC_MspInit+0xec>)
 800061a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800061e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_DAC_MspInit+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <HAL_DAC_MspInit+0xec>)
 8000628:	f001 fdaa 	bl	8002180 <HAL_DMA_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000632:	f000 fc73 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_DAC_MspInit+0xec>)
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_DAC_MspInit+0xec>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40007400 	.word	0x40007400
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000
 8000658:	20000cf4 	.word	0x20000cf4
 800065c:	40026088 	.word	0x40026088

08000660 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <MX_DFSDM1_Init+0xbc>)
 8000668:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000672:	2201      	movs	r2, #1
 8000674:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000678:	2201      	movs	r2, #1
 800067a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 800067e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000682:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 800068c:	2201      	movs	r2, #1
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000690:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000692:	f001 facd 	bl	8001c30 <HAL_DFSDM_FilterInit>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800069c:	f000 fc3e 	bl	8000f1c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <MX_DFSDM1_Init+0xc4>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 30;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006b6:	221e      	movs	r2, #30
 80006b8:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_DFSDM1_Init+0xc0>)
 80006f2:	f001 f9ad 	bl	8001a50 <HAL_DFSDM_ChannelInit>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80006fc:	f000 fc0e 	bl	8000f1c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000700:	2201      	movs	r2, #1
 8000702:	4909      	ldr	r1, [pc, #36]	; (8000728 <MX_DFSDM1_Init+0xc8>)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_DFSDM1_Init+0xb8>)
 8000706:	f001 fb7f 	bl	8001e08 <HAL_DFSDM_FilterConfigRegChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000710:	f000 fc04 	bl	8000f1c <Error_Handler>
  }

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000da0 	.word	0x20000da0
 800071c:	40016100 	.word	0x40016100
 8000720:	20000d68 	.word	0x20000d68
 8000724:	40016020 	.word	0x40016020
 8000728:	00010002 	.word	0x00010002

0800072c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(dfsdm_filterHandle->Instance))&&(DFSDM1_Init == 0))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a53      	ldr	r2, [pc, #332]	; (8000898 <HAL_DFSDM_FilterMspInit+0x16c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d004      	beq.n	8000758 <HAL_DFSDM_FilterMspInit+0x2c>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a52      	ldr	r2, [pc, #328]	; (800089c <HAL_DFSDM_FilterMspInit+0x170>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d15d      	bne.n	8000814 <HAL_DFSDM_FilterMspInit+0xe8>
 8000758:	4b51      	ldr	r3, [pc, #324]	; (80008a0 <HAL_DFSDM_FilterMspInit+0x174>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d159      	bne.n	8000814 <HAL_DFSDM_FilterMspInit+0xe8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000760:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <HAL_DFSDM_FilterMspInit+0x178>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a4f      	ldr	r2, [pc, #316]	; (80008a4 <HAL_DFSDM_FilterMspInit+0x178>)
 8000768:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <HAL_DFSDM_FilterMspInit+0x178>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10d      	bne.n	800078e <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a4b      	ldr	r2, [pc, #300]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 800077c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a44      	ldr	r2, [pc, #272]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a3d      	ldr	r2, [pc, #244]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <HAL_DFSDM_FilterMspInit+0x17c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d8:	230a      	movs	r3, #10
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4832      	ldr	r0, [pc, #200]	; (80008ac <HAL_DFSDM_FilterMspInit+0x180>)
 80007e4:	f002 f85c 	bl	80028a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007fa:	2306      	movs	r3, #6
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	482a      	ldr	r0, [pc, #168]	; (80008b0 <HAL_DFSDM_FilterMspInit+0x184>)
 8000806:	f002 f84b 	bl	80028a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <HAL_DFSDM_FilterMspInit+0x174>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_DFSDM_FilterMspInit+0x174>)
 8000812:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <HAL_DFSDM_FilterMspInit+0x16c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d137      	bne.n	800088e <HAL_DFSDM_FilterMspInit+0x162>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <HAL_DFSDM_FilterMspInit+0x18c>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000826:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800082a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000846:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800084a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800085a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800085e:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000868:	f001 fc8a 	bl	8002180 <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_DFSDM_FilterMspInit+0x14a>
    {
      Error_Handler();
 8000872:	f000 fb53 	bl	8000f1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_DFSDM_FilterMspInit+0x188>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40016100 	.word	0x40016100
 800089c:	40016180 	.word	0x40016180
 80008a0:	2000002c 	.word	0x2000002c
 80008a4:	20000028 	.word	0x20000028
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40020000 	.word	0x40020000
 80008b4:	20000df4 	.word	0x20000df4
 80008b8:	40026410 	.word	0x40026410

080008bc <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(dfsdm_channelHandle->Instance))&&(DFSDM1_Init == 0))
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a39      	ldr	r2, [pc, #228]	; (80009c0 <HAL_DFSDM_ChannelMspInit+0x104>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d00e      	beq.n	80008fc <HAL_DFSDM_ChannelMspInit+0x40>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a38      	ldr	r2, [pc, #224]	; (80009c4 <HAL_DFSDM_ChannelMspInit+0x108>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d009      	beq.n	80008fc <HAL_DFSDM_ChannelMspInit+0x40>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <HAL_DFSDM_ChannelMspInit+0x10c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d004      	beq.n	80008fc <HAL_DFSDM_ChannelMspInit+0x40>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a35      	ldr	r2, [pc, #212]	; (80009cc <HAL_DFSDM_ChannelMspInit+0x110>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d15d      	bne.n	80009b8 <HAL_DFSDM_ChannelMspInit+0xfc>
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d159      	bne.n	80009b8 <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000904:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	4a32      	ldr	r2, [pc, #200]	; (80009d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 800090c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10d      	bne.n	8000932 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097c:	230a      	movs	r3, #10
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <HAL_DFSDM_ChannelMspInit+0x120>)
 8000988:	f001 ff8a 	bl	80028a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800099e:	2306      	movs	r3, #6
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <HAL_DFSDM_ChannelMspInit+0x124>)
 80009aa:	f001 ff79 	bl	80028a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_DFSDM_ChannelMspInit+0x114>)
 80009b6:	6013      	str	r3, [r2, #0]
  }
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40016000 	.word	0x40016000
 80009c4:	40016020 	.word	0x40016020
 80009c8:	40016040 	.word	0x40016040
 80009cc:	40016060 	.word	0x40016060
 80009d0:	2000002c 	.word	0x2000002c
 80009d4:	20000028 	.word	0x20000028
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020000 	.word	0x40020000

080009e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_DMA_Init+0x78>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <MX_DMA_Init+0x78>)
 80009f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_DMA_Init+0x78>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_DMA_Init+0x78>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_DMA_Init+0x78>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_DMA_Init+0x78>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200b      	movs	r0, #11
 8000a28:	f000 fdaf 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f000 fdc8 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2010      	movs	r0, #16
 8000a38:	f000 fda7 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a3c:	2010      	movs	r0, #16
 8000a3e:	f000 fdc0 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2038      	movs	r0, #56	; 0x38
 8000a48:	f000 fd9f 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a4c:	2038      	movs	r0, #56	; 0x38
 8000a4e:	f000 fdb8 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB3   ------> I2S3_CK
*/
void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ad0:	f002 f878 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000aec:	f001 fed8 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000af0:	2308      	movs	r3, #8
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b00:	2306      	movs	r3, #6
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xc0>)
 8000b0c:	f001 fec8 	bl	80028a0 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400

08000b24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f002 f849 	bl	8002bf8 <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f9d6 	bl	8000f1c <Error_Handler>
  }

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000e54 	.word	0x20000e54
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_I2C_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bbe:	23c0      	movs	r3, #192	; 0xc0
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc2:	2312      	movs	r3, #18
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <HAL_I2C_MspInit+0x8c>)
 8000bda:	f001 fe61 	bl	80028a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000be8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020400 	.word	0x40020400

08000c10 <main>:
	}
	else {x=0;playSong();}
	}

int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af02      	add	r7, sp, #8
	HAL_Init();
 8000c16:	f000 fb49 	bl	80012ac <HAL_Init>
	SystemClock_Config();
 8000c1a:	f000 f8e7 	bl	8000dec <SystemClock_Config>
	MX_GPIO_Init();
 8000c1e:	f7ff ff1f 	bl	8000a60 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c22:	f7ff fedf 	bl	80009e4 <MX_DMA_Init>
	MX_I2C1_Init();
 8000c26:	f7ff ff7d 	bl	8000b24 <MX_I2C1_Init>
	//MX_I2S3_Init();
	MX_DFSDM1_Init();
 8000c2a:	f7ff fd19 	bl	8000660 <MX_DFSDM1_Init>
	MX_DAC_Init();
 8000c2e:	f7ff fc73 	bl	8000518 <MX_DAC_Init>
	MX_TIM6_Init();
 8000c32:	f000 fa0d 	bl	8001050 <MX_TIM6_Init>
	MX_UART5_Init();
 8000c36:	f000 fa61 	bl	80010fc <MX_UART5_Init>
	TestBlinking();
 8000c3a:	f000 f8bf 	bl	8000dbc <TestBlinking>

	HAL_TIM_Base_Start(&htim6);
 8000c3e:	4842      	ldr	r0, [pc, #264]	; (8000d48 <main+0x138>)
 8000c40:	f002 fffd 	bl	8003c3e <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <main+0x13c>)
 8000c48:	f000 fcf7 	bl	800163a <HAL_DAC_Start>
	//__HAL_I2S_ENABLE(&hi2s3);
	//	if (HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 1, 10) == HAL_OK){
//		TestBlinking();
//	}
	//Codec_Reset(&hi2c1);
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000c4c:	2264      	movs	r2, #100	; 0x64
 8000c4e:	4940      	ldr	r1, [pc, #256]	; (8000d50 <main+0x140>)
 8000c50:	4840      	ldr	r0, [pc, #256]	; (8000d54 <main+0x144>)
 8000c52:	f001 f91f 	bl	8001e94 <HAL_DFSDM_FilterRegularStart_DMA>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <main+0x50>
	{
		Error_Handler();
 8000c5c:	f000 f95e 	bl	8000f1c <Error_Handler>


	while (1)
	{

		if((DmaRightRecHalfBuffCplt == 1))
 8000c60:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <main+0x148>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d13c      	bne.n	8000ce2 <main+0xd2>
		{

			for(i = 0; i < AUDIO_REC/2; i++)
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <main+0x14c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	e01f      	b.n	8000cb0 <main+0xa0>
			{
				//sample16 =  SaturaLH((RightRecBuff[i] >> 8), -4096, 4096);
				sample16 =  RightRecBuff[i] >> 8;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <main+0x14c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a36      	ldr	r2, [pc, #216]	; (8000d50 <main+0x140>)
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	121b      	asrs	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <main+0x150>)
 8000c80:	801a      	strh	r2, [r3, #0]
				uSample16 = (int16_t)sample16 + 4096;
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <main+0x150>)
 8000c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <main+0x154>)
 8000c92:	801a      	strh	r2, [r3, #0]
				//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, uSample16>>4);
				txBuf[i] = (uSample16>>1) ;
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <main+0x154>)
 8000c96:	881a      	ldrh	r2, [r3, #0]
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <main+0x14c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0852      	lsrs	r2, r2, #1
 8000c9e:	b291      	uxth	r1, r2
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <main+0x158>)
 8000ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <main+0x14c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <main+0x14c>)
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <main+0x14c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b31      	cmp	r3, #49	; 0x31
 8000cb6:	d9db      	bls.n	8000c70 <main+0x60>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[0], AUDIO_REC/2, DAC_ALIGN_12B_R);
			if(PlaybackStarted == 0)
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <main+0x15c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10a      	bne.n	8000cd6 <main+0xc6>
			{
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, txBuf, AUDIO_REC, DAC_ALIGN_12B_R);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <main+0x158>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <main+0x13c>)
 8000ccc:	f000 fd1c 	bl	8001708 <HAL_DAC_Start_DMA>
				PlaybackStarted = 1;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <main+0x15c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
			}
			DmaLeftRecHalfBuffCplt  = 0;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <main+0x160>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			DmaRightRecHalfBuffCplt = 0;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <main+0x148>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <main+0x164>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1ba      	bne.n	8000c60 <main+0x50>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <main+0x14c>)
 8000cec:	2232      	movs	r2, #50	; 0x32
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e01f      	b.n	8000d32 <main+0x122>
			{
				sample16 = RightRecBuff[i] >> 8;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <main+0x14c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <main+0x140>)
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	121b      	asrs	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <main+0x150>)
 8000d02:	801a      	strh	r2, [r3, #0]
				uSample16 = (int16_t)sample16 + 4096;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <main+0x150>)
 8000d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <main+0x154>)
 8000d14:	801a      	strh	r2, [r3, #0]
				//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, uSample16>>4);
				txBuf[i] = (uSample16>>1) ;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <main+0x154>)
 8000d18:	881a      	ldrh	r2, [r3, #0]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <main+0x14c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0852      	lsrs	r2, r2, #1
 8000d20:	b291      	uxth	r1, r2
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0x158>)
 8000d24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <main+0x14c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <main+0x14c>)
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <main+0x14c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b63      	cmp	r3, #99	; 0x63
 8000d38:	d9db      	bls.n	8000cf2 <main+0xe2>
			}
			//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t* )&txBuf[AUDIO_REC/2], AUDIO_REC/2, DAC_ALIGN_12B_R);

			DmaLeftRecBuffCplt  = 0;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <main+0x168>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
			DmaRightRecBuffCplt = 0;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <main+0x164>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 8000d46:	e78b      	b.n	8000c60 <main+0x50>
 8000d48:	20000eb0 	.word	0x20000eb0
 8000d4c:	20000d54 	.word	0x20000d54
 8000d50:	20000030 	.word	0x20000030
 8000d54:	20000da0 	.word	0x20000da0
 8000d58:	20000cb6 	.word	0x20000cb6
 8000d5c:	20000eac 	.word	0x20000eac
 8000d60:	20000cb2 	.word	0x20000cb2
 8000d64:	20000cb0 	.word	0x20000cb0
 8000d68:	20000670 	.word	0x20000670
 8000d6c:	20000cb8 	.word	0x20000cb8
 8000d70:	20000cb4 	.word	0x20000cb4
 8000d74:	20000cb7 	.word	0x20000cb7
 8000d78:	20000cb5 	.word	0x20000cb5

08000d7c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
{
	//playSong();
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}*/
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
		DmaRightRecHalfBuffCplt = 1;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000cb6 	.word	0x20000cb6

08000d9c <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

	DmaRightRecBuffCplt = 1;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
	//DAC_FLAG=1;
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000cb7 	.word	0x20000cb7

08000dbc <TestBlinking>:

void TestBlinking(void){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <TestBlinking+0x2c>)
 8000dc6:	f001 fefd 	bl	8002bc4 <HAL_GPIO_WritePin>
	//delay(1000);
	HAL_Delay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dce:	f000 fadf 	bl	8001390 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <TestBlinking+0x2c>)
 8000dd8:	f001 fef4 	bl	8002bc4 <HAL_GPIO_WritePin>
	//delay(1000);
	HAL_Delay(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	f000 fad6 	bl	8001390 <HAL_Delay>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40020000 	.word	0x40020000

08000dec <SystemClock_Config>:
  * @brief  The application entry point.
  * @retval int
  */
#include"body_DAC_DFSDM.h"
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0aa      	sub	sp, #168	; 0xa8
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000df6:	2234      	movs	r2, #52	; 0x34
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 feaa 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2258      	movs	r2, #88	; 0x58
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fe9b 	bl	8004b54 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <SystemClock_Config+0x128>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a3b      	ldr	r2, [pc, #236]	; (8000f14 <SystemClock_Config+0x128>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <SystemClock_Config+0x128>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <SystemClock_Config+0x12c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <SystemClock_Config+0x12c>)
 8000e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <SystemClock_Config+0x12c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e72:	2308      	movs	r3, #8
 8000e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000e78:	2350      	movs	r3, #80	; 0x50
 8000e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 5;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fc65 	bl	8003764 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ea0:	f000 f83c 	bl	8000f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000eba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 ffd1 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ecc:	f000 f826 	bl	8000f1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000ed0:	f240 3301 	movw	r3, #769	; 0x301
 8000ed4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_DFSDM1_AUDIO;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 8000eda:	230a      	movs	r3, #10
 8000edc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 f9a6 	bl	800324c <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000f06:	f000 f809 	bl	8000f1c <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	37a8      	adds	r7, #168	; 0xa8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
 while(1){
	 TestBlinking();
 8000f20:	f7ff ff4c 	bl	8000dbc <TestBlinking>
 8000f24:	e7fc      	b.n	8000f20 <Error_Handler+0x4>
	...

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f9c0 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Stream0_IRQHandler+0x10>)
 8000fda:	f001 f9f9 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000f30 	.word	0x20000f30

08000fe8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fee:	f001 f9ef 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000cf4 	.word	0x20000cf4

08000ffc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <UART5_IRQHandler+0x10>)
 8001002:	f002 ffab 	bl	8003f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000ef0 	.word	0x20000ef0

08001010 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <DMA2_Stream0_IRQHandler+0x10>)
 8001016:	f001 f9db 	bl	80023d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000df4 	.word	0x20000df4

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <SystemInit+0x28>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <SystemInit+0x28>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <SystemInit+0x28>)
 800103a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103e:	609a      	str	r2, [r3, #8]
#endif
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_TIM6_Init+0x60>)
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <MX_TIM6_Init+0x64>)
 8001062:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20-1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_TIM6_Init+0x60>)
 8001066:	2213      	movs	r2, #19
 8001068:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_TIM6_Init+0x60>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 125-1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_TIM6_Init+0x60>)
 8001072:	227c      	movs	r2, #124	; 0x7c
 8001074:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_TIM6_Init+0x60>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_TIM6_Init+0x60>)
 800107e:	f002 fdb3 	bl	8003be8 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001088:	f7ff ff48 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800108c:	2320      	movs	r3, #32
 800108e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_TIM6_Init+0x60>)
 800109a:	f002 fe95 	bl	8003dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80010a4:	f7ff ff3a 	bl	8000f1c <Error_Handler>
  }

}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000eb0 	.word	0x20000eb0
 80010b4:	40001000 	.word	0x40001000

080010b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_TIM_Base_MspInit+0x3c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10d      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_Base_MspInit+0x40>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40001000 	.word	0x40001000
 80010f8:	40023800 	.word	0x40023800

080010fc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_UART5_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_UART5_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_UART5_Init+0x4c>)
 8001108:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800110c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_UART5_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_UART5_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_UART5_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_UART5_Init+0x4c>)
 8001122:	2204      	movs	r2, #4
 8001124:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_UART5_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_UART5_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_UART5_Init+0x4c>)
 8001134:	f002 fec4 	bl	8003ec0 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800113e:	f7ff feed 	bl	8000f1c <Error_Handler>
  }

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000ef0 	.word	0x20000ef0
 800114c:	40005000 	.word	0x40005000

08001150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a35      	ldr	r2, [pc, #212]	; (8001244 <HAL_UART_MspInit+0xf4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d163      	bne.n	800123a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a33      	ldr	r2, [pc, #204]	; (8001248 <HAL_UART_MspInit+0xf8>)
 800117c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <HAL_UART_MspInit+0xf8>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_UART_MspInit+0xf8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration    
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 80011bc:	230b      	movs	r3, #11
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <HAL_UART_MspInit+0xfc>)
 80011c8:	f001 fb6a 	bl	80028a0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011ce:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_UART_MspInit+0x104>)
 80011d0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ec:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0x100>)
 80011fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001200:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_UART_MspInit+0x100>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0x100>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800120e:	4810      	ldr	r0, [pc, #64]	; (8001250 <HAL_UART_MspInit+0x100>)
 8001210:	f000 ffb6 	bl	8002180 <HAL_DMA_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800121a:	f7ff fe7f 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_UART_MspInit+0x100>)
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_UART_MspInit+0x100>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2035      	movs	r0, #53	; 0x35
 8001230:	f000 f9ab 	bl	800158a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001234:	2035      	movs	r0, #53	; 0x35
 8001236:	f000 f9c4 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40005000 	.word	0x40005000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	20000f30 	.word	0x20000f30
 8001254:	40026010 	.word	0x40026010

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800125c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
  ldr  r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001278:	f842 3b04 	str.w	r3, [r2], #4

0800127c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001282:	f7ff fecf 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f003 fc41 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fcc1 	bl	8000c10 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001290:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001294:	08004bac 	.word	0x08004bac
  ldr  r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800129c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012a0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012a4:	20000f94 	.word	0x20000f94

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f94d 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe22 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f965 	bl	80015de <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f92d 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000008 	.word	0x20000008
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000f90 	.word	0x20000f90

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000f90 	.word	0x20000f90

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_Delay+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e014      	b.n	8001632 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	791b      	ldrb	r3, [r3, #4]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7fe ffa7 	bl	800056c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2202      	movs	r2, #2
 8001622:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	795b      	ldrb	r3, [r3, #5]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_DAC_Start+0x1e>
 8001654:	2302      	movs	r3, #2
 8001656:	e050      	b.n	80016fa <HAL_DAC_Start+0xc0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2202      	movs	r2, #2
 8001662:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	409a      	lsls	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11a      	bne.n	80016b4 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001694:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d127      	bne.n	80016ec <HAL_DAC_Start+0xb2>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b38      	cmp	r3, #56	; 0x38
 80016a0:	d124      	bne.n	80016ec <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	e01b      	b.n	80016ec <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016be:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80016ca:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016d2:	d10b      	bne.n	80016ec <HAL_DAC_Start+0xb2>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80016da:	d107      	bne.n	80016ec <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0202 	orr.w	r2, r2, #2
 80016ea:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	795b      	ldrb	r3, [r3, #5]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_DAC_Start_DMA+0x1e>
 8001722:	2302      	movs	r3, #2
 8001724:	e08e      	b.n	8001844 <HAL_DAC_Start_DMA+0x13c>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2202      	movs	r2, #2
 8001730:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d12a      	bne.n	800178e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_DAC_Start_DMA+0x144>)
 800173e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_DAC_Start_DMA+0x148>)
 8001746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a41      	ldr	r2, [pc, #260]	; (8001854 <HAL_DAC_Start_DMA+0x14c>)
 800174e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800175e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d009      	beq.n	800177a <HAL_DAC_Start_DMA+0x72>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d00c      	beq.n	8001784 <HAL_DAC_Start_DMA+0x7c>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d000      	beq.n	8001770 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800176e:	e039      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3308      	adds	r3, #8
 8001776:	617b      	str	r3, [r7, #20]
        break;
 8001778:	e034      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	330c      	adds	r3, #12
 8001780:	617b      	str	r3, [r7, #20]
        break;
 8001782:	e02f      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3310      	adds	r3, #16
 800178a:	617b      	str	r3, [r7, #20]
        break;
 800178c:	e02a      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a31      	ldr	r2, [pc, #196]	; (8001858 <HAL_DAC_Start_DMA+0x150>)
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_DAC_Start_DMA+0x154>)
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	4a2f      	ldr	r2, [pc, #188]	; (8001860 <HAL_DAC_Start_DMA+0x158>)
 80017a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d009      	beq.n	80017d0 <HAL_DAC_Start_DMA+0xc8>
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d00c      	beq.n	80017da <HAL_DAC_Start_DMA+0xd2>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80017c4:	e00e      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3314      	adds	r3, #20
 80017cc:	617b      	str	r3, [r7, #20]
        break;
 80017ce:	e009      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3318      	adds	r3, #24
 80017d6:	617b      	str	r3, [r7, #20]
        break;
 80017d8:	e004      	b.n	80017e4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	331c      	adds	r3, #28
 80017e0:	617b      	str	r3, [r7, #20]
        break;
 80017e2:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017f8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6898      	ldr	r0, [r3, #8]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f000 fd6a 	bl	80022dc <HAL_DMA_Start_IT>
 8001808:	e00e      	b.n	8001828 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001818:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	68d8      	ldr	r0, [r3, #12]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	f000 fd5a 	bl	80022dc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800193b 	.word	0x0800193b
 8001850:	0800195d 	.word	0x0800195d
 8001854:	08001979 	.word	0x08001979
 8001858:	080019e3 	.word	0x080019e3
 800185c:	08001a05 	.word	0x08001a05
 8001860:	08001a21 	.word	0x08001a21

08001864 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	795b      	ldrb	r3, [r3, #5]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DAC_ConfigChannel+0x20>
 80018bc:	2302      	movs	r3, #2
 80018be:	e036      	b.n	800192e <HAL_DAC_ConfigChannel+0x8e>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2201      	movs	r2, #1
 80018c4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2202      	movs	r2, #2
 80018ca:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80018d4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4013      	ands	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	22c0      	movs	r2, #192	; 0xc0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ff8b 	bl	8001864 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	711a      	strb	r2, [r3, #4]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff ff84 	bl	8001878 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f043 0204 	orr.w	r2, r3, #4
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff ff7a 	bl	800188c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	711a      	strb	r2, [r3, #4]
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f7ff ffd8 	bl	80019a6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	711a      	strb	r2, [r3, #4]
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff ffd1 	bl	80019ba <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ffc7 	bl	80019ce <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	711a      	strb	r2, [r3, #4]
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0cf      	b.n	8001c02 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a69      	ldr	r2, [pc, #420]	; (8001c0c <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DFSDM_ChannelInit+0x3a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_DFSDM_ChannelInit+0x1c0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_DFSDM_ChannelInit+0x3a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <HAL_DFSDM_ChannelInit+0x1c4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_DFSDM_ChannelInit+0x3a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a64      	ldr	r2, [pc, #400]	; (8001c18 <HAL_DFSDM_ChannelInit+0x1c8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d106      	bne.n	8001a98 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_DFSDM_ChannelInit+0x1cc>)
 8001a8c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8001a8e:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <HAL_DFSDM_ChannelInit+0x1d0>)
 8001a90:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e005      	b.n	8001aa4 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8001a98:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <HAL_DFSDM_ChannelInit+0x1d4>)
 8001a9a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_DFSDM_ChannelInit+0x1d8>)
 8001a9e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8001aa0:	4b62      	ldr	r3, [pc, #392]	; (8001c2c <HAL_DFSDM_ChannelInit+0x1dc>)
 8001aa2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 faaf 	bl	800200c <DFSDM_GetChannelFromInstance>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0a0      	b.n	8001c02 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fefb 	bl	80008bc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d125      	bne.n	8001b24 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	791b      	ldrb	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001b48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 020f 	bic.w	r2, r2, #15
 8001b60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f002 0207 	and.w	r2, r2, #7
 8001bb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001be0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fa0c 	bl	800200c <DFSDM_GetChannelFromInstance>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40016000 	.word	0x40016000
 8001c10:	40016020 	.word	0x40016020
 8001c14:	40016040 	.word	0x40016040
 8001c18:	40016060 	.word	0x40016060
 8001c1c:	20000cbc 	.word	0x20000cbc
 8001c20:	20000cc0 	.word	0x20000cc0
 8001c24:	20000cd0 	.word	0x20000cd0
 8001c28:	20000cd4 	.word	0x20000cd4
 8001c2c:	40016400 	.word	0x40016400

08001c30 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0d9      	b.n	8001df6 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_DFSDM_FilterInit+0x1d0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d109      	bne.n	8001c60 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d003      	beq.n	8001c5c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0ca      	b.n	8001df6 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a67      	ldr	r2, [pc, #412]	; (8001e04 <HAL_DFSDM_FilterInit+0x1d4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d109      	bne.n	8001c7e <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d003      	beq.n	8001c7a <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0bb      	b.n	8001df6 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd48 	bl	800072c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001caa:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7a1b      	ldrb	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d108      	bne.n	8001cc6 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7a5b      	ldrb	r3, [r3, #9]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e007      	b.n	8001d00 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001d0e:	f023 0308 	bic.w	r3, r3, #8
 8001d12:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d108      	bne.n	8001d2e <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7c1b      	ldrb	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0210 	orr.w	r2, r2, #16
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0210 	bic.w	r2, r2, #16
 8001d56:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7c5b      	ldrb	r3, [r3, #17]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d108      	bne.n	8001d72 <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e007      	b.n	8001d82 <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0220 	bic.w	r2, r2, #32
 8001d80:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001d90:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001d94:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6959      	ldr	r1, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001da8:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001db0:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c1a      	ldrb	r2, [r3, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40016100 	.word	0x40016100
 8001e04:	40016500 	.word	0x40016500

08001e08 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d02e      	beq.n	8001e80 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001e28:	2bff      	cmp	r3, #255	; 0xff
 8001e2a:	d029      	beq.n	8001e80 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10d      	bne.n	8001e62 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e00a      	b.n	8001e78 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7e:	e001      	b.n	8001e84 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	e066      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ec4:	d002      	beq.n	8001ecc <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
 8001eca:	e05b      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10e      	bne.n	8001ef2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d002      	beq.n	8001ef2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
 8001ef0:	e048      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0c:	d102      	bne.n	8001f14 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
 8001f12:	e037      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d004      	beq.n	8001f28 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d12b      	bne.n	8001f80 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f42:	d101      	bne.n	8001f48 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001f46:	e000      	b.n	8001f4a <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001f48:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	331c      	adds	r3, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f000 f9bc 	bl	80022dc <HAL_DMA_Start_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	22ff      	movs	r2, #255	; 0xff
 8001f6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f76:	e005      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f8ab 	bl	80020d4 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f7e:	e001      	b.n	8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08001fcd 	.word	0x08001fcd
 8001f94:	08001fe9 	.word	0x08001fe9
 8001f98:	08001fb1 	.word	0x08001fb1

08001f9c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7fe fedc 	bl	8000d7c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7fe fede 	bl	8000d9c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff ffcd 	bl	8001f9c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <DFSDM_GetChannelFromInstance+0x9c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <DFSDM_GetChannelFromInstance+0x18>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a23      	ldr	r2, [pc, #140]	; (80020ac <DFSDM_GetChannelFromInstance+0xa0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d102      	bne.n	800202a <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e037      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <DFSDM_GetChannelFromInstance+0xa4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <DFSDM_GetChannelFromInstance+0x2e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <DFSDM_GetChannelFromInstance+0xa8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d102      	bne.n	8002040 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800203a:	2301      	movs	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e02c      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <DFSDM_GetChannelFromInstance+0xac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <DFSDM_GetChannelFromInstance+0x44>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <DFSDM_GetChannelFromInstance+0xb0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002050:	2302      	movs	r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e021      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <DFSDM_GetChannelFromInstance+0xb4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <DFSDM_GetChannelFromInstance+0x5a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <DFSDM_GetChannelFromInstance+0xb8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d102      	bne.n	800206c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002066:	2303      	movs	r3, #3
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e016      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <DFSDM_GetChannelFromInstance+0xbc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002074:	2304      	movs	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e00f      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <DFSDM_GetChannelFromInstance+0xc0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d102      	bne.n	8002088 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8002082:	2305      	movs	r3, #5
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	e008      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <DFSDM_GetChannelFromInstance+0xc4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002090:	2306      	movs	r3, #6
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e001      	b.n	800209a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002096:	2307      	movs	r3, #7
 8002098:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40016000 	.word	0x40016000
 80020ac:	40016400 	.word	0x40016400
 80020b0:	40016020 	.word	0x40016020
 80020b4:	40016420 	.word	0x40016420
 80020b8:	40016040 	.word	0x40016040
 80020bc:	40016440 	.word	0x40016440
 80020c0:	40016060 	.word	0x40016060
 80020c4:	40016460 	.word	0x40016460
 80020c8:	40016480 	.word	0x40016480
 80020cc:	400164a0 	.word	0x400164a0
 80020d0:	400164c0 	.word	0x400164c0

080020d4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d108      	bne.n	80020f6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e033      	b.n	800215e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002114:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800212c:	2b03      	cmp	r3, #3
 800212e:	d116      	bne.n	800215e <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0202 	orr.w	r2, r2, #2
 8002146:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <DFSDM_RegConvStart+0x84>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	e000      	b.n	800215a <DFSDM_RegConvStart+0x86>
 8002158:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <DFSDM_RegConvStart+0x98>
 8002168:	2202      	movs	r2, #2
 800216a:	e000      	b.n	800216e <DFSDM_RegConvStart+0x9a>
 800216c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff f8f4 	bl	8001378 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e099      	b.n	80022d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021bc:	e00f      	b.n	80021de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021be:	f7ff f8db 	bl	8001378 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d908      	bls.n	80021de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e078      	b.n	80022d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e8      	bne.n	80021be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_DMA_Init+0x158>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4313      	orrs	r3, r2
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2b04      	cmp	r3, #4
 8002270:	d117      	bne.n	80022a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fa91 	bl	80027ac <DMA_CheckFifoParam>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800229e:	2301      	movs	r3, #1
 80022a0:	e016      	b.n	80022d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa48 	bl	8002740 <DMA_CalcBaseAndBitshift>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	223f      	movs	r2, #63	; 0x3f
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	e010803f 	.word	0xe010803f

080022dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_DMA_Start_IT+0x26>
 80022fe:	2302      	movs	r3, #2
 8002300:	e040      	b.n	8002384 <HAL_DMA_Start_IT+0xa8>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12f      	bne.n	8002376 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f9da 	bl	80026e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	223f      	movs	r2, #63	; 0x3f
 8002336:	409a      	lsls	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0216 	orr.w	r2, r2, #22
 800234a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0208 	orr.w	r2, r2, #8
 8002362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e005      	b.n	8002382 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d004      	beq.n	80023aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00c      	b.n	80023c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_DMA_IRQHandler+0x258>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a92      	ldr	r2, [pc, #584]	; (800262c <HAL_DMA_IRQHandler+0x25c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2208      	movs	r2, #8
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d01a      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2208      	movs	r2, #8
 800242a:	409a      	lsls	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2201      	movs	r2, #1
 8002460:	409a      	lsls	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0202 	orr.w	r2, r3, #2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2204      	movs	r2, #4
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2204      	movs	r2, #4
 8002496:	409a      	lsls	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	2210      	movs	r2, #16
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d043      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d03c      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2210      	movs	r2, #16
 80024cc:	409a      	lsls	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d018      	beq.n	8002512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e01f      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e016      	b.n	8002540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0208 	bic.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	2220      	movs	r2, #32
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 808e 	beq.w	800266e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8086 	beq.w	800266e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002566:	2220      	movs	r2, #32
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d136      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0216 	bic.w	r2, r2, #22
 8002588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_DMA_IRQHandler+0x1da>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0208 	bic.w	r2, r2, #8
 80025b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	223f      	movs	r2, #63	; 0x3f
 80025c0:	409a      	lsls	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d07d      	beq.n	80026da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
        }
        return;
 80025e6:	e078      	b.n	80026da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01c      	beq.n	8002630 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	2b00      	cmp	r3, #0
 800260a:	d030      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e02b      	b.n	800266e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d027      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e022      	b.n	800266e <HAL_DMA_IRQHandler+0x29e>
 8002628:	20000000 	.word	0x20000000
 800262c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0210 	bic.w	r2, r2, #16
 800264c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	2b00      	cmp	r3, #0
 8002674:	d032      	beq.n	80026dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d022      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d307      	bcc.n	80026b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f2      	bne.n	800269a <HAL_DMA_IRQHandler+0x2ca>
 80026b4:	e000      	b.n	80026b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e000      	b.n	80026dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80026da:	bf00      	nop
    }
  }
}
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d108      	bne.n	8002724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002722:	e007      	b.n	8002734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3b10      	subs	r3, #16
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <DMA_CalcBaseAndBitshift+0x68>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d909      	bls.n	8002782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	659a      	str	r2, [r3, #88]	; 0x58
 8002780:	e007      	b.n	8002792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	aaaaaaab 	.word	0xaaaaaaab
 80027a8:	08004b94 	.word	0x08004b94

080027ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d855      	bhi.n	8002878 <DMA_CheckFifoParam+0xcc>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <DMA_CheckFifoParam+0x28>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f7 	.word	0x080027f7
 80027dc:	080027e5 	.word	0x080027e5
 80027e0:	08002879 	.word	0x08002879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d045      	beq.n	800287c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e042      	b.n	800287c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027fe:	d13f      	bne.n	8002880 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e03c      	b.n	8002880 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	d121      	bne.n	8002854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d836      	bhi.n	8002884 <DMA_CheckFifoParam+0xd8>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <DMA_CheckFifoParam+0x70>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	0800282d 	.word	0x0800282d
 8002820:	08002833 	.word	0x08002833
 8002824:	0800282d 	.word	0x0800282d
 8002828:	08002845 	.word	0x08002845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e02f      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e021      	b.n	8002888 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800284c:	d11e      	bne.n	800288c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002852:	e01b      	b.n	800288c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d902      	bls.n	8002860 <DMA_CheckFifoParam+0xb4>
 800285a:	2b03      	cmp	r3, #3
 800285c:	d003      	beq.n	8002866 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800285e:	e018      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e015      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
      break;
 8002876:	e00b      	b.n	8002890 <DMA_CheckFifoParam+0xe4>
      break;
 8002878:	bf00      	nop
 800287a:	e00a      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 800287c:	bf00      	nop
 800287e:	e008      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 8002880:	bf00      	nop
 8002882:	e006      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 8002884:	bf00      	nop
 8002886:	e004      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;   
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <DMA_CheckFifoParam+0xe6>
      break;
 8002890:	bf00      	nop
    }
  } 
  
  return status; 
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e165      	b.n	8002b88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8154 	bne.w	8002b82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00b      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ee:	2b11      	cmp	r3, #17
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d130      	bne.n	800295c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0xfc>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b12      	cmp	r3, #18
 800299a:	d123      	bne.n	80029e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	08da      	lsrs	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3208      	adds	r2, #8
 80029de:	69b9      	ldr	r1, [r7, #24]
 80029e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0203 	and.w	r2, r3, #3
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80ae 	beq.w	8002b82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <HAL_GPIO_Init+0x2fc>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <HAL_GPIO_Init+0x2fc>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_GPIO_Init+0x2fc>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a42:	4a57      	ldr	r2, [pc, #348]	; (8002ba0 <HAL_GPIO_Init+0x300>)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	; (8002ba4 <HAL_GPIO_Init+0x304>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d025      	beq.n	8002aba <HAL_GPIO_Init+0x21a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <HAL_GPIO_Init+0x308>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <HAL_GPIO_Init+0x216>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4c      	ldr	r2, [pc, #304]	; (8002bac <HAL_GPIO_Init+0x30c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_Init+0x212>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_GPIO_Init+0x310>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x20e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_GPIO_Init+0x314>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x20a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a49      	ldr	r2, [pc, #292]	; (8002bb8 <HAL_GPIO_Init+0x318>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x206>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_GPIO_Init+0x31c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x202>
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	e00c      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00a      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	e008      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	e006      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e004      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_GPIO_Init+0x21c>
 8002aba:	2300      	movs	r3, #0
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f002 0203 	and.w	r2, r2, #3
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	4093      	lsls	r3, r2
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002acc:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <HAL_GPIO_Init+0x300>)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002afe:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b04:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b28:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_GPIO_Init+0x320>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	2b0f      	cmp	r3, #15
 8002b8c:	f67f ae96 	bls.w	80028bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b90:	bf00      	nop
 8002b92:	3724      	adds	r7, #36	; 0x24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e11f      	b.n	8002e4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd ffae 	bl	8000b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f000 face 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a7b      	ldr	r2, [pc, #492]	; (8002e54 <HAL_I2C_Init+0x25c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a7a      	ldr	r2, [pc, #488]	; (8002e58 <HAL_I2C_Init+0x260>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a77      	ldr	r2, [pc, #476]	; (8002e5c <HAL_I2C_Init+0x264>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0db      	b.n	8002e4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a72      	ldr	r2, [pc, #456]	; (8002e60 <HAL_I2C_Init+0x268>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a64      	ldr	r2, [pc, #400]	; (8002e54 <HAL_I2C_Init+0x25c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <HAL_I2C_Init+0x26c>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4956      	ldr	r1, [pc, #344]	; (8002e54 <HAL_I2C_Init+0x25c>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d80d      	bhi.n	8002d1c <HAL_I2C_Init+0x124>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	bf38      	it	cc
 8002d18:	2304      	movcc	r3, #4
 8002d1a:	e04f      	b.n	8002dbc <HAL_I2C_Init+0x1c4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d111      	bne.n	8002d48 <HAL_I2C_Init+0x150>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1e58      	subs	r0, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e012      	b.n	8002d6e <HAL_I2C_Init+0x176>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x17e>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e022      	b.n	8002dbc <HAL_I2C_Init+0x1c4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10e      	bne.n	8002d9c <HAL_I2C_Init+0x1a4>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1e58      	subs	r0, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9a:	e00f      	b.n	8002dbc <HAL_I2C_Init+0x1c4>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	0099      	lsls	r1, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	6809      	ldr	r1, [r1, #0]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6911      	ldr	r1, [r2, #16]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	4311      	orrs	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	000186a0 	.word	0x000186a0
 8002e58:	001e847f 	.word	0x001e847f
 8002e5c:	003d08ff 	.word	0x003d08ff
 8002e60:	431bde83 	.word	0x431bde83
 8002e64:	10624dd3 	.word	0x10624dd3

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fa0e 	bl	8001378 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fe fa0a 	bl	8001378 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4601      	mov	r1, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f96e 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08004b7c 	.word	0x08004b7c
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d007      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x32>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d008      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x38>
 800305a:	2b00      	cmp	r3, #0
 800305c:	f040 80b4 	bne.w	80031c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003062:	60bb      	str	r3, [r7, #8]
       break;
 8003064:	e0b3      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003066:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003068:	60bb      	str	r3, [r7, #8]
      break;
 800306a:	e0b0      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d04a      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	ea03 0501 	and.w	r5, r3, r1
 8003098:	ea04 0602 	and.w	r6, r4, r2
 800309c:	4629      	mov	r1, r5
 800309e:	4632      	mov	r2, r6
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	0154      	lsls	r4, r2, #5
 80030aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ae:	014b      	lsls	r3, r1, #5
 80030b0:	4619      	mov	r1, r3
 80030b2:	4622      	mov	r2, r4
 80030b4:	1b49      	subs	r1, r1, r5
 80030b6:	eb62 0206 	sbc.w	r2, r2, r6
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	0194      	lsls	r4, r2, #6
 80030c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030c8:	018b      	lsls	r3, r1, #6
 80030ca:	1a5b      	subs	r3, r3, r1
 80030cc:	eb64 0402 	sbc.w	r4, r4, r2
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030de:	00d9      	lsls	r1, r3, #3
 80030e0:	460b      	mov	r3, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	195b      	adds	r3, r3, r5
 80030e6:	eb44 0406 	adc.w	r4, r4, r6
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	0262      	lsls	r2, r4, #9
 80030f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030f8:	0259      	lsls	r1, r3, #9
 80030fa:	460b      	mov	r3, r1
 80030fc:	4614      	mov	r4, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	4621      	mov	r1, r4
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 0400 	mov.w	r4, #0
 8003108:	461a      	mov	r2, r3
 800310a:	4623      	mov	r3, r4
 800310c:	f7fd f884 	bl	8000218 <__aeabi_uldivmod>
 8003110:	4603      	mov	r3, r0
 8003112:	460c      	mov	r4, r1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e049      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	f04f 0400 	mov.w	r4, #0
 8003122:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	ea03 0501 	and.w	r5, r3, r1
 800312e:	ea04 0602 	and.w	r6, r4, r2
 8003132:	4629      	mov	r1, r5
 8003134:	4632      	mov	r2, r6
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	0154      	lsls	r4, r2, #5
 8003140:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003144:	014b      	lsls	r3, r1, #5
 8003146:	4619      	mov	r1, r3
 8003148:	4622      	mov	r2, r4
 800314a:	1b49      	subs	r1, r1, r5
 800314c:	eb62 0206 	sbc.w	r2, r2, r6
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	f04f 0400 	mov.w	r4, #0
 8003158:	0194      	lsls	r4, r2, #6
 800315a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800315e:	018b      	lsls	r3, r1, #6
 8003160:	1a5b      	subs	r3, r3, r1
 8003162:	eb64 0402 	sbc.w	r4, r4, r2
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	00e2      	lsls	r2, r4, #3
 8003170:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003174:	00d9      	lsls	r1, r3, #3
 8003176:	460b      	mov	r3, r1
 8003178:	4614      	mov	r4, r2
 800317a:	195b      	adds	r3, r3, r5
 800317c:	eb44 0406 	adc.w	r4, r4, r6
 8003180:	f04f 0100 	mov.w	r1, #0
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	02a2      	lsls	r2, r4, #10
 800318a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800318e:	0299      	lsls	r1, r3, #10
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	4618      	mov	r0, r3
 8003196:	4621      	mov	r1, r4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	461a      	mov	r2, r3
 80031a0:	4623      	mov	r3, r4
 80031a2:	f7fd f839 	bl	8000218 <__aeabi_uldivmod>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08004b8c 	.word	0x08004b8c

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4601      	mov	r1, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08004b8c 	.word	0x08004b8c

0800324c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003270:	4b7a      	ldr	r3, [pc, #488]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003276:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4977      	ldr	r1, [pc, #476]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800328e:	2301      	movs	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800329e:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	496b      	ldr	r1, [pc, #428]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80032bc:	2301      	movs	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80032cc:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032da:	4960      	ldr	r1, [pc, #384]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80032f8:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80032fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	3b01      	subs	r3, #1
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	4954      	ldr	r1, [pc, #336]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d022      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800331e:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	494b      	ldr	r1, [pc, #300]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800334a:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	3b01      	subs	r3, #1
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	493f      	ldr	r1, [pc, #252]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 808a 	beq.w	8003486 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a33      	ldr	r2, [pc, #204]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800339a:	f7fd ffed 	bl	8001378 <HAL_GetTick>
 800339e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd ffe9 	bl	8001378 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1d1      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c0:	4b26      	ldr	r3, [pc, #152]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d028      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d114      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd ffb7 	bl	8001378 <HAL_GetTick>
 800340a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd ffb3 	bl	8001378 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e199      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d114      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	4902      	ldr	r1, [pc, #8]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]
 8003458:	e00c      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
 8003464:	42470e40 	.word	0x42470e40
 8003468:	4b89      	ldr	r3, [pc, #548]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a88      	ldr	r2, [pc, #544]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800346e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003472:	6093      	str	r3, [r2, #8]
 8003474:	4b86      	ldr	r3, [pc, #536]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	4983      	ldr	r1, [pc, #524]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003482:	4313      	orrs	r3, r2
 8003484:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003498:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800349a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4976      	ldr	r1, [pc, #472]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034ca:	4b71      	ldr	r3, [pc, #452]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	496d      	ldr	r1, [pc, #436]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003500:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	4961      	ldr	r1, [pc, #388]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d004      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	f040 80c6 	bne.w	80036ac <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003520:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003526:	f7fd ff27 	bl	8001378 <HAL_GetTick>
 800352a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800352e:	f7fd ff23 	bl	8001378 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e10b      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800354c:	4a53      	ldr	r2, [pc, #332]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003552:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d023      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d019      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003590:	d00e      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d019      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d115      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ae:	d110      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	071b      	lsls	r3, r3, #28
 80035ca:	4931      	ldr	r1, [pc, #196]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d026      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d122      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	0e1b      	lsrs	r3, r3, #24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	431a      	orrs	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	071b      	lsls	r3, r3, #28
 8003620:	491b      	ldr	r1, [pc, #108]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362e:	f023 021f 	bic.w	r2, r3, #31
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	3b01      	subs	r3, #1
 8003638:	4915      	ldr	r1, [pc, #84]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	071b      	lsls	r3, r3, #28
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003674:	f7fd fe80 	bl	8001378 <HAL_GetTick>
 8003678:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800367a:	e011      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800367c:	f7fd fe7c 	bl	8001378 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d90a      	bls.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e064      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	424711e0 	.word	0x424711e0
 8003698:	42470068 	.word	0x42470068
 800369c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0e7      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b8:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	4926      	ldr	r1, [pc, #152]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036da:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	491d      	ldr	r1, [pc, #116]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80036fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003702:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4915      	ldr	r1, [pc, #84]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	490c      	ldr	r1, [pc, #48]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4904      	ldr	r1, [pc, #16]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800

08003764 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d075      	beq.n	8003868 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800377c:	4ba2      	ldr	r3, [pc, #648]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003788:	4b9f      	ldr	r3, [pc, #636]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003794:	4b9c      	ldr	r3, [pc, #624]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a2:	4b99      	ldr	r3, [pc, #612]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d05b      	beq.n	8003866 <HAL_RCC_OscConfig+0x102>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d157      	bne.n	8003866 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e20b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x6e>
 80037c4:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a8f      	ldr	r2, [pc, #572]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e01d      	b.n	800380e <HAL_RCC_OscConfig+0xaa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x92>
 80037dc:	4b8a      	ldr	r3, [pc, #552]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a89      	ldr	r2, [pc, #548]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b87      	ldr	r3, [pc, #540]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a86      	ldr	r2, [pc, #536]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0xaa>
 80037f6:	4b84      	ldr	r3, [pc, #528]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a83      	ldr	r2, [pc, #524]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a80      	ldr	r2, [pc, #512]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d013      	beq.n	800383e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fd fdaf 	bl	8001378 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381e:	f7fd fdab 	bl	8001378 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	; 0x64
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e1d0      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003830:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0xba>
 800383c:	e014      	b.n	8003868 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd fd9b 	bl	8001378 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003846:	f7fd fd97 	bl	8001378 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b64      	cmp	r3, #100	; 0x64
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e1bc      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0xe2>
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d063      	beq.n	800393c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003880:	4b61      	ldr	r3, [pc, #388]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003888:	2b08      	cmp	r3, #8
 800388a:	d11c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388c:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_OscConfig+0x14c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e190      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4952      	ldr	r1, [pc, #328]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c4:	e03a      	b.n	800393c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ce:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_RCC_OscConfig+0x2a8>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fd fd50 	bl	8001378 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fd fd4c 	bl	8001378 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e171      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	493f      	ldr	r1, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
 800390e:	e015      	b.n	800393c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003910:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <HAL_RCC_OscConfig+0x2a8>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fd fd2f 	bl	8001378 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391e:	f7fd fd2b 	bl	8001378 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e150      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d030      	beq.n	80039aa <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd fd0f 	bl	8001378 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395e:	f7fd fd0b 	bl	8001378 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e130      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 8003972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x1fa>
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd fcf8 	bl	8001378 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398c:	f7fd fcf4 	bl	8001378 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e119      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 809f 	beq.w	8003af6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	; 0x40
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_OscConfig+0x2a4>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_RCC_OscConfig+0x2b0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d120      	bne.n	8003a36 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_RCC_OscConfig+0x2b0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <HAL_RCC_OscConfig+0x2b0>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a00:	f7fd fcba 	bl	8001378 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	e010      	b.n	8003a2a <HAL_RCC_OscConfig+0x2c6>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	42470e80 	.word	0x42470e80
 8003a14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7fd fcae 	bl	8001378 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0d3      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2e8>
 8003a3e:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	e01c      	b.n	8003a86 <HAL_RCC_OscConfig+0x322>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d10c      	bne.n	8003a6e <HAL_RCC_OscConfig+0x30a>
 8003a54:	4b62      	ldr	r3, [pc, #392]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a61      	ldr	r2, [pc, #388]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a60:	4b5f      	ldr	r3, [pc, #380]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6c:	e00b      	b.n	8003a86 <HAL_RCC_OscConfig+0x322>
 8003a6e:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a5b      	ldr	r2, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d015      	beq.n	8003aba <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fc73 	bl	8001378 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd fc6f 	bl	8001378 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e092      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ee      	beq.n	8003a96 <HAL_RCC_OscConfig+0x332>
 8003ab8:	e014      	b.n	8003ae4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fd fc5d 	bl	8001378 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fc59 	bl	8001378 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e07c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad8:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a3c      	ldr	r2, [pc, #240]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d068      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d060      	beq.n	8003bcc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d145      	bne.n	8003b9e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x480>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fd fc2e 	bl	8001378 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd fc2a 	bl	8001378 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04f      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	491d      	ldr	r1, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCC_OscConfig+0x480>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd fbff 	bl	8001378 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd fbfb 	bl	8001378 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e020      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x41a>
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_RCC_OscConfig+0x480>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fbe8 	bl	8001378 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fbe4 	bl	8001378 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e009      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_RCC_OscConfig+0x47c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x448>
 8003bca:	e001      	b.n	8003bd0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470060 	.word	0x42470060

08003be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01d      	b.n	8003c36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fa52 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 f82e 	bl	8003c88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d007      	beq.n	8003c70 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <TIM_Base_SetConfig+0x114>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a3d      	ldr	r2, [pc, #244]	; (8003da0 <TIM_Base_SetConfig+0x118>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3c      	ldr	r2, [pc, #240]	; (8003da4 <TIM_Base_SetConfig+0x11c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3b      	ldr	r2, [pc, #236]	; (8003da8 <TIM_Base_SetConfig+0x120>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3a      	ldr	r2, [pc, #232]	; (8003dac <TIM_Base_SetConfig+0x124>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <TIM_Base_SetConfig+0x114>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d02b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d027      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <TIM_Base_SetConfig+0x118>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d023      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <TIM_Base_SetConfig+0x11c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <TIM_Base_SetConfig+0x120>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <TIM_Base_SetConfig+0x124>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d017      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <TIM_Base_SetConfig+0x128>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a27      	ldr	r2, [pc, #156]	; (8003db4 <TIM_Base_SetConfig+0x12c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00f      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <TIM_Base_SetConfig+0x130>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <TIM_Base_SetConfig+0x134>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <TIM_Base_SetConfig+0x138>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <TIM_Base_SetConfig+0x13c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <TIM_Base_SetConfig+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0xf8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <TIM_Base_SetConfig+0x124>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40010400 	.word	0x40010400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800
 8003dbc:	40001800 	.word	0x40001800
 8003dc0:	40001c00 	.word	0x40001c00
 8003dc4:	40002000 	.word	0x40002000

08003dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e05a      	b.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d022      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d01d      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d018      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10c      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40010400 	.word	0x40010400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40001800 	.word	0x40001800

08003ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e03f      	b.n	8003f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd f932 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa69 	bl	80043dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10d      	bne.n	8003fae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_UART_IRQHandler+0x52>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f996 	bl	80042d8 <UART_Receive_IT>
      return;
 8003fac:	e0d1      	b.n	8004152 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80b0 	beq.w	8004116 <HAL_UART_IRQHandler+0x1ba>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_UART_IRQHandler+0x70>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a5 	beq.w	8004116 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_UART_IRQHandler+0x90>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_UART_IRQHandler+0xb0>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	f043 0202 	orr.w	r2, r3, #2
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_UART_IRQHandler+0xd0>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00f      	beq.n	8004056 <HAL_UART_IRQHandler+0xfa>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_UART_IRQHandler+0xee>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	f043 0208 	orr.w	r2, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d078      	beq.n	8004150 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_UART_IRQHandler+0x11c>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f930 	bl	80042d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <HAL_UART_IRQHandler+0x144>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d031      	beq.n	8004104 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f879 	bl	8004198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d123      	bne.n	80040fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_UART_IRQHandler+0x1fc>)
 80040d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe f957 	bl	800238c <HAL_DMA_Abort_IT>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ee:	4610      	mov	r0, r2
 80040f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f2:	e00e      	b.n	8004112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f845 	bl	8004184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fa:	e00a      	b.n	8004112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f841 	bl	8004184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	e006      	b.n	8004112 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f83d 	bl	8004184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004110:	e01e      	b.n	8004150 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004112:	bf00      	nop
    return;
 8004114:	e01c      	b.n	8004150 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_UART_IRQHandler+0x1d6>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f866 	bl	80041fc <UART_Transmit_IT>
    return;
 8004130:	e00f      	b.n	8004152 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_UART_IRQHandler+0x1f6>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8ae 	bl	80042a8 <UART_EndTransmit_IT>
    return;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004150:	bf00      	nop
  }
}
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	080041d5 	.word	0x080041d5

0800415c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ffc8 	bl	8004184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b21      	cmp	r3, #33	; 0x21
 800420e:	d144      	bne.n	800429a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004218:	d11a      	bne.n	8004250 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	621a      	str	r2, [r3, #32]
 8004242:	e00e      	b.n	8004262 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]
 800424e:	e008      	b.n	8004262 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	1c59      	adds	r1, r3, #1
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6211      	str	r1, [r2, #32]
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4619      	mov	r1, r3
 8004270:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff47 	bl	800415c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b22      	cmp	r3, #34	; 0x22
 80042ea:	d171      	bne.n	80043d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d123      	bne.n	800433e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10e      	bne.n	8004322 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
 8004320:	e029      	b.n	8004376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	b29b      	uxth	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
 800433c:	e01b      	b.n	8004376 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6858      	ldr	r0, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6291      	str	r1, [r2, #40]	; 0x28
 8004356:	b2c2      	uxtb	r2, r0
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e00c      	b.n	8004376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	1c58      	adds	r0, r3, #1
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	6288      	str	r0, [r1, #40]	; 0x28
 800436e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4619      	mov	r1, r3
 8004384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004386:	2b00      	cmp	r3, #0
 8004388:	d120      	bne.n	80043cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0220 	bic.w	r2, r2, #32
 8004398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fed4 	bl	8004170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e002      	b.n	80043d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800441e:	f023 030c 	bic.w	r3, r3, #12
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	430b      	orrs	r3, r1
 800442a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	f040 8199 	bne.w	8004780 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4ac6      	ldr	r2, [pc, #792]	; (800476c <UART_SetConfig+0x390>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00f      	beq.n	8004478 <UART_SetConfig+0x9c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4ac4      	ldr	r2, [pc, #784]	; (8004770 <UART_SetConfig+0x394>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00a      	beq.n	8004478 <UART_SetConfig+0x9c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4ac3      	ldr	r2, [pc, #780]	; (8004774 <UART_SetConfig+0x398>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d005      	beq.n	8004478 <UART_SetConfig+0x9c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4ac1      	ldr	r2, [pc, #772]	; (8004778 <UART_SetConfig+0x39c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	f040 80bd 	bne.w	80045f2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fed4 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 800447c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	461d      	mov	r5, r3
 8004482:	f04f 0600 	mov.w	r6, #0
 8004486:	46a8      	mov	r8, r5
 8004488:	46b1      	mov	r9, r6
 800448a:	eb18 0308 	adds.w	r3, r8, r8
 800448e:	eb49 0409 	adc.w	r4, r9, r9
 8004492:	4698      	mov	r8, r3
 8004494:	46a1      	mov	r9, r4
 8004496:	eb18 0805 	adds.w	r8, r8, r5
 800449a:	eb49 0906 	adc.w	r9, r9, r6
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044b2:	4688      	mov	r8, r1
 80044b4:	4691      	mov	r9, r2
 80044b6:	eb18 0005 	adds.w	r0, r8, r5
 80044ba:	eb49 0106 	adc.w	r1, r9, r6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	461d      	mov	r5, r3
 80044c4:	f04f 0600 	mov.w	r6, #0
 80044c8:	196b      	adds	r3, r5, r5
 80044ca:	eb46 0406 	adc.w	r4, r6, r6
 80044ce:	461a      	mov	r2, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	f7fb fea1 	bl	8000218 <__aeabi_uldivmod>
 80044d6:	4603      	mov	r3, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	461a      	mov	r2, r3
 80044dc:	4ba7      	ldr	r3, [pc, #668]	; (800477c <UART_SetConfig+0x3a0>)
 80044de:	fba3 2302 	umull	r2, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	461d      	mov	r5, r3
 80044ec:	f04f 0600 	mov.w	r6, #0
 80044f0:	46a9      	mov	r9, r5
 80044f2:	46b2      	mov	sl, r6
 80044f4:	eb19 0309 	adds.w	r3, r9, r9
 80044f8:	eb4a 040a 	adc.w	r4, sl, sl
 80044fc:	4699      	mov	r9, r3
 80044fe:	46a2      	mov	sl, r4
 8004500:	eb19 0905 	adds.w	r9, r9, r5
 8004504:	eb4a 0a06 	adc.w	sl, sl, r6
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800451c:	4689      	mov	r9, r1
 800451e:	4692      	mov	sl, r2
 8004520:	eb19 0005 	adds.w	r0, r9, r5
 8004524:	eb4a 0106 	adc.w	r1, sl, r6
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	461d      	mov	r5, r3
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	196b      	adds	r3, r5, r5
 8004534:	eb46 0406 	adc.w	r4, r6, r6
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	f7fb fe6c 	bl	8000218 <__aeabi_uldivmod>
 8004540:	4603      	mov	r3, r0
 8004542:	460c      	mov	r4, r1
 8004544:	461a      	mov	r2, r3
 8004546:	4b8d      	ldr	r3, [pc, #564]	; (800477c <UART_SetConfig+0x3a0>)
 8004548:	fba3 1302 	umull	r1, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	2164      	movs	r1, #100	; 0x64
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3332      	adds	r3, #50	; 0x32
 800455a:	4a88      	ldr	r2, [pc, #544]	; (800477c <UART_SetConfig+0x3a0>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004568:	4498      	add	r8, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	461d      	mov	r5, r3
 800456e:	f04f 0600 	mov.w	r6, #0
 8004572:	46a9      	mov	r9, r5
 8004574:	46b2      	mov	sl, r6
 8004576:	eb19 0309 	adds.w	r3, r9, r9
 800457a:	eb4a 040a 	adc.w	r4, sl, sl
 800457e:	4699      	mov	r9, r3
 8004580:	46a2      	mov	sl, r4
 8004582:	eb19 0905 	adds.w	r9, r9, r5
 8004586:	eb4a 0a06 	adc.w	sl, sl, r6
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004596:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800459a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800459e:	4689      	mov	r9, r1
 80045a0:	4692      	mov	sl, r2
 80045a2:	eb19 0005 	adds.w	r0, r9, r5
 80045a6:	eb4a 0106 	adc.w	r1, sl, r6
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	461d      	mov	r5, r3
 80045b0:	f04f 0600 	mov.w	r6, #0
 80045b4:	196b      	adds	r3, r5, r5
 80045b6:	eb46 0406 	adc.w	r4, r6, r6
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	f7fb fe2b 	bl	8000218 <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b6c      	ldr	r3, [pc, #432]	; (800477c <UART_SetConfig+0x3a0>)
 80045ca:	fba3 1302 	umull	r1, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2164      	movs	r1, #100	; 0x64
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	3332      	adds	r3, #50	; 0x32
 80045dc:	4a67      	ldr	r2, [pc, #412]	; (800477c <UART_SetConfig+0x3a0>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 0207 	and.w	r2, r3, #7
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4442      	add	r2, r8
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	e27d      	b.n	8004aee <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045f2:	f7fe fe03 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 80045f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	461d      	mov	r5, r3
 80045fc:	f04f 0600 	mov.w	r6, #0
 8004600:	46a8      	mov	r8, r5
 8004602:	46b1      	mov	r9, r6
 8004604:	eb18 0308 	adds.w	r3, r8, r8
 8004608:	eb49 0409 	adc.w	r4, r9, r9
 800460c:	4698      	mov	r8, r3
 800460e:	46a1      	mov	r9, r4
 8004610:	eb18 0805 	adds.w	r8, r8, r5
 8004614:	eb49 0906 	adc.w	r9, r9, r6
 8004618:	f04f 0100 	mov.w	r1, #0
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004624:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004628:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800462c:	4688      	mov	r8, r1
 800462e:	4691      	mov	r9, r2
 8004630:	eb18 0005 	adds.w	r0, r8, r5
 8004634:	eb49 0106 	adc.w	r1, r9, r6
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	196b      	adds	r3, r5, r5
 8004644:	eb46 0406 	adc.w	r4, r6, r6
 8004648:	461a      	mov	r2, r3
 800464a:	4623      	mov	r3, r4
 800464c:	f7fb fde4 	bl	8000218 <__aeabi_uldivmod>
 8004650:	4603      	mov	r3, r0
 8004652:	460c      	mov	r4, r1
 8004654:	461a      	mov	r2, r3
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <UART_SetConfig+0x3a0>)
 8004658:	fba3 2302 	umull	r2, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	461d      	mov	r5, r3
 8004666:	f04f 0600 	mov.w	r6, #0
 800466a:	46a9      	mov	r9, r5
 800466c:	46b2      	mov	sl, r6
 800466e:	eb19 0309 	adds.w	r3, r9, r9
 8004672:	eb4a 040a 	adc.w	r4, sl, sl
 8004676:	4699      	mov	r9, r3
 8004678:	46a2      	mov	sl, r4
 800467a:	eb19 0905 	adds.w	r9, r9, r5
 800467e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800468e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004692:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004696:	4689      	mov	r9, r1
 8004698:	4692      	mov	sl, r2
 800469a:	eb19 0005 	adds.w	r0, r9, r5
 800469e:	eb4a 0106 	adc.w	r1, sl, r6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	461d      	mov	r5, r3
 80046a8:	f04f 0600 	mov.w	r6, #0
 80046ac:	196b      	adds	r3, r5, r5
 80046ae:	eb46 0406 	adc.w	r4, r6, r6
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	f7fb fdaf 	bl	8000218 <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	461a      	mov	r2, r3
 80046c0:	4b2e      	ldr	r3, [pc, #184]	; (800477c <UART_SetConfig+0x3a0>)
 80046c2:	fba3 1302 	umull	r1, r3, r3, r2
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2164      	movs	r1, #100	; 0x64
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	3332      	adds	r3, #50	; 0x32
 80046d4:	4a29      	ldr	r2, [pc, #164]	; (800477c <UART_SetConfig+0x3a0>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046e2:	4498      	add	r8, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	461d      	mov	r5, r3
 80046e8:	f04f 0600 	mov.w	r6, #0
 80046ec:	46a9      	mov	r9, r5
 80046ee:	46b2      	mov	sl, r6
 80046f0:	eb19 0309 	adds.w	r3, r9, r9
 80046f4:	eb4a 040a 	adc.w	r4, sl, sl
 80046f8:	4699      	mov	r9, r3
 80046fa:	46a2      	mov	sl, r4
 80046fc:	eb19 0905 	adds.w	r9, r9, r5
 8004700:	eb4a 0a06 	adc.w	sl, sl, r6
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004718:	4689      	mov	r9, r1
 800471a:	4692      	mov	sl, r2
 800471c:	eb19 0005 	adds.w	r0, r9, r5
 8004720:	eb4a 0106 	adc.w	r1, sl, r6
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	461d      	mov	r5, r3
 800472a:	f04f 0600 	mov.w	r6, #0
 800472e:	196b      	adds	r3, r5, r5
 8004730:	eb46 0406 	adc.w	r4, r6, r6
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	f7fb fd6e 	bl	8000218 <__aeabi_uldivmod>
 800473c:	4603      	mov	r3, r0
 800473e:	460c      	mov	r4, r1
 8004740:	461a      	mov	r2, r3
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <UART_SetConfig+0x3a0>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3332      	adds	r3, #50	; 0x32
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <UART_SetConfig+0x3a0>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0207 	and.w	r2, r3, #7
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4442      	add	r2, r8
 8004768:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800476a:	e1c0      	b.n	8004aee <UART_SetConfig+0x712>
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	40011800 	.word	0x40011800
 8004778:	40011c00 	.word	0x40011c00
 800477c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4adc      	ldr	r2, [pc, #880]	; (8004af8 <UART_SetConfig+0x71c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <UART_SetConfig+0x3ce>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4adb      	ldr	r2, [pc, #876]	; (8004afc <UART_SetConfig+0x720>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00a      	beq.n	80047aa <UART_SetConfig+0x3ce>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4ad9      	ldr	r2, [pc, #868]	; (8004b00 <UART_SetConfig+0x724>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d005      	beq.n	80047aa <UART_SetConfig+0x3ce>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4ad8      	ldr	r2, [pc, #864]	; (8004b04 <UART_SetConfig+0x728>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	f040 80d1 	bne.w	800494c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80047aa:	f7fe fd3b 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 80047ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	469a      	mov	sl, r3
 80047b4:	f04f 0b00 	mov.w	fp, #0
 80047b8:	46d0      	mov	r8, sl
 80047ba:	46d9      	mov	r9, fp
 80047bc:	eb18 0308 	adds.w	r3, r8, r8
 80047c0:	eb49 0409 	adc.w	r4, r9, r9
 80047c4:	4698      	mov	r8, r3
 80047c6:	46a1      	mov	r9, r4
 80047c8:	eb18 080a 	adds.w	r8, r8, sl
 80047cc:	eb49 090b 	adc.w	r9, r9, fp
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047e4:	4688      	mov	r8, r1
 80047e6:	4691      	mov	r9, r2
 80047e8:	eb1a 0508 	adds.w	r5, sl, r8
 80047ec:	eb4b 0609 	adc.w	r6, fp, r9
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4619      	mov	r1, r3
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	f04f 0400 	mov.w	r4, #0
 8004802:	0094      	lsls	r4, r2, #2
 8004804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004808:	008b      	lsls	r3, r1, #2
 800480a:	461a      	mov	r2, r3
 800480c:	4623      	mov	r3, r4
 800480e:	4628      	mov	r0, r5
 8004810:	4631      	mov	r1, r6
 8004812:	f7fb fd01 	bl	8000218 <__aeabi_uldivmod>
 8004816:	4603      	mov	r3, r0
 8004818:	460c      	mov	r4, r1
 800481a:	461a      	mov	r2, r3
 800481c:	4bba      	ldr	r3, [pc, #744]	; (8004b08 <UART_SetConfig+0x72c>)
 800481e:	fba3 2302 	umull	r2, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	469b      	mov	fp, r3
 800482c:	f04f 0c00 	mov.w	ip, #0
 8004830:	46d9      	mov	r9, fp
 8004832:	46e2      	mov	sl, ip
 8004834:	eb19 0309 	adds.w	r3, r9, r9
 8004838:	eb4a 040a 	adc.w	r4, sl, sl
 800483c:	4699      	mov	r9, r3
 800483e:	46a2      	mov	sl, r4
 8004840:	eb19 090b 	adds.w	r9, r9, fp
 8004844:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800485c:	4689      	mov	r9, r1
 800485e:	4692      	mov	sl, r2
 8004860:	eb1b 0509 	adds.w	r5, fp, r9
 8004864:	eb4c 060a 	adc.w	r6, ip, sl
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4619      	mov	r1, r3
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	f04f 0400 	mov.w	r4, #0
 800487a:	0094      	lsls	r4, r2, #2
 800487c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004880:	008b      	lsls	r3, r1, #2
 8004882:	461a      	mov	r2, r3
 8004884:	4623      	mov	r3, r4
 8004886:	4628      	mov	r0, r5
 8004888:	4631      	mov	r1, r6
 800488a:	f7fb fcc5 	bl	8000218 <__aeabi_uldivmod>
 800488e:	4603      	mov	r3, r0
 8004890:	460c      	mov	r4, r1
 8004892:	461a      	mov	r2, r3
 8004894:	4b9c      	ldr	r3, [pc, #624]	; (8004b08 <UART_SetConfig+0x72c>)
 8004896:	fba3 1302 	umull	r1, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2164      	movs	r1, #100	; 0x64
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	; 0x32
 80048a8:	4a97      	ldr	r2, [pc, #604]	; (8004b08 <UART_SetConfig+0x72c>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b4:	4498      	add	r8, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	469b      	mov	fp, r3
 80048ba:	f04f 0c00 	mov.w	ip, #0
 80048be:	46d9      	mov	r9, fp
 80048c0:	46e2      	mov	sl, ip
 80048c2:	eb19 0309 	adds.w	r3, r9, r9
 80048c6:	eb4a 040a 	adc.w	r4, sl, sl
 80048ca:	4699      	mov	r9, r3
 80048cc:	46a2      	mov	sl, r4
 80048ce:	eb19 090b 	adds.w	r9, r9, fp
 80048d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ea:	4689      	mov	r9, r1
 80048ec:	4692      	mov	sl, r2
 80048ee:	eb1b 0509 	adds.w	r5, fp, r9
 80048f2:	eb4c 060a 	adc.w	r6, ip, sl
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4619      	mov	r1, r3
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	f04f 0400 	mov.w	r4, #0
 8004908:	0094      	lsls	r4, r2, #2
 800490a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800490e:	008b      	lsls	r3, r1, #2
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	4628      	mov	r0, r5
 8004916:	4631      	mov	r1, r6
 8004918:	f7fb fc7e 	bl	8000218 <__aeabi_uldivmod>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	461a      	mov	r2, r3
 8004922:	4b79      	ldr	r3, [pc, #484]	; (8004b08 <UART_SetConfig+0x72c>)
 8004924:	fba3 1302 	umull	r1, r3, r3, r2
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	2164      	movs	r1, #100	; 0x64
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	3332      	adds	r3, #50	; 0x32
 8004936:	4a74      	ldr	r2, [pc, #464]	; (8004b08 <UART_SetConfig+0x72c>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4442      	add	r2, r8
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	e0d0      	b.n	8004aee <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fe fc56 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8004950:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	469a      	mov	sl, r3
 8004956:	f04f 0b00 	mov.w	fp, #0
 800495a:	46d0      	mov	r8, sl
 800495c:	46d9      	mov	r9, fp
 800495e:	eb18 0308 	adds.w	r3, r8, r8
 8004962:	eb49 0409 	adc.w	r4, r9, r9
 8004966:	4698      	mov	r8, r3
 8004968:	46a1      	mov	r9, r4
 800496a:	eb18 080a 	adds.w	r8, r8, sl
 800496e:	eb49 090b 	adc.w	r9, r9, fp
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800497e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004982:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004986:	4688      	mov	r8, r1
 8004988:	4691      	mov	r9, r2
 800498a:	eb1a 0508 	adds.w	r5, sl, r8
 800498e:	eb4b 0609 	adc.w	r6, fp, r9
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4619      	mov	r1, r3
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	f04f 0400 	mov.w	r4, #0
 80049a4:	0094      	lsls	r4, r2, #2
 80049a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4623      	mov	r3, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	4631      	mov	r1, r6
 80049b4:	f7fb fc30 	bl	8000218 <__aeabi_uldivmod>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	461a      	mov	r2, r3
 80049be:	4b52      	ldr	r3, [pc, #328]	; (8004b08 <UART_SetConfig+0x72c>)
 80049c0:	fba3 2302 	umull	r2, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	469b      	mov	fp, r3
 80049ce:	f04f 0c00 	mov.w	ip, #0
 80049d2:	46d9      	mov	r9, fp
 80049d4:	46e2      	mov	sl, ip
 80049d6:	eb19 0309 	adds.w	r3, r9, r9
 80049da:	eb4a 040a 	adc.w	r4, sl, sl
 80049de:	4699      	mov	r9, r3
 80049e0:	46a2      	mov	sl, r4
 80049e2:	eb19 090b 	adds.w	r9, r9, fp
 80049e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049fe:	4689      	mov	r9, r1
 8004a00:	4692      	mov	sl, r2
 8004a02:	eb1b 0509 	adds.w	r5, fp, r9
 8004a06:	eb4c 060a 	adc.w	r6, ip, sl
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	f04f 0400 	mov.w	r4, #0
 8004a1c:	0094      	lsls	r4, r2, #2
 8004a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a22:	008b      	lsls	r3, r1, #2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	f7fb fbf4 	bl	8000218 <__aeabi_uldivmod>
 8004a30:	4603      	mov	r3, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <UART_SetConfig+0x72c>)
 8004a38:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	3332      	adds	r3, #50	; 0x32
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <UART_SetConfig+0x72c>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a56:	4498      	add	r8, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	469b      	mov	fp, r3
 8004a5c:	f04f 0c00 	mov.w	ip, #0
 8004a60:	46d9      	mov	r9, fp
 8004a62:	46e2      	mov	sl, ip
 8004a64:	eb19 0309 	adds.w	r3, r9, r9
 8004a68:	eb4a 040a 	adc.w	r4, sl, sl
 8004a6c:	4699      	mov	r9, r3
 8004a6e:	46a2      	mov	sl, r4
 8004a70:	eb19 090b 	adds.w	r9, r9, fp
 8004a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a8c:	4689      	mov	r9, r1
 8004a8e:	4692      	mov	sl, r2
 8004a90:	eb1b 0509 	adds.w	r5, fp, r9
 8004a94:	eb4c 060a 	adc.w	r6, ip, sl
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	f04f 0400 	mov.w	r4, #0
 8004aaa:	0094      	lsls	r4, r2, #2
 8004aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ab0:	008b      	lsls	r3, r1, #2
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	4631      	mov	r1, r6
 8004aba:	f7fb fbad 	bl	8000218 <__aeabi_uldivmod>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <UART_SetConfig+0x72c>)
 8004ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2164      	movs	r1, #100	; 0x64
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	3332      	adds	r3, #50	; 0x32
 8004ad8:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <UART_SetConfig+0x72c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4442      	add	r2, r8
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	e7ff      	b.n	8004aee <UART_SetConfig+0x712>
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af8:	40011000 	.word	0x40011000
 8004afc:	40011400 	.word	0x40011400
 8004b00:	40011800 	.word	0x40011800
 8004b04:	40011c00 	.word	0x40011c00
 8004b08:	51eb851f 	.word	0x51eb851f

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4e0d      	ldr	r6, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1ba4      	subs	r4, r4, r6
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2500      	movs	r5, #0
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4e0b      	ldr	r6, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f820 	bl	8004b64 <_init>
 8004b24:	1ba4      	subs	r4, r4, r6
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2500      	movs	r5, #0
 8004b2a:	42a5      	cmp	r5, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b34:	4798      	blx	r3
 8004b36:	3501      	adds	r5, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b3e:	4798      	blx	r3
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004ba4 	.word	0x08004ba4
 8004b48:	08004ba4 	.word	0x08004ba4
 8004b4c:	08004ba4 	.word	0x08004ba4
 8004b50:	08004ba8 	.word	0x08004ba8

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
