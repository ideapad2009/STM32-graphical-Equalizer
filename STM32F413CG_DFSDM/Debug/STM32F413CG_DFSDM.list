
STM32F413CG_DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e1c  08004e1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e24  08004e24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  2000000c  08004e38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  08004e38  00020b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011393  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027d7  00000000  00000000  000313cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023006  00000000  00000000  000354d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e5de  00000000  00000000  000584d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d38be  00000000  00000000  00066ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000350c  00000000  00000000  0013a3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004dd0 	.word	0x08004dd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004dd0 	.word	0x08004dd0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Codec_Reset>:
	0x001	// Reg 09: Active Control
};


void Codec_Reset(I2C_HandleTypeDef *i2c_handle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t status =0;
 8000520:	2300      	movs	r3, #0
 8000522:	73bb      	strb	r3, [r7, #14]
	i2cx = *i2c_handle;
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <Codec_Reset+0x78>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4610      	mov	r0, r2
 800052a:	4619      	mov	r1, r3
 800052c:	2354      	movs	r3, #84	; 0x54
 800052e:	461a      	mov	r2, r3
 8000530:	f004 fc3a 	bl	8004da8 <memcpy>
	Codec_WriteRegister(0x0F, 0x00);
 8000534:	2100      	movs	r1, #0
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f82e 	bl	8000598 <Codec_WriteRegister>

	/* Load default values */
	for(i=0;i<W8731_NUM_REGS;i++)
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e01f      	b.n	8000582 <Codec_Reset+0x6a>
	{
		HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fef4 	bl	8001330 <HAL_Delay>

		status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <Codec_Reset+0x7c>)
 800054c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f81f 	bl	8000598 <Codec_WriteRegister>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 800055e:	e00a      	b.n	8000576 <Codec_Reset+0x5e>
			status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <Codec_Reset+0x7c>)
 8000564:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f813 	bl	8000598 <Codec_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f1      	beq.n	8000560 <Codec_Reset+0x48>
	for(i=0;i<W8731_NUM_REGS;i++)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d9dc      	bls.n	8000542 <Codec_Reset+0x2a>
		}

	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000028 	.word	0x20000028
 8000594:	08004de8 	.word	0x08004de8

08000598 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint32_t result = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	// RegisterValue is 9-bit register
	/* Assemble 2-byte data in WM8731 format */
	uint8_t Byte1 = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x1);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	72fb      	strb	r3, [r7, #11]
	uint8_t Byte2 = RegisterValue&0xFF;
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	72bb      	strb	r3, [r7, #10]
	iData[0] = Byte1;
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <Codec_WriteRegister+0x80>)
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	7013      	strb	r3, [r2, #0]
	iData[1] = Byte2;
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <Codec_WriteRegister+0x80>)
 80005d2:	7abb      	ldrb	r3, [r7, #10]
 80005d4:	7053      	strb	r3, [r2, #1]
	/* Transmit the slave address and enable writing operation */
	// take the most significant 7 bit address in the address byte
	if (HAL_I2C_Master_Transmit(&i2cx, CODEC_ADDRESS, iData, 2, 1000) != HAL_OK)
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Codec_WriteRegister+0x80>)
 80005e0:	2134      	movs	r1, #52	; 0x34
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <Codec_WriteRegister+0x84>)
 80005e4:	f002 f9c2 	bl	800296c <HAL_I2C_Master_Transmit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <Codec_WriteRegister+0x66>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Codec_WriteRegister+0x88>)
 80005f4:	f002 f868 	bl	80026c8 <HAL_GPIO_WritePin>

		result = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e006      	b.n	800060c <Codec_WriteRegister+0x74>
		}
	else {

		result =1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2120      	movs	r1, #32
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <Codec_WriteRegister+0x88>)
 8000608:	f002 f85e 	bl	80026c8 <HAL_GPIO_WritePin>
	}

	return result;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	20000028 	.word	0x20000028
 8000620:	40020000 	.word	0x40020000

08000624 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800062a:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <MX_DFSDM1_Init+0xbc>)
 800062c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800063c:	2201      	movs	r2, #1
 800063e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000646:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000650:	2201      	movs	r2, #1
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000656:	f001 f88f 	bl	8001778 <HAL_DFSDM_FilterInit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000660:	f000 fd1e 	bl	80010a0 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <MX_DFSDM1_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800066c:	2201      	movs	r2, #1
 800066e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800067a:	2214      	movs	r2, #20
 800067c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000698:	2204      	movs	r2, #4
 800069a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift =0;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b6:	f000 ff6f 	bl	8001598 <HAL_DFSDM_ChannelInit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80006c0:	f000 fcee 	bl	80010a0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80006c4:	2201      	movs	r2, #1
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <MX_DFSDM1_Init+0xc8>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 80006ca:	f001 f941 	bl	8001950 <HAL_DFSDM_FilterConfigRegChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80006d4:	f000 fce4 	bl	80010a0 <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000940 	.word	0x20000940
 80006e0:	40016100 	.word	0x40016100
 80006e4:	20000908 	.word	0x20000908
 80006e8:	40016020 	.word	0x40016020
 80006ec:	00010002 	.word	0x00010002

080006f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(dfsdm_filterHandle->Instance))&&(DFSDM1_Init == 0))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a53      	ldr	r2, [pc, #332]	; (800085c <HAL_DFSDM_FilterMspInit+0x16c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <HAL_DFSDM_FilterMspInit+0x2c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a52      	ldr	r2, [pc, #328]	; (8000860 <HAL_DFSDM_FilterMspInit+0x170>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d15d      	bne.n	80007d8 <HAL_DFSDM_FilterMspInit+0xe8>
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d159      	bne.n	80007d8 <HAL_DFSDM_FilterMspInit+0xe8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 800072c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800072e:	4b4e      	ldr	r3, [pc, #312]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10d      	bne.n	8000752 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b4c      	ldr	r3, [pc, #304]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a4b      	ldr	r2, [pc, #300]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b45      	ldr	r3, [pc, #276]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a44      	ldr	r2, [pc, #272]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b42      	ldr	r3, [pc, #264]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a3d      	ldr	r2, [pc, #244]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800079c:	230a      	movs	r3, #10
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	; (8000870 <HAL_DFSDM_FilterMspInit+0x180>)
 80007a8:	f001 fdfc 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007be:	2306      	movs	r3, #6
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	482a      	ldr	r0, [pc, #168]	; (8000874 <HAL_DFSDM_FilterMspInit+0x184>)
 80007ca:	f001 fdeb 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a23      	ldr	r2, [pc, #140]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 80007d6:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1f      	ldr	r2, [pc, #124]	; (800085c <HAL_DFSDM_FilterMspInit+0x16c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d137      	bne.n	8000852 <HAL_DFSDM_FilterMspInit+0x162>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007e4:	4a25      	ldr	r2, [pc, #148]	; (800087c <HAL_DFSDM_FilterMspInit+0x18c>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007ea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000802:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800080e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000812:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800081e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000822:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800082c:	f001 fa4c 	bl	8001cc8 <HAL_DMA_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_DFSDM_FilterMspInit+0x14a>
    {
      Error_Handler();
 8000836:	f000 fc33 	bl	80010a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40016100 	.word	0x40016100
 8000860:	40016180 	.word	0x40016180
 8000864:	20000084 	.word	0x20000084
 8000868:	20000080 	.word	0x20000080
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40020000 	.word	0x40020000
 8000878:	20000994 	.word	0x20000994
 800087c:	40026410 	.word	0x40026410

08000880 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(dfsdm_channelHandle->Instance))&&(DFSDM1_Init == 0))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a39      	ldr	r2, [pc, #228]	; (8000984 <HAL_DFSDM_ChannelMspInit+0x104>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d00e      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <HAL_DFSDM_ChannelMspInit+0x108>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d009      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a36      	ldr	r2, [pc, #216]	; (800098c <HAL_DFSDM_ChannelMspInit+0x10c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d004      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <HAL_DFSDM_ChannelMspInit+0x110>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d15d      	bne.n	800097c <HAL_DFSDM_ChannelMspInit+0xfc>
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d159      	bne.n	800097c <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10d      	bne.n	80008f6 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a2e      	ldr	r2, [pc, #184]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a20      	ldr	r2, [pc, #128]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000940:	230a      	movs	r3, #10
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <HAL_DFSDM_ChannelMspInit+0x120>)
 800094c:	f001 fd2a 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000962:	2306      	movs	r3, #6
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_DFSDM_ChannelMspInit+0x124>)
 800096e:	f001 fd19 	bl	80023a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 800097a:	6013      	str	r3, [r2, #0]
  }
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40016000 	.word	0x40016000
 8000988:	40016020 	.word	0x40016020
 800098c:	40016040 	.word	0x40016040
 8000990:	40016060 	.word	0x40016060
 8000994:	20000084 	.word	0x20000084
 8000998:	20000080 	.word	0x20000080
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40020000 	.word	0x40020000

080009a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_DMA_Init+0x78>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <MX_DMA_Init+0x78>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_DMA_Init+0x78>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_DMA_Init+0x78>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_DMA_Init+0x78>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_DMA_Init+0x78>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2010      	movs	r0, #16
 80009ec:	f000 fd9d 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f0:	2010      	movs	r0, #16
 80009f2:	f000 fdb6 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	202f      	movs	r0, #47	; 0x2f
 80009fc:	f000 fd95 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a00:	202f      	movs	r0, #47	; 0x2f
 8000a02:	f000 fdae 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2038      	movs	r0, #56	; 0x38
 8000a0c:	f000 fd8d 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a10:	2038      	movs	r0, #56	; 0x38
 8000a12:	f000 fda6 	bl	8001562 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_GPIO_Init+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2120      	movs	r1, #32
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <MX_GPIO_Init+0xc8>)
 8000a94:	f001 fe18 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0xcc>)
 8000aa0:	f001 fe12 	bl	80026c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_GPIO_Init+0xc8>)
 8000abc:	f001 fc72 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_GPIO_Init+0xcc>)
 8000ada:	f001 fc63 	bl	80023a4 <HAL_GPIO_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400

08000af4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C1_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C1_Init+0x50>)
 8000b32:	f001 fde3 	bl	80026fc <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 fab0 	bl	80010a0 <Error_Handler>
  }

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200009f4 	.word	0x200009f4
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_I2C_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23c0      	movs	r3, #192	; 0xc0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <HAL_I2C_MspInit+0x8c>)
 8000baa:	f001 fbfb 	bl	80023a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <MX_I2S3_Init+0x58>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c04:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c08:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c0c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_I2S3_Init+0x54>)
 8000c22:	f002 fad9 	bl	80031d8 <HAL_I2S_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c2c:	f000 fa38 	bl	80010a0 <Error_Handler>
  }

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000aa8 	.word	0x20000aa8
 8000c38:	40003c00 	.word	0x40003c00

08000c3c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <HAL_I2S_MspInit+0x124>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d17b      	bne.n	8000d56 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <HAL_I2S_MspInit+0x128>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 8000cb2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <HAL_I2S_MspInit+0x12c>)
 8000cd0:	f001 fb68 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481e      	ldr	r0, [pc, #120]	; (8000d6c <HAL_I2S_MspInit+0x130>)
 8000cf2:	f001 fb57 	bl	80023a4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <HAL_I2S_MspInit+0x138>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d24:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d32:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d3c:	f000 ffc4 	bl	8001cc8 <HAL_DMA_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8000d46:	f000 f9ab 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_I2S_MspInit+0x134>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40003c00 	.word	0x40003c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	20000a48 	.word	0x20000a48
 8000d74:	400260b8 	.word	0x400260b8

08000d78 <main>:
	}
	else {x=0;playSong();
	}
	}
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d7e:	f000 fa65 	bl	800124c <HAL_Init>
	SystemClock_Config();
 8000d82:	f000 f8f5 	bl	8000f70 <SystemClock_Config>
	MX_GPIO_Init();
 8000d86:	f7ff fe4d 	bl	8000a24 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d8a:	f7ff fe0d 	bl	80009a8 <MX_DMA_Init>
	MX_I2C1_Init();
 8000d8e:	f7ff feb1 	bl	8000af4 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000d92:	f7ff ff25 	bl	8000be0 <MX_I2S3_Init>
	MX_DFSDM1_Init();
 8000d96:	f7ff fc45 	bl	8000624 <MX_DFSDM1_Init>
	HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9e:	f000 fac7 	bl	8001330 <HAL_Delay>
	if (HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 1, 10) == HAL_OK){
 8000da2:	230a      	movs	r3, #10
 8000da4:	2201      	movs	r2, #1
 8000da6:	2134      	movs	r1, #52	; 0x34
 8000da8:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <main+0x150>)
 8000daa:	f001 fedd 	bl	8002b68 <HAL_I2C_IsDeviceReady>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <main+0x40>
		TestBlinking();
 8000db4:	f000 f8c4 	bl	8000f40 <TestBlinking>
	}
	Codec_Reset(&hi2c1);
 8000db8:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x150>)
 8000dba:	f7ff fbad 	bl	8000518 <Codec_Reset>
	arm_biquad_casd_df1_inst_q31 S1;
	  arm_biquad_casd_df1_inst_q31 S2;
	  arm_biquad_casd_df1_inst_q31 S3;
	arm_biquad_cascade_df1_init_f32(&S1, NUMSTAGES, &coeffTable[0],&biquadStateBand1Q31[0]);
 8000dbe:	f107 0020 	add.w	r0, r7, #32
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <main+0x154>)
 8000dc4:	4a42      	ldr	r2, [pc, #264]	; (8000ed0 <main+0x158>)
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f000 fa23 	bl	8001212 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S2, NUMSTAGES,&coeffTable[0],&biquadStateBand2Q31[0]);
 8000dcc:	f107 0010 	add.w	r0, r7, #16
 8000dd0:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <main+0x15c>)
 8000dd2:	4a3f      	ldr	r2, [pc, #252]	; (8000ed0 <main+0x158>)
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	f000 fa1c 	bl	8001212 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S3, NUMSTAGES,&coeffTable[0],&biquadStateBand3Q31[0]);
 8000dda:	4638      	mov	r0, r7
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <main+0x160>)
 8000dde:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <main+0x158>)
 8000de0:	2102      	movs	r1, #2
 8000de2:	f000 fa16 	bl	8001212 <arm_biquad_cascade_df1_init_f32>

	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000de6:	2264      	movs	r2, #100	; 0x64
 8000de8:	493c      	ldr	r1, [pc, #240]	; (8000edc <main+0x164>)
 8000dea:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <main+0x168>)
 8000dec:	f000 fdf6 	bl	80019dc <HAL_DFSDM_FilterRegularStart_DMA>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <main+0x82>
	{
		Error_Handler();
 8000df6:	f000 f953 	bl	80010a0 <Error_Handler>
	//playSong();
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2);
	while (1)
	{

		if((DmaRightRecHalfBuffCplt == 1))
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <main+0x16c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d12b      	bne.n	8000e5a <main+0xe2>
		{
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <main+0x170>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e01d      	b.n	8000e46 <main+0xce>
			{
				//uSample32=RightRecBuff[i]*3;
				PlayBuff[i*2]=RightRecBuff[i]*2;
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <main+0x170>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a33      	ldr	r2, [pc, #204]	; (8000edc <main+0x164>)
 8000e10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e14:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <main+0x170>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	0052      	lsls	r2, r2, #1
 8000e1c:	4933      	ldr	r1, [pc, #204]	; (8000eec <main+0x174>)
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				PlayBuff[(i*2)+1]=PlayBuff[i*2];
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <main+0x170>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	005a      	lsls	r2, r3, #1
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <main+0x170>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	3301      	adds	r3, #1
 8000e30:	492e      	ldr	r1, [pc, #184]	; (8000eec <main+0x174>)
 8000e32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e36:	492d      	ldr	r1, [pc, #180]	; (8000eec <main+0x174>)
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <main+0x170>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <main+0x170>)
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <main+0x170>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b31      	cmp	r3, #49	; 0x31
 8000e4c:	d9dd      	bls.n	8000e0a <main+0x92>
				{
					Error_Handler();
				}
				PlaybackStarted = 1;
			}*/
			DmaLeftRecHalfBuffCplt  = 0;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <main+0x178>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			DmaRightRecHalfBuffCplt = 0;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <main+0x16c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <main+0x17c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1cb      	bne.n	8000dfa <main+0x82>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <main+0x170>)
 8000e64:	2232      	movs	r2, #50	; 0x32
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e01d      	b.n	8000ea6 <main+0x12e>
			{
				//uSample32=RightRecBuff[i]*3;
				PlayBuff[i*2]=RightRecBuff[i]*2;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <main+0x170>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <main+0x164>)
 8000e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <main+0x170>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	0052      	lsls	r2, r2, #1
 8000e7c:	491b      	ldr	r1, [pc, #108]	; (8000eec <main+0x174>)
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				PlayBuff[(i*2)+1]=PlayBuff[i*2];
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <main+0x170>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	005a      	lsls	r2, r3, #1
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <main+0x170>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4916      	ldr	r1, [pc, #88]	; (8000eec <main+0x174>)
 8000e92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e96:	4915      	ldr	r1, [pc, #84]	; (8000eec <main+0x174>)
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <main+0x170>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <main+0x170>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <main+0x170>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	d9dd      	bls.n	8000e6a <main+0xf2>
			/*for(i = 0; i < AUDIO_REC*2; i++)
			{
				uSample32=PlayBuff[i];
				PlayBuff[i]=  uSample32 <<16 | uSample32 >>16;
			}*/
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&PlayBuff[0], AUDIO_REC*2);
 8000eae:	22c8      	movs	r2, #200	; 0xc8
 8000eb0:	490e      	ldr	r1, [pc, #56]	; (8000eec <main+0x174>)
 8000eb2:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <main+0x180>)
 8000eb4:	f002 faf2 	bl	800349c <HAL_I2S_Transmit_DMA>
			DmaLeftRecBuffCplt  = 0;
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <main+0x184>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
			DmaRightRecBuffCplt = 0;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <main+0x17c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 8000ec4:	e799      	b.n	8000dfa <main+0x82>
 8000ec6:	bf00      	nop
 8000ec8:	200009f4 	.word	0x200009f4
 8000ecc:	20000b1c 	.word	0x20000b1c
 8000ed0:	20000af0 	.word	0x20000af0
 8000ed4:	20000b60 	.word	0x20000b60
 8000ed8:	20000b40 	.word	0x20000b40
 8000edc:	20000088 	.word	0x20000088
 8000ee0:	20000940 	.word	0x20000940
 8000ee4:	2000085a 	.word	0x2000085a
 8000ee8:	20000b3c 	.word	0x20000b3c
 8000eec:	20000218 	.word	0x20000218
 8000ef0:	20000858 	.word	0x20000858
 8000ef4:	2000085b 	.word	0x2000085b
 8000ef8:	20000aa8 	.word	0x20000aa8
 8000efc:	20000859 	.word	0x20000859

08000f00 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
/*void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	playSong();
}*/
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
		DmaRightRecHalfBuffCplt = 1;
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2000085a 	.word	0x2000085a

08000f20 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	DmaRightRecBuffCplt = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2000085b 	.word	0x2000085b

08000f40 <TestBlinking>:
void TestBlinking(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <TestBlinking+0x2c>)
 8000f4a:	f001 fbbd 	bl	80026c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f52:	f000 f9ed 	bl	8001330 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2120      	movs	r1, #32
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <TestBlinking+0x2c>)
 8000f5c:	f001 fbb4 	bl	80026c8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f64:	f000 f9e4 	bl	8001330 <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020000 	.word	0x40020000

08000f70 <SystemClock_Config>:


#include"body_DFSDM_I2S_CMSIS.h"

void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0aa      	sub	sp, #168	; 0xa8
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f7a:	2234      	movs	r2, #52	; 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 ff1d 	bl	8004dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2258      	movs	r2, #88	; 0x58
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 ff0e 	bl	8004dbe <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <SystemClock_Config+0x128>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <SystemClock_Config+0x128>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b39      	ldr	r3, [pc, #228]	; (8001098 <SystemClock_Config+0x128>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <SystemClock_Config+0x12c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a35      	ldr	r2, [pc, #212]	; (800109c <SystemClock_Config+0x12c>)
 8000fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <SystemClock_Config+0x12c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000ffc:	2350      	movs	r3, #80	; 0x50
 8000ffe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 5;
 800100e:	2305      	movs	r3, #5
 8001010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001018:	4618      	mov	r0, r3
 800101a:	f003 fc5f 	bl	80048dc <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001024:	f000 f83c 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800103e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001042:	2103      	movs	r1, #3
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fe8f 	bl	8003d68 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001050:	f000 f826 	bl	80010a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8001054:	f240 3301 	movw	r3, #769	; 0x301
 8001058:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_DFSDM1_AUDIO;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 800105e:	230a      	movs	r3, #10
 8001060:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001062:	2305      	movs	r3, #5
 8001064:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 800106a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1;
 8001070:	2300      	movs	r3, #0
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001074:	2300      	movs	r3, #0
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f84f 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800108c:	f000 f808 	bl	80010a0 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	37a8      	adds	r7, #168	; 0xa8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  while(1){
	  TestBlinking();
 80010a4:	f7ff ff4c 	bl	8000f40 <TestBlinking>
 80010a8:	e7fc      	b.n	80010a4 <Error_Handler+0x4>
	...

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_MspInit+0x4c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 f8ce 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA1_Stream5_IRQHandler+0x10>)
 800115e:	f000 feb9 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000894 	.word	0x20000894

0800116c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <DMA1_Stream7_IRQHandler+0x10>)
 8001172:	f000 feaf 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000a48 	.word	0x20000a48

08001180 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <DMA2_Stream0_IRQHandler+0x10>)
 8001186:	f000 fea5 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000994 	.word	0x20000994

08001194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x28>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SystemInit+0x28>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SystemInit+0x28>)
 80011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ae:	609a      	str	r2, [r3, #8]
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80011c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011c6:	e003      	b.n	80011d0 <LoopCopyDataInit>

080011c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ce:	3104      	adds	r1, #4

080011d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d8:	d3f6      	bcc.n	80011c8 <CopyDataInit>
  ldr  r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011dc:	e002      	b.n	80011e4 <LoopFillZerobss>

080011de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80011de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011e0:	f842 3b04 	str.w	r3, [r2], #4

080011e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e8:	d3f9      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ea:	f7ff ffd3 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f003 fdb7 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fdc1 	bl	8000d78 <main>
  bx  lr    
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011f8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80011fc:	08004e2c 	.word	0x08004e2c
  ldr  r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001204:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001208:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800120c:	20000b84 	.word	0x20000b84

08001210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC_IRQHandler>

08001212 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
        arm_biquad_casd_df1_inst_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	460b      	mov	r3, r1
 8001220:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8001222:	7afa      	ldrb	r2, [r7, #11]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	461a      	mov	r2, r3
 8001234:	2100      	movs	r1, #0
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f003 fdc1 	bl	8004dbe <memset>

  /* Assign state pointer */
  S->pState = pState;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	605a      	str	r2, [r3, #4]
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f94d 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff ff14 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f965 	bl	800157e <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f92d 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000b80 	.word	0x20000b80

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000b80 	.word	0x20000b80

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_Delay+0x40>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000008 	.word	0x20000008

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0cf      	b.n	800174a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_DFSDM_ChannelInit+0x1bc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00e      	beq.n	80015d2 <HAL_DFSDM_ChannelInit+0x3a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_DFSDM_ChannelInit+0x1c0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d009      	beq.n	80015d2 <HAL_DFSDM_ChannelInit+0x3a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_DFSDM_ChannelInit+0x1c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d004      	beq.n	80015d2 <HAL_DFSDM_ChannelInit+0x3a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a64      	ldr	r2, [pc, #400]	; (8001760 <HAL_DFSDM_ChannelInit+0x1c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d106      	bne.n	80015e0 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_DFSDM_ChannelInit+0x1cc>)
 80015d4:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80015d6:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_DFSDM_ChannelInit+0x1d0>)
 80015d8:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80015da:	4b5e      	ldr	r3, [pc, #376]	; (8001754 <HAL_DFSDM_ChannelInit+0x1bc>)
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e005      	b.n	80015ec <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80015e0:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_DFSDM_ChannelInit+0x1d4>)
 80015e2:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80015e4:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_DFSDM_ChannelInit+0x1d8>)
 80015e6:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80015e8:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_DFSDM_ChannelInit+0x1dc>)
 80015ea:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 faaf 	bl	8001b54 <DFSDM_GetChannelFromInstance>
 80015f6:	4603      	mov	r3, r0
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0a0      	b.n	800174a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff f939 	bl	8000880 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d125      	bne.n	800166c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800167a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800168a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001690:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 020f 	bic.w	r2, r2, #15
 80016a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80016d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	3b01      	subs	r3, #1
 80016e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f002 0207 	and.w	r2, r2, #7
 80016fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001728:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fa0c 	bl	8001b54 <DFSDM_GetChannelFromInstance>
 800173c:	4603      	mov	r3, r0
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40016000 	.word	0x40016000
 8001758:	40016020 	.word	0x40016020
 800175c:	40016040 	.word	0x40016040
 8001760:	40016060 	.word	0x40016060
 8001764:	2000085c 	.word	0x2000085c
 8001768:	20000860 	.word	0x20000860
 800176c:	20000870 	.word	0x20000870
 8001770:	20000874 	.word	0x20000874
 8001774:	40016400 	.word	0x40016400

08001778 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0d9      	b.n	800193e <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_DFSDM_FilterInit+0x1d0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d109      	bne.n	80017a8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001798:	2b01      	cmp	r3, #1
 800179a:	d003      	beq.n	80017a4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0ca      	b.n	800193e <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a67      	ldr	r2, [pc, #412]	; (800194c <HAL_DFSDM_FilterInit+0x1d4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d109      	bne.n	80017c6 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d003      	beq.n	80017c2 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0bb      	b.n	800193e <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe ff86 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80017f2:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7a1b      	ldrb	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d108      	bne.n	800180e <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e007      	b.n	800181e <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800181c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7a5b      	ldrb	r3, [r3, #9]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e007      	b.n	8001848 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001846:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001856:	f023 0308 	bic.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d108      	bne.n	8001876 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7c1b      	ldrb	r3, [r3, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0210 	orr.w	r2, r2, #16
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e007      	b.n	80018a0 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0210 	bic.w	r2, r2, #16
 800189e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7c5b      	ldrb	r3, [r3, #17]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e007      	b.n	80018ca <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0220 	bic.w	r2, r2, #32
 80018c8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80018d8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80018dc:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6959      	ldr	r1, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80018f0:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80018f8:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7c1a      	ldrb	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40016100 	.word	0x40016100
 800194c:	40016500 	.word	0x40016500

08001950 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d02e      	beq.n	80019c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d029      	beq.n	80019c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10d      	bne.n	80019aa <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800199c:	431a      	orrs	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e00a      	b.n	80019c0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
 80019c6:	e001      	b.n	80019cc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d002      	beq.n	80019f8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	e066      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a0c:	d002      	beq.n	8001a14 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
 8001a12:	e05b      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10e      	bne.n	8001a3a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d002      	beq.n	8001a3a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
 8001a38:	e048      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a54:	d102      	bne.n	8001a5c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e037      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d004      	beq.n	8001a70 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d12b      	bne.n	8001ac8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001a7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a8a:	d101      	bne.n	8001a90 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001a8e:	e000      	b.n	8001a92 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001a90:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	331c      	adds	r3, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f000 f9bc 	bl	8001e24 <HAL_DMA_Start_IT>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001abe:	e005      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f8ab 	bl	8001c1c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001ac6:	e001      	b.n	8001acc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	08001b15 	.word	0x08001b15
 8001adc:	08001b31 	.word	0x08001b31
 8001ae0:	08001af9 	.word	0x08001af9

08001ae4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff f9fa 	bl	8000f00 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff f9fc 	bl	8000f20 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2203      	movs	r2, #3
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff ffcd 	bl	8001ae4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <DFSDM_GetChannelFromInstance+0x9c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d003      	beq.n	8001b6c <DFSDM_GetChannelFromInstance+0x18>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <DFSDM_GetChannelFromInstance+0xa0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d102      	bne.n	8001b72 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e037      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <DFSDM_GetChannelFromInstance+0xa4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d003      	beq.n	8001b82 <DFSDM_GetChannelFromInstance+0x2e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <DFSDM_GetChannelFromInstance+0xa8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e02c      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <DFSDM_GetChannelFromInstance+0xac>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <DFSDM_GetChannelFromInstance+0x44>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <DFSDM_GetChannelFromInstance+0xb0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d102      	bne.n	8001b9e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e021      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <DFSDM_GetChannelFromInstance+0xb4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d003      	beq.n	8001bae <DFSDM_GetChannelFromInstance+0x5a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <DFSDM_GetChannelFromInstance+0xb8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d102      	bne.n	8001bb4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e016      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <DFSDM_GetChannelFromInstance+0xbc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e00f      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <DFSDM_GetChannelFromInstance+0xc0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d102      	bne.n	8001bd0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e008      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <DFSDM_GetChannelFromInstance+0xc4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d102      	bne.n	8001bde <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8001bd8:	2306      	movs	r3, #6
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e001      	b.n	8001be2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8001bde:	2307      	movs	r3, #7
 8001be0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40016000 	.word	0x40016000
 8001bf4:	40016400 	.word	0x40016400
 8001bf8:	40016020 	.word	0x40016020
 8001bfc:	40016420 	.word	0x40016420
 8001c00:	40016040 	.word	0x40016040
 8001c04:	40016440 	.word	0x40016440
 8001c08:	40016060 	.word	0x40016060
 8001c0c:	40016460 	.word	0x40016460
 8001c10:	40016480 	.word	0x40016480
 8001c14:	400164a0 	.word	0x400164a0
 8001c18:	400164c0 	.word	0x400164c0

08001c1c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e033      	b.n	8001ca6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d116      	bne.n	8001ca6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0202 	orr.w	r2, r2, #2
 8001c8e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <DFSDM_RegConvStart+0x84>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	e000      	b.n	8001ca2 <DFSDM_RegConvStart+0x86>
 8001ca0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <DFSDM_RegConvStart+0x98>
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	e000      	b.n	8001cb6 <DFSDM_RegConvStart+0x9a>
 8001cb4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff fb20 	bl	8001318 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e099      	b.n	8001e18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d04:	e00f      	b.n	8001d26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d06:	f7ff fb07 	bl	8001318 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d908      	bls.n	8001d26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e078      	b.n	8001e18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e8      	bne.n	8001d06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_DMA_Init+0x158>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f023 0307 	bic.w	r3, r3, #7
 8001da6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d117      	bne.n	8001dea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fa6f 	bl	80022b0 <DMA_CheckFifoParam>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001de6:	2301      	movs	r3, #1
 8001de8:	e016      	b.n	8001e18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa26 	bl	8002244 <DMA_CalcBaseAndBitshift>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	e010803f 	.word	0xe010803f

08001e24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Start_IT+0x26>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e040      	b.n	8001ecc <HAL_DMA_Start_IT+0xa8>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d12f      	bne.n	8001ebe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2202      	movs	r2, #2
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f9b8 	bl	80021e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	223f      	movs	r2, #63	; 0x3f
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0216 	orr.w	r2, r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee0:	4b92      	ldr	r3, [pc, #584]	; (800212c <HAL_DMA_IRQHandler+0x258>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a92      	ldr	r2, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x25c>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2208      	movs	r2, #8
 8001f00:	409a      	lsls	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01a      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0204 	bic.w	r2, r2, #4
 8001f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2201      	movs	r2, #1
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d012      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00b      	beq.n	8001fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2204      	movs	r2, #4
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d043      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03c      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2210      	movs	r2, #16
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d108      	bne.n	8002004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d024      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
 8002002:	e01f      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
 8002014:	e016      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0208 	bic.w	r2, r2, #8
 8002032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2220      	movs	r2, #32
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 808e 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8086 	beq.w	8002172 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2220      	movs	r2, #32
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d136      	bne.n	80020ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0216 	bic.w	r2, r2, #22
 800208c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800209c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d103      	bne.n	80020ae <HAL_DMA_IRQHandler+0x1da>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	223f      	movs	r2, #63	; 0x3f
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07d      	beq.n	80021de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
        }
        return;
 80020ea:	e078      	b.n	80021de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01c      	beq.n	8002134 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d108      	bne.n	800211a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	2b00      	cmp	r3, #0
 800210e:	d030      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	e02b      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d027      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e022      	b.n	8002172 <HAL_DMA_IRQHandler+0x29e>
 800212c:	20000000 	.word	0x20000000
 8002130:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	2b00      	cmp	r3, #0
 8002178:	d032      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d022      	beq.n	80021cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2205      	movs	r2, #5
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d307      	bcc.n	80021ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f2      	bne.n	800219e <HAL_DMA_IRQHandler+0x2ca>
 80021b8:	e000      	b.n	80021bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021de:	bf00      	nop
    }
  }
}
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d108      	bne.n	8002228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002226:	e007      	b.n	8002238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3b10      	subs	r3, #16
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <DMA_CalcBaseAndBitshift+0x68>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d909      	bls.n	8002286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58
 8002284:	e007      	b.n	8002296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	aaaaaaab 	.word	0xaaaaaaab
 80022ac:	08004e14 	.word	0x08004e14

080022b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11f      	bne.n	800230a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d855      	bhi.n	800237c <DMA_CheckFifoParam+0xcc>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x28>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022fb 	.word	0x080022fb
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	0800237d 	.word	0x0800237d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d045      	beq.n	8002380 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e042      	b.n	8002380 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002302:	d13f      	bne.n	8002384 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e03c      	b.n	8002384 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d121      	bne.n	8002358 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d836      	bhi.n	8002388 <DMA_CheckFifoParam+0xd8>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x70>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002337 	.word	0x08002337
 8002328:	08002331 	.word	0x08002331
 800232c:	08002349 	.word	0x08002349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e02f      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002346:	e021      	b.n	800238c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002350:	d11e      	bne.n	8002390 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002356:	e01b      	b.n	8002390 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d902      	bls.n	8002364 <DMA_CheckFifoParam+0xb4>
 800235e:	2b03      	cmp	r3, #3
 8002360:	d003      	beq.n	800236a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002362:	e018      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e015      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e00b      	b.n	8002394 <DMA_CheckFifoParam+0xe4>
      break;
 800237c:	bf00      	nop
 800237e:	e00a      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002380:	bf00      	nop
 8002382:	e008      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002384:	bf00      	nop
 8002386:	e006      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002388:	bf00      	nop
 800238a:	e004      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 800238c:	bf00      	nop
 800238e:	e002      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;   
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002394:	bf00      	nop
    }
  } 
  
  return status; 
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e165      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8154 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00b      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0xfc>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80ae 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_GPIO_Init+0x2fc>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <HAL_GPIO_Init+0x2fc>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_GPIO_Init+0x2fc>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a57      	ldr	r2, [pc, #348]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_GPIO_Init+0x304>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d025      	beq.n	80025be <HAL_GPIO_Init+0x21a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_GPIO_Init+0x308>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d01f      	beq.n	80025ba <HAL_GPIO_Init+0x216>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x30c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d019      	beq.n	80025b6 <HAL_GPIO_Init+0x212>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_GPIO_Init+0x310>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_GPIO_Init+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_GPIO_Init+0x20a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a49      	ldr	r2, [pc, #292]	; (80026bc <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <HAL_GPIO_Init+0x206>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_GPIO_Init+0x202>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025a6:	2307      	movs	r3, #7
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x21c>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4934      	ldr	r1, [pc, #208]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_GPIO_Init+0x320>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_GPIO_Init+0x320>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262c:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <HAL_GPIO_Init+0x320>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_GPIO_Init+0x320>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_GPIO_Init+0x320>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae96 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	3724      	adds	r7, #36	; 0x24
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
 80026d4:	4613      	mov	r3, r2
 80026d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e4:	e003      	b.n	80026ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e11f      	b.n	800294e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fa14 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800275e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002760:	f001 fccc 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4a7b      	ldr	r2, [pc, #492]	; (8002958 <HAL_I2C_Init+0x25c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d807      	bhi.n	8002780 <HAL_I2C_Init+0x84>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a7a      	ldr	r2, [pc, #488]	; (800295c <HAL_I2C_Init+0x260>)
 8002774:	4293      	cmp	r3, r2
 8002776:	bf94      	ite	ls
 8002778:	2301      	movls	r3, #1
 800277a:	2300      	movhi	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e006      	b.n	800278e <HAL_I2C_Init+0x92>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a77      	ldr	r2, [pc, #476]	; (8002960 <HAL_I2C_Init+0x264>)
 8002784:	4293      	cmp	r3, r2
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0db      	b.n	800294e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a72      	ldr	r2, [pc, #456]	; (8002964 <HAL_I2C_Init+0x268>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
 80027a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a64      	ldr	r2, [pc, #400]	; (8002958 <HAL_I2C_Init+0x25c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d802      	bhi.n	80027d0 <HAL_I2C_Init+0xd4>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3301      	adds	r3, #1
 80027ce:	e009      	b.n	80027e4 <HAL_I2C_Init+0xe8>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	4a63      	ldr	r2, [pc, #396]	; (8002968 <HAL_I2C_Init+0x26c>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	3301      	adds	r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4956      	ldr	r1, [pc, #344]	; (8002958 <HAL_I2C_Init+0x25c>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d80d      	bhi.n	8002820 <HAL_I2C_Init+0x124>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1e59      	subs	r1, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	2b04      	cmp	r3, #4
 800281a:	bf38      	it	cc
 800281c:	2304      	movcc	r3, #4
 800281e:	e04f      	b.n	80028c0 <HAL_I2C_Init+0x1c4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <HAL_I2C_Init+0x150>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e012      	b.n	8002872 <HAL_I2C_Init+0x176>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	0099      	lsls	r1, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x17e>
 8002876:	2301      	movs	r3, #1
 8002878:	e022      	b.n	80028c0 <HAL_I2C_Init+0x1c4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10e      	bne.n	80028a0 <HAL_I2C_Init+0x1a4>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e58      	subs	r0, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	440b      	add	r3, r1
 8002890:	fbb0 f3f3 	udiv	r3, r0, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Init+0x1c4>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	0099      	lsls	r1, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	6809      	ldr	r1, [r1, #0]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6911      	ldr	r1, [r2, #16]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	000186a0 	.word	0x000186a0
 800295c:	001e847f 	.word	0x001e847f
 8002960:	003d08ff 	.word	0x003d08ff
 8002964:	431bde83 	.word	0x431bde83
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	461a      	mov	r2, r3
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
 800297c:	4613      	mov	r3, r2
 800297e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7fe fcca 	bl	8001318 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 80e0 	bne.w	8002b54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	4970      	ldr	r1, [pc, #448]	; (8002b60 <HAL_I2C_Master_Transmit+0x1f4>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fa92 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0d3      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_Master_Transmit+0x50>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cc      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d007      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	893a      	ldrh	r2, [r7, #8]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a50      	ldr	r2, [pc, #320]	; (8002b64 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a24:	8979      	ldrh	r1, [r7, #10]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9ca 	bl	8002dc4 <I2C_MasterRequestWrite>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08d      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a50:	e066      	b.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb0c 	bl	8003074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e06b      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d11b      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fafc 	bl	80030f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e01a      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d194      	bne.n	8002a52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00100002 	.word	0x00100002
 8002b64:	ffff0000 	.word	0xffff0000

08002b68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7fe fbce 	bl	8001318 <HAL_GetTick>
 8002b7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	f040 8110 	bne.w	8002db0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2319      	movs	r3, #25
 8002b96:	2201      	movs	r2, #1
 8002b98:	4988      	ldr	r1, [pc, #544]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f994 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e103      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_IsDeviceReady+0x50>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0fc      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d007      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a70      	ldr	r2, [pc, #448]	; (8002dc0 <HAL_I2C_IsDeviceReady+0x258>)
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f952 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0b6      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c44:	897b      	ldrh	r3, [r7, #10]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c52:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fe fb60 	bl	8001318 <HAL_GetTick>
 8002c58:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c88:	e025      	b.n	8002cd6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fb45 	bl	8001318 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <HAL_I2C_IsDeviceReady+0x138>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22a0      	movs	r2, #160	; 0xa0
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2ba0      	cmp	r3, #160	; 0xa0
 8002ce0:	d005      	beq.n	8002cee <HAL_I2C_IsDeviceReady+0x186>
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_I2C_IsDeviceReady+0x186>
 8002ce8:	7dbb      	ldrb	r3, [r7, #22]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0cd      	beq.n	8002c8a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d129      	bne.n	8002d58 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	4922      	ldr	r1, [pc, #136]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f8c7 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e036      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e02c      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d70:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2319      	movs	r3, #25
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4910      	ldr	r1, [pc, #64]	; (8002dbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f8a3 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e012      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f4ff af33 	bcc.w	8002c02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00100002 	.word	0x00100002
 8002dc0:	ffff0000 	.word	0xffff0000

08002dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d006      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00b      	b.n	8002e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d107      	bne.n	8002e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f84f 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00c      	beq.n	8002e4a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e035      	b.n	8002eb6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e52:	d108      	bne.n	8002e66 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e54:	897b      	ldrh	r3, [r7, #10]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e62:	611a      	str	r2, [r3, #16]
 8002e64:	e01b      	b.n	8002e9e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	11db      	asrs	r3, r3, #7
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f003 0306 	and.w	r3, r3, #6
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f063 030f 	orn	r3, r3, #15
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <I2C_MasterRequestWrite+0xfc>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f876 	bl	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e010      	b.n	8002eb6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e94:	897b      	ldrh	r3, [r7, #10]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <I2C_MasterRequestWrite+0x100>)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f866 	bl	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	00010008 	.word	0x00010008
 8002ec4:	00010002 	.word	0x00010002

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed8:	e025      	b.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d021      	beq.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe fa19 	bl	8001318 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d116      	bne.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e023      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	0c1b      	lsrs	r3, r3, #16
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10d      	bne.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf0c      	ite	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	2300      	movne	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	e00c      	b.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d0b6      	beq.n	8002eda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f84:	e051      	b.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d123      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e046      	b.n	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d021      	beq.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe f997 	bl	8001318 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e020      	b.n	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10c      	bne.n	800304e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e00b      	b.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d18d      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003080:	e02d      	b.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f878 	bl	8003178 <I2C_IsAcknowledgeFailed>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e02d      	b.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d021      	beq.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe f93d 	bl	8001318 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d116      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d1ca      	bne.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003102:	e02d      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f837 	bl	8003178 <I2C_IsAcknowledgeFailed>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e02d      	b.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d021      	beq.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311c:	f7fe f8fc 	bl	8001318 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d116      	bne.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d1ca      	bne.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d11b      	bne.n	80031c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e154      	b.n	8003494 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a98      	ldr	r2, [pc, #608]	; (8003464 <HAL_I2S_Init+0x28c>)
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fd fd19 	bl	8000c3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2202      	movs	r2, #2
 800322c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d06f      	beq.n	8003316 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800323e:	2310      	movs	r3, #16
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e001      	b.n	8003248 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b20      	cmp	r3, #32
 800324e:	d802      	bhi.n	8003256 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a83      	ldr	r2, [pc, #524]	; (8003468 <HAL_I2S_Init+0x290>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_I2S_Init+0x92>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a81      	ldr	r2, [pc, #516]	; (800346c <HAL_I2S_Init+0x294>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d104      	bne.n	8003274 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800326a:	2001      	movs	r0, #1
 800326c:	f001 f9e6 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	e003      	b.n	800327c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003274:	2002      	movs	r0, #2
 8003276:	f001 f9e1 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 800327a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003284:	d125      	bne.n	80032d2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	3305      	adds	r3, #5
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e01f      	b.n	80032f0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	3305      	adds	r3, #5
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	e00e      	b.n	80032f0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	461a      	mov	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	3305      	adds	r3, #5
 80032ee:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_I2S_Init+0x298>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e003      	b.n	800331e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003316:	2302      	movs	r3, #2
 8003318:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d902      	bls.n	800332a <HAL_I2S_Init+0x152>
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d907      	bls.n	800333a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0ac      	b.n	8003494 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	ea42 0103 	orr.w	r1, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	430a      	orrs	r2, r1
 800334c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6851      	ldr	r1, [r2, #4]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	4311      	orrs	r1, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6992      	ldr	r2, [r2, #24]
 8003370:	430a      	orrs	r2, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d003      	beq.n	800338e <HAL_I2S_Init+0x1b6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2bb0      	cmp	r3, #176	; 0xb0
 800338c:	d107      	bne.n	800339e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800339c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d16e      	bne.n	8003484 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a32      	ldr	r2, [pc, #200]	; (8003474 <HAL_I2S_Init+0x29c>)
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <HAL_I2S_Init+0x290>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_I2S_Init+0x1e2>
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_I2S_Init+0x2a0>)
 80033b8:	e001      	b.n	80033be <HAL_I2S_Init+0x1e6>
 80033ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4928      	ldr	r1, [pc, #160]	; (8003468 <HAL_I2S_Init+0x290>)
 80033c6:	428a      	cmp	r2, r1
 80033c8:	d101      	bne.n	80033ce <HAL_I2S_Init+0x1f6>
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <HAL_I2S_Init+0x2a0>)
 80033cc:	e001      	b.n	80033d2 <HAL_I2S_Init+0x1fa>
 80033ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a21      	ldr	r2, [pc, #132]	; (8003468 <HAL_I2S_Init+0x290>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_I2S_Init+0x212>
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_I2S_Init+0x2a0>)
 80033e8:	e001      	b.n	80033ee <HAL_I2S_Init+0x216>
 80033ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ee:	2202      	movs	r2, #2
 80033f0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_I2S_Init+0x290>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_I2S_Init+0x228>
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_I2S_Init+0x2a0>)
 80033fe:	e001      	b.n	8003404 <HAL_I2S_Init+0x22c>
 8003400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d003      	beq.n	800341a <HAL_I2S_Init+0x242>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800341a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e001      	b.n	8003426 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	b299      	uxth	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800343c:	4303      	orrs	r3, r0
 800343e:	b29b      	uxth	r3, r3
 8003440:	430b      	orrs	r3, r1
 8003442:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003444:	4313      	orrs	r3, r2
 8003446:	b29a      	uxth	r2, r3
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	4313      	orrs	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003452:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a03      	ldr	r2, [pc, #12]	; (8003468 <HAL_I2S_Init+0x290>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10e      	bne.n	800347c <HAL_I2S_Init+0x2a4>
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_I2S_Init+0x2a0>)
 8003460:	e00e      	b.n	8003480 <HAL_I2S_Init+0x2a8>
 8003462:	bf00      	nop
 8003464:	080037a1 	.word	0x080037a1
 8003468:	40003800 	.word	0x40003800
 800346c:	40003c00 	.word	0x40003c00
 8003470:	cccccccd 	.word	0xcccccccd
 8003474:	080038b5 	.word	0x080038b5
 8003478:	40003400 	.word	0x40003400
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	897a      	ldrh	r2, [r7, #10]
 8003482:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_I2S_Transmit_DMA+0x1a>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08e      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2S_Transmit_DMA+0x2e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e086      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d005      	beq.n	80034ea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e076      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d002      	beq.n	8003516 <HAL_I2S_Transmit_DMA+0x7a>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d10a      	bne.n	800352c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800352a:	e005      	b.n	8003538 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_I2S_Transmit_DMA+0x144>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <HAL_I2S_Transmit_DMA+0x148>)
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_I2S_Transmit_DMA+0x14c>)
 800354e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003558:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003560:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003568:	f7fe fc5c 	bl	8001e24 <HAL_DMA_Start_IT>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00f      	beq.n	8003592 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f043 0208 	orr.w	r2, r3, #8
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0202 	orr.w	r2, r2, #2
 80035cc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0800367f 	.word	0x0800367f
 80035e4:	0800363d 	.word	0x0800363d
 80035e8:	0800369b 	.word	0x0800369b

080035ec <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0202 	bic.w	r2, r2, #2
 8003660:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ffc5 	bl	8003600 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ffad 	bl	80035ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0203 	bic.w	r2, r2, #3
 80036b6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0208 	orr.w	r2, r3, #8
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ffa5 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c9a      	adds	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10e      	bne.n	800373a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff63 	bl	8003600 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	b292      	uxth	r2, r2
 8003756:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10e      	bne.n	8003798 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003788:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff3e 	bl	8003614 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d13a      	bne.n	8003832 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d109      	bne.n	80037da <I2S_IRQHandler+0x3a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d102      	bne.n	80037da <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ffb4 	bl	8003742 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d126      	bne.n	8003832 <I2S_IRQHandler+0x92>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d11f      	bne.n	8003832 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003800:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f043 0202 	orr.w	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fefb 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d136      	bne.n	80038ac <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d109      	bne.n	800385c <I2S_IRQHandler+0xbc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d102      	bne.n	800385c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff45 	bl	80036e6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d122      	bne.n	80038ac <I2S_IRQHandler+0x10c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d11b      	bne.n	80038ac <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003882:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff febe 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4aa2      	ldr	r2, [pc, #648]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038ce:	4ba2      	ldr	r3, [pc, #648]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038d0:	e001      	b.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a9b      	ldr	r2, [pc, #620]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038ec:	4b9a      	ldr	r3, [pc, #616]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ee:	e001      	b.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003900:	d004      	beq.n	800390c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 8099 	bne.w	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f925 	bl	8003b70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9c8 	bl	8003cd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d13a      	bne.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d035      	beq.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a7e      	ldr	r2, [pc, #504]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800395e:	4b7e      	ldr	r3, [pc, #504]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4979      	ldr	r1, [pc, #484]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800396e:	428b      	cmp	r3, r1
 8003970:	d101      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003972:	4b79      	ldr	r3, [pc, #484]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003974:	e001      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800398e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fe34 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	f040 80be 	bne.w	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80b8 	beq.w	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a59      	ldr	r2, [pc, #356]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039f2:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f4:	e001      	b.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4954      	ldr	r1, [pc, #336]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a02:	428b      	cmp	r3, r1
 8003a04:	d101      	bne.n	8003a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a08:	e001      	b.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fdf6 	bl	8003628 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a3c:	e084      	b.n	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d107      	bne.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8be 	bl	8003bd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8fd 	bl	8003c6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d12f      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02a      	beq.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aa2:	e001      	b.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4929      	ldr	r1, [pc, #164]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ab6:	e001      	b.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fda6 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d131      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02c      	beq.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003afa:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afc:	e001      	b.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4912      	ldr	r1, [pc, #72]	; (8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b0a:	428b      	cmp	r3, r1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b10:	e001      	b.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b2a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fd71 	bl	8003628 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b46:	e000      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b48:	bf00      	nop
}
 8003b4a:	bf00      	nop
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40003800 	.word	0x40003800
 8003b58:	40003400 	.word	0x40003400

08003b5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c99      	adds	r1, r3, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6251      	str	r1, [r2, #36]	; 0x24
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ffc9 	bl	8003b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	1c99      	adds	r1, r3, #2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6251      	str	r1, [r2, #36]	; 0x24
 8003be6:	8819      	ldrh	r1, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <I2SEx_TxISR_I2SExt+0x22>
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003bf4:	e001      	b.n	8003bfa <I2SEx_TxISR_I2SExt+0x26>
 8003bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d121      	bne.n	8003c5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <I2SEx_TxISR_I2SExt+0x50>
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003c22:	e001      	b.n	8003c28 <I2SEx_TxISR_I2SExt+0x54>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	490d      	ldr	r1, [pc, #52]	; (8003c64 <I2SEx_TxISR_I2SExt+0x90>)
 8003c30:	428b      	cmp	r3, r1
 8003c32:	d101      	bne.n	8003c38 <I2SEx_TxISR_I2SExt+0x64>
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <I2SEx_TxISR_I2SExt+0x94>)
 8003c36:	e001      	b.n	8003c3c <I2SEx_TxISR_I2SExt+0x68>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff81 	bl	8003b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40003800 	.word	0x40003800
 8003c68:	40003400 	.word	0x40003400

08003c6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68d8      	ldr	r0, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	1c99      	adds	r1, r3, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c84:	b282      	uxth	r2, r0
 8003c86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d113      	bne.n	8003cc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff4a 	bl	8003b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <I2SEx_RxISR_I2SExt+0x16>
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003ce4:	e001      	b.n	8003cea <I2SEx_RxISR_I2SExt+0x1a>
 8003ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	1c99      	adds	r1, r3, #2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cf6:	b282      	uxth	r2, r0
 8003cf8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d121      	bne.n	8003d56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_RxISR_I2SExt+0x50>
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_RxISR_I2SExt+0x54>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	490d      	ldr	r1, [pc, #52]	; (8003d60 <I2SEx_RxISR_I2SExt+0x90>)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d101      	bne.n	8003d34 <I2SEx_RxISR_I2SExt+0x64>
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <I2SEx_RxISR_I2SExt+0x94>)
 8003d32:	e001      	b.n	8003d38 <I2SEx_RxISR_I2SExt+0x68>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff03 	bl	8003b5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40003800 	.word	0x40003800
 8003d64:	40003400 	.word	0x40003400

08003d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0cc      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90c      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d044      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e067      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4934      	ldr	r1, [pc, #208]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fa5e 	bl	8001318 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fd fa5a 	bl	8001318 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e04f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d20c      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
 8003f02:	fa21 f303 	lsr.w	r3, r1, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f9be 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08004dfc 	.word	0x08004dfc
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	2300      	movs	r3, #0
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4a:	4b63      	ldr	r3, [pc, #396]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d007      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x32>
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d008      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x38>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 80b4 	bne.w	80040c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f62:	60bb      	str	r3, [r7, #8]
       break;
 8003f64:	e0b3      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f68:	60bb      	str	r3, [r7, #8]
      break;
 8003f6a:	e0b0      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f76:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d04a      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	f04f 0400 	mov.w	r4, #0
 8003f8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	ea03 0501 	and.w	r5, r3, r1
 8003f98:	ea04 0602 	and.w	r6, r4, r2
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	0154      	lsls	r4, r2, #5
 8003faa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fae:	014b      	lsls	r3, r1, #5
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	1b49      	subs	r1, r1, r5
 8003fb6:	eb62 0206 	sbc.w	r2, r2, r6
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	f04f 0400 	mov.w	r4, #0
 8003fc2:	0194      	lsls	r4, r2, #6
 8003fc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fc8:	018b      	lsls	r3, r1, #6
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	eb64 0402 	sbc.w	r4, r4, r2
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	00e2      	lsls	r2, r4, #3
 8003fda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fde:	00d9      	lsls	r1, r3, #3
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	195b      	adds	r3, r3, r5
 8003fe6:	eb44 0406 	adc.w	r4, r4, r6
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	0262      	lsls	r2, r4, #9
 8003ff4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ff8:	0259      	lsls	r1, r3, #9
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	4621      	mov	r1, r4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	461a      	mov	r2, r3
 800400a:	4623      	mov	r3, r4
 800400c:	f7fc f904 	bl	8000218 <__aeabi_uldivmod>
 8004010:	4603      	mov	r3, r0
 8004012:	460c      	mov	r4, r1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e049      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	f04f 0400 	mov.w	r4, #0
 8004022:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	ea03 0501 	and.w	r5, r3, r1
 800402e:	ea04 0602 	and.w	r6, r4, r2
 8004032:	4629      	mov	r1, r5
 8004034:	4632      	mov	r2, r6
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	f04f 0400 	mov.w	r4, #0
 800403e:	0154      	lsls	r4, r2, #5
 8004040:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004044:	014b      	lsls	r3, r1, #5
 8004046:	4619      	mov	r1, r3
 8004048:	4622      	mov	r2, r4
 800404a:	1b49      	subs	r1, r1, r5
 800404c:	eb62 0206 	sbc.w	r2, r2, r6
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	0194      	lsls	r4, r2, #6
 800405a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	1a5b      	subs	r3, r3, r1
 8004062:	eb64 0402 	sbc.w	r4, r4, r2
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	00e2      	lsls	r2, r4, #3
 8004070:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004074:	00d9      	lsls	r1, r3, #3
 8004076:	460b      	mov	r3, r1
 8004078:	4614      	mov	r4, r2
 800407a:	195b      	adds	r3, r3, r5
 800407c:	eb44 0406 	adc.w	r4, r4, r6
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	02a2      	lsls	r2, r4, #10
 800408a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800408e:	0299      	lsls	r1, r3, #10
 8004090:	460b      	mov	r3, r1
 8004092:	4614      	mov	r4, r2
 8004094:	4618      	mov	r0, r3
 8004096:	4621      	mov	r1, r4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f04f 0400 	mov.w	r4, #0
 800409e:	461a      	mov	r2, r3
 80040a0:	4623      	mov	r3, r4
 80040a2:	f7fc f8b9 	bl	8000218 <__aeabi_uldivmod>
 80040a6:	4603      	mov	r3, r0
 80040a8:	460c      	mov	r4, r1
 80040aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	3301      	adds	r3, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	60bb      	str	r3, [r7, #8]
      break;
 80040c6:	e002      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040ca:	60bb      	str	r3, [r7, #8]
      break;
 80040cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ce:	68bb      	ldr	r3, [r7, #8]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	007a1200 	.word	0x007a1200

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000000 	.word	0x20000000

080040fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004100:	f7ff fff0 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004104:	4601      	mov	r1, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0a9b      	lsrs	r3, r3, #10
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4a03      	ldr	r2, [pc, #12]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	08004e0c 	.word	0x08004e0c

08004124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004148:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800414a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4977      	ldr	r1, [pc, #476]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004166:	2301      	movs	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004176:	4b6f      	ldr	r3, [pc, #444]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	496b      	ldr	r1, [pc, #428]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004194:	2301      	movs	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80041a4:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	4960      	ldr	r1, [pc, #384]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80041c2:	2301      	movs	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ce:	d10c      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80041d0:	4b58      	ldr	r3, [pc, #352]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	3b01      	subs	r3, #1
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4954      	ldr	r1, [pc, #336]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d022      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80041f6:	4b4f      	ldr	r3, [pc, #316]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80041f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	494b      	ldr	r1, [pc, #300]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004220:	d10c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004222:	4b44      	ldr	r3, [pc, #272]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004228:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	3b01      	subs	r3, #1
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	493f      	ldr	r1, [pc, #252]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 808a 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b36      	ldr	r3, [pc, #216]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fd f851 	bl	8001318 <HAL_GetTick>
 8004276:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd f84d 	bl	8001318 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e1d1      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d028      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d2:	4b18      	ldr	r3, [pc, #96]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d114      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042de:	f7fd f81b 	bl	8001318 <HAL_GetTick>
 80042e2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd f817 	bl	8001318 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e199      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ee      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004314:	d114      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	4902      	ldr	r1, [pc, #8]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]
 8004330:	e00c      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	40007000 	.word	0x40007000
 800433c:	42470e40 	.word	0x42470e40
 8004340:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a88      	ldr	r2, [pc, #544]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004346:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	4b86      	ldr	r3, [pc, #536]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800434e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	4983      	ldr	r1, [pc, #524]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800435a:	4313      	orrs	r3, r2
 800435c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004370:	4b7e      	ldr	r3, [pc, #504]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004372:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004380:	4b79      	ldr	r3, [pc, #484]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4976      	ldr	r1, [pc, #472]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043a2:	4b71      	ldr	r3, [pc, #452]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80043a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	496d      	ldr	r1, [pc, #436]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c0:	d101      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80043d2:	4b65      	ldr	r3, [pc, #404]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	4961      	ldr	r1, [pc, #388]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d004      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	f040 80c6 	bne.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043fe:	f7fc ff8b 	bl	8001318 <HAL_GetTick>
 8004402:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fc ff87 	bl	8001318 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e10b      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004424:	4a53      	ldr	r2, [pc, #332]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004468:	d00e      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d019      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d115      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x386>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004486:	d110      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	4931      	ldr	r1, [pc, #196]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d026      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d122      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	019b      	lsls	r3, r3, #6
 80044ea:	431a      	orrs	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	491b      	ldr	r1, [pc, #108]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f023 021f 	bic.w	r2, r3, #31
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	3b01      	subs	r3, #1
 8004510:	4915      	ldr	r1, [pc, #84]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	019b      	lsls	r3, r3, #6
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	071b      	lsls	r3, r3, #28
 800453e:	490a      	ldr	r1, [pc, #40]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800454c:	f7fc fee4 	bl	8001318 <HAL_GetTick>
 8004550:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004552:	e011      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004554:	f7fc fee0 	bl	8001318 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d90a      	bls.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e064      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	424711e0 	.word	0x424711e0
 8004570:	42470068 	.word	0x42470068
 8004574:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004578:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e7      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	4926      	ldr	r1, [pc, #152]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	491d      	ldr	r1, [pc, #116]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	4915      	ldr	r1, [pc, #84]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4904      	ldr	r1, [pc, #16]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800

0800463c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800465a:	2b02      	cmp	r3, #2
 800465c:	f000 8098 	beq.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004660:	e12d      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004662:	4b9a      	ldr	r3, [pc, #616]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004668:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800466c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004674:	d00c      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800467a:	d802      	bhi.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004680:	e082      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004686:	d047      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004688:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800468c:	d06f      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800468e:	e07b      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004690:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004692:	617b      	str	r3, [r7, #20]
          break;
 8004694:	e07b      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004696:	4b8d      	ldr	r3, [pc, #564]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a4:	d109      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046a6:	4b89      	ldr	r3, [pc, #548]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	4a87      	ldr	r2, [pc, #540]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	e019      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ba:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c6:	d109      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046c8:	4b80      	ldr	r3, [pc, #512]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	4a80      	ldr	r2, [pc, #512]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046dc:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e6:	4a7c      	ldr	r2, [pc, #496]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ee:	4b77      	ldr	r3, [pc, #476]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004702:	4b72      	ldr	r3, [pc, #456]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	0f1b      	lsrs	r3, r3, #28
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
          break;
 8004716:	e03a      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004718:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d108      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004726:	4b69      	ldr	r3, [pc, #420]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e007      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004738:	4b64      	ldr	r3, [pc, #400]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004740:	4a65      	ldr	r2, [pc, #404]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004748:	4b60      	ldr	r3, [pc, #384]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800475a:	4b5c      	ldr	r3, [pc, #368]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	0f1b      	lsrs	r3, r3, #28
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	617b      	str	r3, [r7, #20]
          break;
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477a:	d102      	bne.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800477c:	4b55      	ldr	r3, [pc, #340]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800477e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004780:	e005      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004782:	4b55      	ldr	r3, [pc, #340]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004784:	617b      	str	r3, [r7, #20]
          break;
 8004786:	e002      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
          break;
 800478c:	bf00      	nop
        }
      }
      break;
 800478e:	e096      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004790:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004796:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800479a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a2:	d00c      	beq.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d802      	bhi.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80047ae:	e082      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80047b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b4:	d047      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80047b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047ba:	d06f      	beq.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80047bc:	e07b      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047be:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047c0:	617b      	str	r3, [r7, #20]
          break;
 80047c2:	e07b      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80047c4:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d109      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047d4:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047de:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e019      	b.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047e8:	4b38      	ldr	r3, [pc, #224]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f4:	d109      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e008      	b.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	4a30      	ldr	r2, [pc, #192]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004836:	0f1b      	lsrs	r3, r3, #28
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	617b      	str	r3, [r7, #20]
          break;
 8004844:	e03a      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004846:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004852:	d108      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	e007      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	0f1b      	lsrs	r3, r3, #28
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
          break;
 800489a:	e00f      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a8:	d102      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80048ac:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80048ae:	e005      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80048b2:	617b      	str	r3, [r7, #20]
          break;
 80048b4:	e002      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
          break;
 80048ba:	bf00      	nop
        }
      }
      break;
 80048bc:	bf00      	nop
    }
  }
  return frequency;
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	40023800 	.word	0x40023800
 80048d0:	00bb8000 	.word	0x00bb8000
 80048d4:	007a1200 	.word	0x007a1200
 80048d8:	00f42400 	.word	0x00f42400

080048dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d075      	beq.n	80049e0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048f4:	4ba2      	ldr	r3, [pc, #648]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d00c      	beq.n	800491a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004900:	4b9f      	ldr	r3, [pc, #636]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004908:	2b08      	cmp	r3, #8
 800490a:	d112      	bne.n	8004932 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800490c:	4b9c      	ldr	r3, [pc, #624]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d10b      	bne.n	8004932 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491a:	4b99      	ldr	r3, [pc, #612]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d05b      	beq.n	80049de <HAL_RCC_OscConfig+0x102>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d157      	bne.n	80049de <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e20b      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x6e>
 800493c:	4b90      	ldr	r3, [pc, #576]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a8f      	ldr	r2, [pc, #572]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e01d      	b.n	8004986 <HAL_RCC_OscConfig+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004952:	d10c      	bne.n	800496e <HAL_RCC_OscConfig+0x92>
 8004954:	4b8a      	ldr	r3, [pc, #552]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a89      	ldr	r2, [pc, #548]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 800495a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b87      	ldr	r3, [pc, #540]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a86      	ldr	r2, [pc, #536]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e00b      	b.n	8004986 <HAL_RCC_OscConfig+0xaa>
 800496e:	4b84      	ldr	r3, [pc, #528]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a83      	ldr	r2, [pc, #524]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a80      	ldr	r2, [pc, #512]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fc fcc3 	bl	8001318 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004996:	f7fc fcbf 	bl	8001318 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b64      	cmp	r3, #100	; 0x64
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e1d0      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a8:	4b75      	ldr	r3, [pc, #468]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0xba>
 80049b4:	e014      	b.n	80049e0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fc fcaf 	bl	8001318 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049be:	f7fc fcab 	bl	8001318 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e1bc      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d0:	4b6b      	ldr	r3, [pc, #428]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0xe2>
 80049dc:	e000      	b.n	80049e0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d063      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049ec:	4b64      	ldr	r3, [pc, #400]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f8:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d11c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a04:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d116      	bne.n	8004a3e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a10:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_OscConfig+0x14c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e190      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b55      	ldr	r3, [pc, #340]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4952      	ldr	r1, [pc, #328]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3c:	e03a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d020      	beq.n	8004a88 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a46:	4b4f      	ldr	r3, [pc, #316]	; (8004b84 <HAL_RCC_OscConfig+0x2a8>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fc64 	bl	8001318 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a54:	f7fc fc60 	bl	8001318 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e171      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a72:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	493f      	ldr	r1, [pc, #252]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
 8004a86:	e015      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a88:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RCC_OscConfig+0x2a8>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fc fc43 	bl	8001318 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fc fc3f 	bl	8001318 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e150      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa8:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d030      	beq.n	8004b22 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d016      	beq.n	8004af6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac8:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fc fc23 	bl	8001318 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fc fc1f 	bl	8001318 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e130      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1fa>
 8004af4:	e015      	b.n	8004b22 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7fc fc0c 	bl	8001318 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fc fc08 	bl	8001318 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e119      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 809f 	beq.w	8004c6e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10f      	bne.n	8004b60 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_OscConfig+0x2a4>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_RCC_OscConfig+0x2b0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d120      	bne.n	8004bae <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCC_OscConfig+0x2b0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x2b0>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b78:	f7fc fbce 	bl	8001318 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	e010      	b.n	8004ba2 <HAL_RCC_OscConfig+0x2c6>
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470000 	.word	0x42470000
 8004b88:	42470e80 	.word	0x42470e80
 8004b8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b90:	f7fc fbc2 	bl	8001318 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0d3      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x478>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2e8>
 8004bb6:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a67      	ldr	r2, [pc, #412]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	e01c      	b.n	8004bfe <HAL_RCC_OscConfig+0x322>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x30a>
 8004bcc:	4b62      	ldr	r3, [pc, #392]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a61      	ldr	r2, [pc, #388]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd8:	4b5f      	ldr	r3, [pc, #380]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a5e      	ldr	r2, [pc, #376]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	e00b      	b.n	8004bfe <HAL_RCC_OscConfig+0x322>
 8004be6:	4b5c      	ldr	r3, [pc, #368]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	4a5b      	ldr	r2, [pc, #364]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf2:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a58      	ldr	r2, [pc, #352]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d015      	beq.n	8004c32 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fc fb87 	bl	8001318 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fc fb83 	bl	8001318 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e092      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c24:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ee      	beq.n	8004c0e <HAL_RCC_OscConfig+0x332>
 8004c30:	e014      	b.n	8004c5c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fc fb71 	bl	8001318 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fc fb6d 	bl	8001318 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e07c      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ee      	bne.n	8004c3a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4a3c      	ldr	r2, [pc, #240]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d068      	beq.n	8004d48 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d060      	beq.n	8004d44 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d145      	bne.n	8004d16 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8a:	4b34      	ldr	r3, [pc, #208]	; (8004d5c <HAL_RCC_OscConfig+0x480>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc fb42 	bl	8001318 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fc fb3e 	bl	8001318 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e04f      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	071b      	lsls	r3, r3, #28
 8004ce2:	491d      	ldr	r1, [pc, #116]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_RCC_OscConfig+0x480>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cee:	f7fc fb13 	bl	8001318 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fc fb0f 	bl	8001318 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e020      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x41a>
 8004d14:	e018      	b.n	8004d48 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCC_OscConfig+0x480>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fc fafc 	bl	8001318 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d24:	f7fc faf8 	bl	8001318 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e009      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCC_OscConfig+0x47c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x448>
 8004d42:	e001      	b.n	8004d48 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e000      	b.n	8004d4a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40007000 	.word	0x40007000
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	42470060 	.word	0x42470060

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4e0d      	ldr	r6, [pc, #52]	; (8004d98 <__libc_init_array+0x38>)
 8004d64:	4c0d      	ldr	r4, [pc, #52]	; (8004d9c <__libc_init_array+0x3c>)
 8004d66:	1ba4      	subs	r4, r4, r6
 8004d68:	10a4      	asrs	r4, r4, #2
 8004d6a:	2500      	movs	r5, #0
 8004d6c:	42a5      	cmp	r5, r4
 8004d6e:	d109      	bne.n	8004d84 <__libc_init_array+0x24>
 8004d70:	4e0b      	ldr	r6, [pc, #44]	; (8004da0 <__libc_init_array+0x40>)
 8004d72:	4c0c      	ldr	r4, [pc, #48]	; (8004da4 <__libc_init_array+0x44>)
 8004d74:	f000 f82c 	bl	8004dd0 <_init>
 8004d78:	1ba4      	subs	r4, r4, r6
 8004d7a:	10a4      	asrs	r4, r4, #2
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	42a5      	cmp	r5, r4
 8004d80:	d105      	bne.n	8004d8e <__libc_init_array+0x2e>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d88:	4798      	blx	r3
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	e7ee      	b.n	8004d6c <__libc_init_array+0xc>
 8004d8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d92:	4798      	blx	r3
 8004d94:	3501      	adds	r5, #1
 8004d96:	e7f2      	b.n	8004d7e <__libc_init_array+0x1e>
 8004d98:	08004e24 	.word	0x08004e24
 8004d9c:	08004e24 	.word	0x08004e24
 8004da0:	08004e24 	.word	0x08004e24
 8004da4:	08004e28 	.word	0x08004e28

08004da8 <memcpy>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	1e43      	subs	r3, r0, #1
 8004dac:	440a      	add	r2, r1
 8004dae:	4291      	cmp	r1, r2
 8004db0:	d100      	bne.n	8004db4 <memcpy+0xc>
 8004db2:	bd10      	pop	{r4, pc}
 8004db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dbc:	e7f7      	b.n	8004dae <memcpy+0x6>

08004dbe <memset>:
 8004dbe:	4402      	add	r2, r0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d100      	bne.n	8004dc8 <memset+0xa>
 8004dc6:	4770      	bx	lr
 8004dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dcc:	e7f9      	b.n	8004dc2 <memset+0x4>
	...

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr
