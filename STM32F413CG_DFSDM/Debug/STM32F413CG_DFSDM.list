
STM32F413CG_DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006580  08006580  0002ebac  2**0
                  CONTENTS
  4 .ARM          00000008  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006588  08006588  0002ebac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006588  08006588  00016588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000ebac  20000000  08006590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  2000ebac  0801513c  0002ebac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ffc4  0801513c  0002ffc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002ebac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013987  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c96  00000000  00000000  00042563  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00045200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00046130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230e9  00000000  00000000  00046ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f88a  00000000  00000000  00069fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4c60  00000000  00000000  0007986b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0014e4cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  0014e5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000d34  00000000  00000000  00152354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000ebac 	.word	0x2000ebac
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006534 	.word	0x08006534

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000ebb0 	.word	0x2000ebb0
 8000214:	08006534 	.word	0x08006534

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Codec_Reset>:
	0x001	// Reg 09: Active Control
};


void Codec_Reset(I2C_HandleTypeDef *i2c_handle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t status =0;
 8000520:	2300      	movs	r3, #0
 8000522:	73bb      	strb	r3, [r7, #14]
	i2cx = *i2c_handle;
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <Codec_Reset+0x78>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4610      	mov	r0, r2
 800052a:	4619      	mov	r1, r3
 800052c:	2354      	movs	r3, #84	; 0x54
 800052e:	461a      	mov	r2, r3
 8000530:	f005 ffec 	bl	800650c <memcpy>
	Codec_WriteRegister(0x0F, 0x00);
 8000534:	2100      	movs	r1, #0
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f82e 	bl	8000598 <Codec_WriteRegister>

	/* Load default values */
	for(i=0;i<W8731_NUM_REGS;i++)
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e01f      	b.n	8000582 <Codec_Reset+0x6a>
	{
		HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f001 f946 	bl	80017d4 <HAL_Delay>

		status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <Codec_Reset+0x7c>)
 800054c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f81f 	bl	8000598 <Codec_WriteRegister>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 800055e:	e00a      	b.n	8000576 <Codec_Reset+0x5e>
			status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <Codec_Reset+0x7c>)
 8000564:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f813 	bl	8000598 <Codec_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f1      	beq.n	8000560 <Codec_Reset+0x48>
	for(i=0;i<W8731_NUM_REGS;i++)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d9dc      	bls.n	8000542 <Codec_Reset+0x2a>
		}

	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000ebc8 	.word	0x2000ebc8
 8000594:	0800654c 	.word	0x0800654c

08000598 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint32_t result = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	// RegisterValue is 9-bit register
	/* Assemble 2-byte data in WM8731 format */
	uint8_t Byte1 = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x1);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	72fb      	strb	r3, [r7, #11]
	uint8_t Byte2 = RegisterValue&0xFF;
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	72bb      	strb	r3, [r7, #10]
	iData[0] = Byte1;
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <Codec_WriteRegister+0x80>)
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	7013      	strb	r3, [r2, #0]
	iData[1] = Byte2;
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <Codec_WriteRegister+0x80>)
 80005d2:	7abb      	ldrb	r3, [r7, #10]
 80005d4:	7053      	strb	r3, [r2, #1]
	/* Transmit the slave address and enable writing operation */
	// take the most significant 7 bit address in the address byte
	if (HAL_I2C_Master_Transmit(&i2cx, CODEC_ADDRESS, iData, 2, 1000) != HAL_OK)
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Codec_WriteRegister+0x80>)
 80005e0:	2134      	movs	r1, #52	; 0x34
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <Codec_WriteRegister+0x84>)
 80005e4:	f002 fc50 	bl	8002e88 <HAL_I2C_Master_Transmit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <Codec_WriteRegister+0x66>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Codec_WriteRegister+0x88>)
 80005f4:	f002 fadc 	bl	8002bb0 <HAL_GPIO_WritePin>

		result = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e006      	b.n	800060c <Codec_WriteRegister+0x74>
		}
	else {

		result =1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2120      	movs	r1, #32
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <Codec_WriteRegister+0x88>)
 8000608:	f002 fad2 	bl	8002bb0 <HAL_GPIO_WritePin>
	}

	return result;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000ec1c 	.word	0x2000ec1c
 800061c:	2000ebc8 	.word	0x2000ebc8
 8000620:	40020000 	.word	0x40020000

08000624 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800062a:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <MX_DFSDM1_Init+0xbc>)
 800062c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800063c:	2201      	movs	r2, #1
 800063e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000646:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000650:	2201      	movs	r2, #1
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000656:	f001 fae1 	bl	8001c1c <HAL_DFSDM_FilterInit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000660:	f000 fed2 	bl	8001408 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <MX_DFSDM1_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800066c:	2201      	movs	r2, #1
 800066e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800067a:	2214      	movs	r2, #20
 800067c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000698:	2204      	movs	r2, #4
 800069a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b6:	f001 f9c1 	bl	8001a3c <HAL_DFSDM_ChannelInit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80006c0:	f000 fea2 	bl	8001408 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80006c4:	2201      	movs	r2, #1
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <MX_DFSDM1_Init+0xc8>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 80006ca:	f001 fb93 	bl	8001df4 <HAL_DFSDM_FilterConfigRegChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80006d4:	f000 fe98 	bl	8001408 <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000f5fc 	.word	0x2000f5fc
 80006e0:	40016100 	.word	0x40016100
 80006e4:	2000f5c4 	.word	0x2000f5c4
 80006e8:	40016020 	.word	0x40016020
 80006ec:	00010002 	.word	0x00010002

080006f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(dfsdm_filterHandle->Instance))&&(DFSDM1_Init == 0))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a4b      	ldr	r2, [pc, #300]	; (800083c <HAL_DFSDM_FilterMspInit+0x14c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <HAL_DFSDM_FilterMspInit+0x2c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <HAL_DFSDM_FilterMspInit+0x150>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d14e      	bne.n	80007ba <HAL_DFSDM_FilterMspInit+0xca>
 800071c:	4b49      	ldr	r3, [pc, #292]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d14a      	bne.n	80007ba <HAL_DFSDM_FilterMspInit+0xca>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000724:	4b48      	ldr	r3, [pc, #288]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a47      	ldr	r2, [pc, #284]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 800072c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800072e:	4b46      	ldr	r3, [pc, #280]	; (8000848 <HAL_DFSDM_FilterMspInit+0x158>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10d      	bne.n	8000752 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a3c      	ldr	r2, [pc, #240]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <HAL_DFSDM_FilterMspInit+0x15c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA4     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800076e:	2310      	movs	r3, #16
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 800077e:	2308      	movs	r3, #8
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4831      	ldr	r0, [pc, #196]	; (8000850 <HAL_DFSDM_FilterMspInit+0x160>)
 800078a:	f002 f87f 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007a0:	2306      	movs	r3, #6
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4829      	ldr	r0, [pc, #164]	; (8000850 <HAL_DFSDM_FilterMspInit+0x160>)
 80007ac:	f002 f86e 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <HAL_DFSDM_FilterMspInit+0x154>)
 80007b8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <HAL_DFSDM_FilterMspInit+0x14c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d137      	bne.n	8000834 <HAL_DFSDM_FilterMspInit+0x144>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <HAL_DFSDM_FilterMspInit+0x168>)
 80007c8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007cc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007d0:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ec:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 80007f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fc:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000804:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 800080e:	f001 fcad 	bl	800216c <HAL_DMA_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_DFSDM_FilterMspInit+0x12c>
    {
      Error_Handler();
 8000818:	f000 fdf6 	bl	8001408 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <HAL_DFSDM_FilterMspInit+0x164>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40016100 	.word	0x40016100
 8000840:	40016180 	.word	0x40016180
 8000844:	2000ec24 	.word	0x2000ec24
 8000848:	2000ec20 	.word	0x2000ec20
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	2000f650 	.word	0x2000f650
 8000858:	40026410 	.word	0x40026410

0800085c <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(dfsdm_channelHandle->Instance))&&(DFSDM1_Init == 0))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <HAL_DFSDM_ChannelMspInit+0xe8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d00e      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a31      	ldr	r2, [pc, #196]	; (8000948 <HAL_DFSDM_ChannelMspInit+0xec>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d009      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a2f      	ldr	r2, [pc, #188]	; (800094c <HAL_DFSDM_ChannelMspInit+0xf0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d004      	beq.n	800089c <HAL_DFSDM_ChannelMspInit+0x40>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <HAL_DFSDM_ChannelMspInit+0xf4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d14e      	bne.n	800093a <HAL_DFSDM_ChannelMspInit+0xde>
 800089c:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d14a      	bne.n	800093a <HAL_DFSDM_ChannelMspInit+0xde>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <HAL_DFSDM_ChannelMspInit+0xfc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10d      	bne.n	80008d2 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a20      	ldr	r2, [pc, #128]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_DFSDM_ChannelMspInit+0x100>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PA4     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008ee:	2310      	movs	r3, #16
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80008fe:	2308      	movs	r3, #8
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4815      	ldr	r0, [pc, #84]	; (8000960 <HAL_DFSDM_ChannelMspInit+0x104>)
 800090a:	f001 ffbf 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000920:	2306      	movs	r3, #6
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <HAL_DFSDM_ChannelMspInit+0x104>)
 800092c:	f001 ffae 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_DFSDM_ChannelMspInit+0xf8>)
 8000938:	6013      	str	r3, [r2, #0]
  }
}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40016000 	.word	0x40016000
 8000948:	40016020 	.word	0x40016020
 800094c:	40016040 	.word	0x40016040
 8000950:	40016060 	.word	0x40016060
 8000954:	2000ec24 	.word	0x2000ec24
 8000958:	2000ec20 	.word	0x2000ec20
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000

08000964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_DMA_Init+0x78>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <MX_DMA_Init+0x78>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_DMA_Init+0x78>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_DMA_Init+0x78>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_DMA_Init+0x78>)
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_DMA_Init+0x78>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	200b      	movs	r0, #11
 80009a8:	f001 f811 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ac:	200b      	movs	r0, #11
 80009ae:	f001 f82a 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	202f      	movs	r0, #47	; 0x2f
 80009b8:	f001 f809 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009bc:	202f      	movs	r0, #47	; 0x2f
 80009be:	f001 f822 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2038      	movs	r0, #56	; 0x38
 80009c8:	f001 f801 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009cc:	2038      	movs	r0, #56	; 0x38
 80009ce:	f001 f81a 	bl	8001a06 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_GPIO_Init+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_GPIO_Init+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_GPIO_Init+0x9c>)
 8000a50:	f002 f8ae 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a54:	2320      	movs	r3, #32
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0x9c>)
 8000a6c:	f001 ff0e 	bl	800288c <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000

08000a80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f002 f8ab 	bl	8002c18 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fc9e 	bl	8001408 <Error_Handler>
  }

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000f6b0 	.word	0x2000f6b0
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_I2C_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_I2C_MspInit+0x8c>)
 8000b36:	f001 fea9 	bl	800288c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400

08000b6c <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_I2S3_Init+0x58>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b86:	2203      	movs	r2, #3
 8000b88:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b94:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b98:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <MX_I2S3_Init+0x54>)
 8000bae:	f002 fda1 	bl	80036f4 <HAL_I2S_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bb8:	f000 fc26 	bl	8001408 <Error_Handler>
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000f764 	.word	0x2000f764
 8000bc4:	40003c00 	.word	0x40003c00

08000bc8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <HAL_I2S_MspInit+0x124>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d17c      	bne.n	8000ce4 <HAL_I2S_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a3f      	ldr	r2, [pc, #252]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_I2S_MspInit+0x128>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 8000c3e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c50:	2306      	movs	r3, #6
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <HAL_I2S_MspInit+0x12c>)
 8000c5c:	f001 fe16 	bl	800288c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c72:	2306      	movs	r3, #6
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <HAL_I2S_MspInit+0x130>)
 8000c7e:	f001 fe05 	bl	800288c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c84:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_I2S_MspInit+0x138>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cca:	f001 fa4f 	bl	800216c <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8000cd4:	f000 fb98 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2S_MspInit+0x134>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40003c00 	.word	0x40003c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	2000f704 	.word	0x2000f704
 8000d00:	400260b8 	.word	0x400260b8

08000d04 <main>:
int gainDB[5] = {10,10,5,6,7};

void TestBlinking(void);

int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d08:	f000 fcf2 	bl	80016f0 <HAL_Init>
	SystemClock_Config();
 8000d0c:	f000 fae4 	bl	80012d8 <SystemClock_Config>
	MX_GPIO_Init();
 8000d10:	f7ff fe66 	bl	80009e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d14:	f7ff fe26 	bl	8000964 <MX_DMA_Init>
	MX_I2C1_Init();
 8000d18:	f7ff feb2 	bl	8000a80 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000d1c:	f7ff ff26 	bl	8000b6c <MX_I2S3_Init>
	MX_DFSDM1_Init();
 8000d20:	f7ff fc80 	bl	8000624 <MX_DFSDM1_Init>
	MX_UART5_Init();
 8000d24:	f000 fc0c 	bl	8001540 <MX_UART5_Init>
	HAL_Delay(1000);
 8000d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2c:	f000 fd52 	bl	80017d4 <HAL_Delay>
	if (HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 1, 10) == HAL_OK){
 8000d30:	230a      	movs	r3, #10
 8000d32:	2201      	movs	r2, #1
 8000d34:	2134      	movs	r1, #52	; 0x34
 8000d36:	48a7      	ldr	r0, [pc, #668]	; (8000fd4 <main+0x2d0>)
 8000d38:	f002 f9a4 	bl	8003084 <HAL_I2C_IsDeviceReady>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <main+0x42>
		TestBlinking();
 8000d42:	f000 fab1 	bl	80012a8 <TestBlinking>
	}
	Codec_Reset(&hi2c1);
 8000d46:	48a3      	ldr	r0, [pc, #652]	; (8000fd4 <main+0x2d0>)
 8000d48:	f7ff fbe6 	bl	8000518 <Codec_Reset>
	//10*(gainDB[0]+10)  ==> first 10 is for (5*NUMSTAGES)  , second 10 is for -10 to 10 gainDB
	arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8000d4c:	4ba2      	ldr	r3, [pc, #648]	; (8000fd8 <main+0x2d4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d54:	4613      	mov	r3, r2
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4a9f      	ldr	r2, [pc, #636]	; (8000fdc <main+0x2d8>)
 8000d5e:	441a      	add	r2, r3
 8000d60:	4b9f      	ldr	r3, [pc, #636]	; (8000fe0 <main+0x2dc>)
 8000d62:	2103      	movs	r1, #3
 8000d64:	489f      	ldr	r0, [pc, #636]	; (8000fe4 <main+0x2e0>)
 8000d66:	f005 fba1 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 8000d6a:	4b9b      	ldr	r3, [pc, #620]	; (8000fd8 <main+0x2d4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d72:	4613      	mov	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4a9b      	ldr	r2, [pc, #620]	; (8000fe8 <main+0x2e4>)
 8000d7c:	441a      	add	r2, r3
 8000d7e:	4b9b      	ldr	r3, [pc, #620]	; (8000fec <main+0x2e8>)
 8000d80:	2103      	movs	r1, #3
 8000d82:	489b      	ldr	r0, [pc, #620]	; (8000ff0 <main+0x2ec>)
 8000d84:	f005 fb92 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 8000d88:	4b93      	ldr	r3, [pc, #588]	; (8000fd8 <main+0x2d4>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000d90:	4613      	mov	r3, r2
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <main+0x2f0>)
 8000d9a:	441a      	add	r2, r3
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <main+0x2f4>)
 8000d9e:	2103      	movs	r1, #3
 8000da0:	4896      	ldr	r0, [pc, #600]	; (8000ffc <main+0x2f8>)
 8000da2:	f005 fb83 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 8000da6:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <main+0x2d4>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dae:	4613      	mov	r3, r2
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4a92      	ldr	r2, [pc, #584]	; (8001000 <main+0x2fc>)
 8000db8:	441a      	add	r2, r3
 8000dba:	4b92      	ldr	r3, [pc, #584]	; (8001004 <main+0x300>)
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	4892      	ldr	r0, [pc, #584]	; (8001008 <main+0x304>)
 8000dc0:	f005 fb74 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
	arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 8000dc4:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <main+0x2d4>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000dcc:	4613      	mov	r3, r2
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4a8d      	ldr	r2, [pc, #564]	; (800100c <main+0x308>)
 8000dd6:	441a      	add	r2, r3
 8000dd8:	4b8d      	ldr	r3, [pc, #564]	; (8001010 <main+0x30c>)
 8000dda:	2103      	movs	r1, #3
 8000ddc:	488d      	ldr	r0, [pc, #564]	; (8001014 <main+0x310>)
 8000dde:	f005 fb65 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>

	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000de2:	22c8      	movs	r2, #200	; 0xc8
 8000de4:	498c      	ldr	r1, [pc, #560]	; (8001018 <main+0x314>)
 8000de6:	488d      	ldr	r0, [pc, #564]	; (800101c <main+0x318>)
 8000de8:	f001 f84a 	bl	8001e80 <HAL_DFSDM_FilterRegularStart_DMA>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <main+0xf2>
	{
		Error_Handler();
 8000df2:	f000 fb09 	bl	8001408 <Error_Handler>
	}
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2);
	HAL_UART_Receive_DMA(&huart5, Uart_array, 2);
 8000df6:	2202      	movs	r2, #2
 8000df8:	4989      	ldr	r1, [pc, #548]	; (8001020 <main+0x31c>)
 8000dfa:	488a      	ldr	r0, [pc, #552]	; (8001024 <main+0x320>)
 8000dfc:	f004 faa0 	bl	8005340 <HAL_UART_Receive_DMA>
	while (1)
	{
		if((DmaRightRecHalfBuffCplt == 1))
 8000e00:	4b89      	ldr	r3, [pc, #548]	; (8001028 <main+0x324>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	f040 809f 	bne.w	8000f48 <main+0x244>
		{
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e0a:	4b88      	ldr	r3, [pc, #544]	; (800102c <main+0x328>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e015      	b.n	8000e3e <main+0x13a>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 8000e12:	4b86      	ldr	r3, [pc, #536]	; (800102c <main+0x328>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a80      	ldr	r2, [pc, #512]	; (8001018 <main+0x314>)
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	121a      	asrs	r2, r3, #8
 8000e1e:	4b83      	ldr	r3, [pc, #524]	; (800102c <main+0x328>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	ee07 2a90 	vmov	s15, r2
 8000e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2a:	4a81      	ldr	r2, [pc, #516]	; (8001030 <main+0x32c>)
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	edc3 7a00 	vstr	s15, [r3]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e34:	4b7d      	ldr	r3, [pc, #500]	; (800102c <main+0x328>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a7c      	ldr	r2, [pc, #496]	; (800102c <main+0x328>)
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b7b      	ldr	r3, [pc, #492]	; (800102c <main+0x328>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b63      	cmp	r3, #99	; 0x63
 8000e44:	d9e5      	bls.n	8000e12 <main+0x10e>
			}
			//arm_biquad_cascade_df1_f32
			///arm_biquad_cascade_df2T_f32
			arm_biquad_cascade_df2T_f32(&S1, (float32_t *)&buf_in[0], &buf_out[0],AUDIO_REC/2);
 8000e46:	2364      	movs	r3, #100	; 0x64
 8000e48:	4a7a      	ldr	r2, [pc, #488]	; (8001034 <main+0x330>)
 8000e4a:	4979      	ldr	r1, [pc, #484]	; (8001030 <main+0x32c>)
 8000e4c:	4865      	ldr	r0, [pc, #404]	; (8000fe4 <main+0x2e0>)
 8000e4e:	f005 f971 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000e52:	2364      	movs	r3, #100	; 0x64
 8000e54:	4a77      	ldr	r2, [pc, #476]	; (8001034 <main+0x330>)
 8000e56:	4977      	ldr	r1, [pc, #476]	; (8001034 <main+0x330>)
 8000e58:	4865      	ldr	r0, [pc, #404]	; (8000ff0 <main+0x2ec>)
 8000e5a:	f005 f96b 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	4a74      	ldr	r2, [pc, #464]	; (8001034 <main+0x330>)
 8000e62:	4974      	ldr	r1, [pc, #464]	; (8001034 <main+0x330>)
 8000e64:	4865      	ldr	r0, [pc, #404]	; (8000ffc <main+0x2f8>)
 8000e66:	f005 f965 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000e6a:	2364      	movs	r3, #100	; 0x64
 8000e6c:	4a71      	ldr	r2, [pc, #452]	; (8001034 <main+0x330>)
 8000e6e:	4971      	ldr	r1, [pc, #452]	; (8001034 <main+0x330>)
 8000e70:	4865      	ldr	r0, [pc, #404]	; (8001008 <main+0x304>)
 8000e72:	f005 f95f 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[0],&buf_out[0],AUDIO_REC/2);
 8000e76:	2364      	movs	r3, #100	; 0x64
 8000e78:	4a6e      	ldr	r2, [pc, #440]	; (8001034 <main+0x330>)
 8000e7a:	496e      	ldr	r1, [pc, #440]	; (8001034 <main+0x330>)
 8000e7c:	4865      	ldr	r0, [pc, #404]	; (8001014 <main+0x310>)
 8000e7e:	f005 f959 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			for(i = 0; i < AUDIO_REC/2; i++)
 8000e82:	4b6a      	ldr	r3, [pc, #424]	; (800102c <main+0x328>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e045      	b.n	8000f16 <main+0x212>
			{
				txBuf[i*4]  =  ((int)buf_out[i])>>8;
 8000e8a:	4b68      	ldr	r3, [pc, #416]	; (800102c <main+0x328>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a69      	ldr	r2, [pc, #420]	; (8001034 <main+0x330>)
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9c:	ee17 3a90 	vmov	r3, s15
 8000ea0:	121a      	asrs	r2, r3, #8
 8000ea2:	4b62      	ldr	r3, [pc, #392]	; (800102c <main+0x328>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	b291      	uxth	r1, r2
 8000eaa:	4a63      	ldr	r2, [pc, #396]	; (8001038 <main+0x334>)
 8000eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1]= ((int)buf_out[i])&0xFFFF;
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <main+0x328>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a5f      	ldr	r2, [pc, #380]	; (8001034 <main+0x330>)
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec2:	4b5a      	ldr	r3, [pc, #360]	; (800102c <main+0x328>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	3301      	adds	r3, #1
 8000eca:	ee17 2a90 	vmov	r2, s15
 8000ece:	b291      	uxth	r1, r2
 8000ed0:	4a59      	ldr	r2, [pc, #356]	; (8001038 <main+0x334>)
 8000ed2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 8000ed6:	4b55      	ldr	r3, [pc, #340]	; (800102c <main+0x328>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	009a      	lsls	r2, r3, #2
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <main+0x328>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	4954      	ldr	r1, [pc, #336]	; (8001038 <main+0x334>)
 8000ee6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000eea:	4a53      	ldr	r2, [pc, #332]	; (8001038 <main+0x334>)
 8000eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 8000ef0:	4b4e      	ldr	r3, [pc, #312]	; (800102c <main+0x328>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <main+0x328>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	3303      	adds	r3, #3
 8000f00:	494d      	ldr	r1, [pc, #308]	; (8001038 <main+0x334>)
 8000f02:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f06:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <main+0x334>)
 8000f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000f0c:	4b47      	ldr	r3, [pc, #284]	; (800102c <main+0x328>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a46      	ldr	r2, [pc, #280]	; (800102c <main+0x328>)
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <main+0x328>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b63      	cmp	r3, #99	; 0x63
 8000f1c:	d9b5      	bls.n	8000e8a <main+0x186>
			}

			if(PlaybackStarted == 0)
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <main+0x338>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10d      	bne.n	8000f42 <main+0x23e>
			{
				if(HAL_OK != HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2))
 8000f26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f2a:	4943      	ldr	r1, [pc, #268]	; (8001038 <main+0x334>)
 8000f2c:	4844      	ldr	r0, [pc, #272]	; (8001040 <main+0x33c>)
 8000f2e:	f002 fd43 	bl	80039b8 <HAL_I2S_Transmit_DMA>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <main+0x238>
				{
					Error_Handler();
 8000f38:	f000 fa66 	bl	8001408 <Error_Handler>
				}
				PlaybackStarted = 1;
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <main+0x338>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			}
			DmaRightRecHalfBuffCplt = 0;
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <main+0x324>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <main+0x340>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f47f af57 	bne.w	8000e00 <main+0xfc>
		{
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <main+0x328>)
 8000f54:	2264      	movs	r2, #100	; 0x64
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e015      	b.n	8000f86 <main+0x282>
			{
				buf_in[i]= (float)((int32_t)RightRecBuff[i] >> 8);
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <main+0x328>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <main+0x314>)
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	121a      	asrs	r2, r3, #8
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <main+0x328>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	ee07 2a90 	vmov	s15, r2
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	4a2f      	ldr	r2, [pc, #188]	; (8001030 <main+0x32c>)
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	edc3 7a00 	vstr	s15, [r3]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <main+0x328>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <main+0x328>)
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <main+0x328>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2bc7      	cmp	r3, #199	; 0xc7
 8000f8c:	d9e5      	bls.n	8000f5a <main+0x256>
			}
			arm_biquad_cascade_df2T_f32(&S1,(float32_t *)&buf_in[AUDIO_REC/2] , &buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	4a2d      	ldr	r2, [pc, #180]	; (8001048 <main+0x344>)
 8000f92:	492e      	ldr	r1, [pc, #184]	; (800104c <main+0x348>)
 8000f94:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <main+0x2e0>)
 8000f96:	f005 f8cd 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S2, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	4a2a      	ldr	r2, [pc, #168]	; (8001048 <main+0x344>)
 8000f9e:	492a      	ldr	r1, [pc, #168]	; (8001048 <main+0x344>)
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <main+0x2ec>)
 8000fa2:	f005 f8c7 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S3, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <main+0x344>)
 8000faa:	4927      	ldr	r1, [pc, #156]	; (8001048 <main+0x344>)
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <main+0x2f8>)
 8000fae:	f005 f8c1 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S4, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <main+0x344>)
 8000fb6:	4924      	ldr	r1, [pc, #144]	; (8001048 <main+0x344>)
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <main+0x304>)
 8000fba:	f005 f8bb 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			arm_biquad_cascade_df2T_f32(&S5, &buf_out[AUDIO_REC/2],&buf_out[AUDIO_REC/2],AUDIO_REC/2);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <main+0x344>)
 8000fc2:	4921      	ldr	r1, [pc, #132]	; (8001048 <main+0x344>)
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <main+0x310>)
 8000fc6:	f005 f8b5 	bl	8006134 <arm_biquad_cascade_df2T_f32>
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <main+0x328>)
 8000fcc:	2264      	movs	r2, #100	; 0x64
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e084      	b.n	80010dc <main+0x3d8>
 8000fd2:	bf00      	nop
 8000fd4:	2000f6b0 	.word	0x2000f6b0
 8000fd8:	2000eb8c 	.word	0x2000eb8c
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	2000f7b8 	.word	0x2000f7b8
 8000fe4:	2000f7ec 	.word	0x2000f7ec
 8000fe8:	20002f1c 	.word	0x20002f1c
 8000fec:	2000fb94 	.word	0x2000fb94
 8000ff0:	2000fb88 	.word	0x2000fb88
 8000ff4:	20005e38 	.word	0x20005e38
 8000ff8:	2000f7f8 	.word	0x2000f7f8
 8000ffc:	2000f7ac 	.word	0x2000f7ac
 8001000:	20008d54 	.word	0x20008d54
 8001004:	2000fef0 	.word	0x2000fef0
 8001008:	2000fb7c 	.word	0x2000fb7c
 800100c:	2000bc70 	.word	0x2000bc70
 8001010:	2000fb4c 	.word	0x2000fb4c
 8001014:	2000fee4 	.word	0x2000fee4
 8001018:	2000ec28 	.word	0x2000ec28
 800101c:	2000f5fc 	.word	0x2000f5fc
 8001020:	2000f7e8 	.word	0x2000f7e8
 8001024:	2000ff20 	.word	0x2000ff20
 8001028:	2000f588 	.word	0x2000f588
 800102c:	2000f828 	.word	0x2000f828
 8001030:	2000fbc4 	.word	0x2000fbc4
 8001034:	2000f82c 	.word	0x2000f82c
 8001038:	2000ef48 	.word	0x2000ef48
 800103c:	2000f58a 	.word	0x2000f58a
 8001040:	2000f764 	.word	0x2000f764
 8001044:	2000f589 	.word	0x2000f589
 8001048:	2000f9bc 	.word	0x2000f9bc
 800104c:	2000fd54 	.word	0x2000fd54
			{
				txBuf[i*4]  =  ((int)buf_out[i])>>8;
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <main+0x3e8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <main+0x3ec>)
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001062:	ee17 3a90 	vmov	r3, s15
 8001066:	121a      	asrs	r2, r3, #8
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <main+0x3e8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	b291      	uxth	r1, r2
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <main+0x3f0>)
 8001072:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1]= ((int)buf_out[i])&0xFFFF;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <main+0x3e8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <main+0x3ec>)
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <main+0x3e8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	3301      	adds	r3, #1
 8001090:	ee17 2a90 	vmov	r2, s15
 8001094:	b291      	uxth	r1, r2
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <main+0x3f0>)
 8001098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <main+0x3e8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	009a      	lsls	r2, r3, #2
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <main+0x3e8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	4912      	ldr	r1, [pc, #72]	; (80010f4 <main+0x3f0>)
 80010ac:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010b0:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <main+0x3f0>)
 80010b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <main+0x3e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <main+0x3e8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	3303      	adds	r3, #3
 80010c6:	490b      	ldr	r1, [pc, #44]	; (80010f4 <main+0x3f0>)
 80010c8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010cc:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <main+0x3f0>)
 80010ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <main+0x3e8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <main+0x3e8>)
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <main+0x3e8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2bc7      	cmp	r3, #199	; 0xc7
 80010e2:	d9b5      	bls.n	8001050 <main+0x34c>
			{
				uSample32=PlayBuff[i];
				PlayBuff[i]=  uSample32 <<16 | uSample32 >>16;
			}*/
			//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&txBuf[0], AUDIO_REC*2);
			DmaRightRecBuffCplt = 0;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <main+0x3f4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 80010ea:	e689      	b.n	8000e00 <main+0xfc>
 80010ec:	2000f828 	.word	0x2000f828
 80010f0:	2000f82c 	.word	0x2000f82c
 80010f4:	2000ef48 	.word	0x2000ef48
 80010f8:	2000f589 	.word	0x2000f589

080010fc <HAL_UART_RxCpltCallback>:
/*void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	playSong();
}*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	switch((int8_t)Uart_array[0])
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	3b01      	subs	r3, #1
 800110c:	2b04      	cmp	r3, #4
 800110e:	f200 8083 	bhi.w	8001218 <HAL_UART_RxCpltCallback+0x11c>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <HAL_UART_RxCpltCallback+0x1c>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	0800112d 	.word	0x0800112d
 800111c:	08001161 	.word	0x08001161
 8001120:	08001195 	.word	0x08001195
 8001124:	080011c1 	.word	0x080011c1
 8001128:	080011ed 	.word	0x080011ed
	{
	case 1:
		gainDB[0] =(int8_t)(Uart_array[1]);
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 8001136:	601a      	str	r2, [r3, #0]
		//S1.pCoeffs=&band1_coeff[(5*NUMSTAGES)*(gainDB[0]+10)];
		arm_biquad_cascade_df2T_init_f32(&S1, NUMSTAGES,&band1_coeff[ (5*NUMSTAGES)*(gainDB[0]+MAX_GAIN)],&biquadStateBand1[0]);
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001140:	4613      	mov	r3, r2
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4a37      	ldr	r2, [pc, #220]	; (8001228 <HAL_UART_RxCpltCallback+0x12c>)
 800114a:	441a      	add	r2, r3
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_UART_RxCpltCallback+0x130>)
 800114e:	2103      	movs	r1, #3
 8001150:	4837      	ldr	r0, [pc, #220]	; (8001230 <HAL_UART_RxCpltCallback+0x134>)
 8001152:	f005 f9ab 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001156:	2120      	movs	r1, #32
 8001158:	4836      	ldr	r0, [pc, #216]	; (8001234 <HAL_UART_RxCpltCallback+0x138>)
 800115a:	f001 fd42 	bl	8002be2 <HAL_GPIO_TogglePin>
		break;
 800115e:	e05b      	b.n	8001218 <HAL_UART_RxCpltCallback+0x11c>
	case 2:
		gainDB[1] =(int8_t)(Uart_array[1]);
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 800116a:	605a      	str	r2, [r3, #4]
		//S2.pCoeffs=&band2_coeff[(5*NUMSTAGES)*(gainDB[1]+10)];
		arm_biquad_cascade_df2T_init_f32(&S2, NUMSTAGES,&band2_coeff[ (5*NUMSTAGES)*(gainDB[1]+MAX_GAIN)],&biquadStateBand2[0]);
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001174:	4613      	mov	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <HAL_UART_RxCpltCallback+0x13c>)
 800117e:	441a      	add	r2, r3
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_UART_RxCpltCallback+0x140>)
 8001182:	2103      	movs	r1, #3
 8001184:	482e      	ldr	r0, [pc, #184]	; (8001240 <HAL_UART_RxCpltCallback+0x144>)
 8001186:	f005 f991 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800118a:	2120      	movs	r1, #32
 800118c:	4829      	ldr	r0, [pc, #164]	; (8001234 <HAL_UART_RxCpltCallback+0x138>)
 800118e:	f001 fd28 	bl	8002be2 <HAL_GPIO_TogglePin>
		break;
 8001192:	e041      	b.n	8001218 <HAL_UART_RxCpltCallback+0x11c>
	case 3:
		gainDB[2] =(int8_t)(Uart_array[1]);
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 800119e:	609a      	str	r2, [r3, #8]
		arm_biquad_cascade_df2T_init_f32(&S3, NUMSTAGES,&band3_coeff[ (5*NUMSTAGES)*(gainDB[2]+MAX_GAIN)],&biquadStateBand3[0]);
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80011a8:	4613      	mov	r3, r2
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <HAL_UART_RxCpltCallback+0x148>)
 80011b2:	441a      	add	r2, r3
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_UART_RxCpltCallback+0x14c>)
 80011b6:	2103      	movs	r1, #3
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <HAL_UART_RxCpltCallback+0x150>)
 80011ba:	f005 f977 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
		break;
 80011be:	e02b      	b.n	8001218 <HAL_UART_RxCpltCallback+0x11c>
	case 4:
		gainDB[3] =(int8_t)(Uart_array[1]);
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 80011ca:	60da      	str	r2, [r3, #12]
		arm_biquad_cascade_df2T_init_f32(&S4, NUMSTAGES,&band4_coeff[ (5*NUMSTAGES)*(gainDB[3]+MAX_GAIN)],&biquadStateBand4[0]);
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80011d4:	4613      	mov	r3, r2
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_UART_RxCpltCallback+0x154>)
 80011de:	441a      	add	r2, r3
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_RxCpltCallback+0x158>)
 80011e2:	2103      	movs	r1, #3
 80011e4:	481c      	ldr	r0, [pc, #112]	; (8001258 <HAL_UART_RxCpltCallback+0x15c>)
 80011e6:	f005 f961 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
		break;
 80011ea:	e015      	b.n	8001218 <HAL_UART_RxCpltCallback+0x11c>
	case 5:
		gainDB[4] =(int8_t)(Uart_array[1]);
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_UART_RxCpltCallback+0x124>)
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 80011f6:	611a      	str	r2, [r3, #16]
		arm_biquad_cascade_df2T_init_f32(&S5, NUMSTAGES,&band5_coeff[ (5*NUMSTAGES)*(gainDB[4]+MAX_GAIN)],&biquadStateBand5[0]);
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_UART_RxCpltCallback+0x128>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001200:	4613      	mov	r3, r2
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_UART_RxCpltCallback+0x160>)
 800120a:	441a      	add	r2, r3
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UART_RxCpltCallback+0x164>)
 800120e:	2103      	movs	r1, #3
 8001210:	4814      	ldr	r0, [pc, #80]	; (8001264 <HAL_UART_RxCpltCallback+0x168>)
 8001212:	f005 f94b 	bl	80064ac <arm_biquad_cascade_df2T_init_f32>
		break;
 8001216:	bf00      	nop
	}
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000f7e8 	.word	0x2000f7e8
 8001224:	2000eb8c 	.word	0x2000eb8c
 8001228:	20000000 	.word	0x20000000
 800122c:	2000f7b8 	.word	0x2000f7b8
 8001230:	2000f7ec 	.word	0x2000f7ec
 8001234:	40020000 	.word	0x40020000
 8001238:	20002f1c 	.word	0x20002f1c
 800123c:	2000fb94 	.word	0x2000fb94
 8001240:	2000fb88 	.word	0x2000fb88
 8001244:	20005e38 	.word	0x20005e38
 8001248:	2000f7f8 	.word	0x2000f7f8
 800124c:	2000f7ac 	.word	0x2000f7ac
 8001250:	20008d54 	.word	0x20008d54
 8001254:	2000fef0 	.word	0x2000fef0
 8001258:	2000fb7c 	.word	0x2000fb7c
 800125c:	2000bc70 	.word	0x2000bc70
 8001260:	2000fb4c 	.word	0x2000fb4c
 8001264:	2000fee4 	.word	0x2000fee4

08001268 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	DmaRightRecHalfBuffCplt = 1;
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000f588 	.word	0x2000f588

08001288 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	DmaRightRecBuffCplt = 1;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000f589 	.word	0x2000f589

080012a8 <TestBlinking>:
void TestBlinking(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2120      	movs	r1, #32
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <TestBlinking+0x2c>)
 80012b2:	f001 fc7d 	bl	8002bb0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f000 fa8b 	bl	80017d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2120      	movs	r1, #32
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <TestBlinking+0x2c>)
 80012c4:	f001 fc74 	bl	8002bb0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f000 fa82 	bl	80017d4 <HAL_Delay>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40020000 	.word	0x40020000

080012d8 <SystemClock_Config>:
  * @brief  The application entry point.
  * @retval int
  */
#include "body_df2T_mono.h"
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0aa      	sub	sp, #168	; 0xa8
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e2:	2234      	movs	r2, #52	; 0x34
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 f91b 	bl	8006522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	2258      	movs	r2, #88	; 0x58
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f005 f90c 	bl	8006522 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <SystemClock_Config+0x128>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <SystemClock_Config+0x128>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <SystemClock_Config+0x128>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <SystemClock_Config+0x12c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a35      	ldr	r2, [pc, #212]	; (8001404 <SystemClock_Config+0x12c>)
 8001330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <SystemClock_Config+0x12c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001342:	2302      	movs	r3, #2
 8001344:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 10;
 800135e:	230a      	movs	r3, #10
 8001360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001364:	2350      	movs	r3, #80	; 0x50
 8001366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 5;
 8001376:	2305      	movs	r3, #5
 8001378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fd4d 	bl	8004e20 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800138c:	f000 f83c 	bl	8001408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013aa:	2102      	movs	r1, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 ff69 	bl	8004284 <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80013b8:	f000 f826 	bl	8001408 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80013bc:	f240 3301 	movw	r3, #769	; 0x301
 80013c0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_DFSDM1_AUDIO;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 80013c6:	230a      	movs	r3, #10
 80013c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80013ca:	2305      	movs	r3, #5
 80013cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80013d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80013dc:	2300      	movs	r3, #0
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f93d 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80013f4:	f000 f808 	bl	8001408 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	37a8      	adds	r7, #168	; 0xa8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x4c>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x4c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f96a 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ca:	f000 ff77 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000ff60 	.word	0x2000ff60

080014d8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <DMA1_Stream7_IRQHandler+0x10>)
 80014de:	f000 ff6d 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000f704 	.word	0x2000f704

080014ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <UART5_IRQHandler+0x10>)
 80014f2:	f003 ffa5 	bl	8005440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000ff20 	.word	0x2000ff20

08001500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream0_IRQHandler+0x10>)
 8001506:	f000 ff59 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000f650 	.word	0x2000f650

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <SystemInit+0x28>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a07      	ldr	r2, [pc, #28]	; (800153c <SystemInit+0x28>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <SystemInit+0x28>)
 800152a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152e:	609a      	str	r2, [r3, #8]
#endif
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_UART5_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_UART5_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_UART5_Init+0x4c>)
 800154c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001550:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_UART5_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_UART5_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_UART5_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_UART5_Init+0x4c>)
 8001566:	2204      	movs	r2, #4
 8001568:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_UART5_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_UART5_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_UART5_Init+0x4c>)
 8001578:	f003 fe94 	bl	80052a4 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001582:	f7ff ff41 	bl	8001408 <Error_Handler>
  }

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000ff20 	.word	0x2000ff20
 8001590:	40005000 	.word	0x40005000

08001594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a35      	ldr	r2, [pc, #212]	; (8001688 <HAL_UART_MspInit+0xf4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d163      	bne.n	800167e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2c      	ldr	r2, [pc, #176]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001600:	230b      	movs	r3, #11
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4821      	ldr	r0, [pc, #132]	; (8001690 <HAL_UART_MspInit+0xfc>)
 800160c:	f001 f93e 	bl	800288c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_UART_MspInit+0x104>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_UART_MspInit+0x100>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_UART_MspInit+0x100>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_UART_MspInit+0x100>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001654:	f000 fd8a 	bl	800216c <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800165e:	f7ff fed3 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_UART_MspInit+0x100>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2035      	movs	r0, #53	; 0x35
 8001674:	f000 f9ab 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001678:	2035      	movs	r0, #53	; 0x35
 800167a:	f000 f9c4 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005000 	.word	0x40005000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400
 8001694:	2000ff60 	.word	0x2000ff60
 8001698:	40026010 	.word	0x40026010

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80016a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a2:	e003      	b.n	80016ac <LoopCopyDataInit>

080016a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016aa:	3104      	adds	r1, #4

080016ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b4:	d3f6      	bcc.n	80016a4 <CopyDataInit>
  ldr  r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b8:	e002      	b.n	80016c0 <LoopFillZerobss>

080016ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80016ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016bc:	f842 3b04 	str.w	r3, [r2], #4

080016c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c4:	d3f9      	bcc.n	80016ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ff25 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f004 fefb 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fb19 	bl	8000d04 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80016d8:	08006590 	.word	0x08006590
  ldr  r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016e0:	2000ebac 	.word	0x2000ebac
  ldr  r2, =_sbss
 80016e4:	2000ebac 	.word	0x2000ebac
  ldr  r3, = _ebss
 80016e8:	2000ffc4 	.word	0x2000ffc4

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f94d 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fe78 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f965 	bl	8001a22 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f92d 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000eba0 	.word	0x2000eba0
 800178c:	2000eba8 	.word	0x2000eba8
 8001790:	2000eba4 	.word	0x2000eba4

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2000eba8 	.word	0x2000eba8
 80017b8:	2000ffc0 	.word	0x2000ffc0

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000ffc0 	.word	0x2000ffc0

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_Delay+0x40>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000eba8 	.word	0x2000eba8

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0cf      	b.n	8001bee <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00e      	beq.n	8001a76 <HAL_DFSDM_ChannelInit+0x3a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a67      	ldr	r2, [pc, #412]	; (8001bfc <HAL_DFSDM_ChannelInit+0x1c0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_DFSDM_ChannelInit+0x3a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_DFSDM_ChannelInit+0x1c4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_DFSDM_ChannelInit+0x3a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a64      	ldr	r2, [pc, #400]	; (8001c04 <HAL_DFSDM_ChannelInit+0x1c8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d106      	bne.n	8001a84 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <HAL_DFSDM_ChannelInit+0x1cc>)
 8001a78:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <HAL_DFSDM_ChannelInit+0x1d0>)
 8001a7c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e005      	b.n	8001a90 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8001a84:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_DFSDM_ChannelInit+0x1d4>)
 8001a86:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8001a88:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <HAL_DFSDM_ChannelInit+0x1d8>)
 8001a8a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8001a8c:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_DFSDM_ChannelInit+0x1dc>)
 8001a8e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 faaf 	bl	8001ff8 <DFSDM_GetChannelFromInstance>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0a0      	b.n	8001bee <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7fe fed5 	bl	800085c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d125      	bne.n	8001b10 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001b34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020f 	bic.w	r2, r2, #15
 8001b4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
 8001b86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f002 0207 	and.w	r2, r2, #7
 8001ba0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6859      	ldr	r1, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bcc:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fa0c 	bl	8001ff8 <DFSDM_GetChannelFromInstance>
 8001be0:	4603      	mov	r3, r0
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40016000 	.word	0x40016000
 8001bfc:	40016020 	.word	0x40016020
 8001c00:	40016040 	.word	0x40016040
 8001c04:	40016060 	.word	0x40016060
 8001c08:	2000f58c 	.word	0x2000f58c
 8001c0c:	2000f590 	.word	0x2000f590
 8001c10:	2000f5a0 	.word	0x2000f5a0
 8001c14:	2000f5a4 	.word	0x2000f5a4
 8001c18:	40016400 	.word	0x40016400

08001c1c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0d9      	b.n	8001de2 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_DFSDM_FilterInit+0x1d0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d003      	beq.n	8001c48 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0ca      	b.n	8001de2 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <HAL_DFSDM_FilterInit+0x1d4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d109      	bne.n	8001c6a <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d003      	beq.n	8001c66 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0bb      	b.n	8001de2 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fd34 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001c96:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a1b      	ldrb	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7a5b      	ldrb	r3, [r3, #9]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e007      	b.n	8001cec <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001cfa:	f023 0308 	bic.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d108      	bne.n	8001d1a <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c1b      	ldrb	r3, [r3, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0210 	orr.w	r2, r2, #16
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e007      	b.n	8001d44 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0210 	bic.w	r2, r2, #16
 8001d42:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7c5b      	ldrb	r3, [r3, #17]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0220 	bic.w	r2, r2, #32
 8001d6c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001d7c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001d80:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6959      	ldr	r1, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d94:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d9c:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7c1a      	ldrb	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40016100 	.word	0x40016100
 8001df0:	40016500 	.word	0x40016500

08001df4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d02e      	beq.n	8001e6c <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d029      	beq.n	8001e6c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10d      	bne.n	8001e4e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e00a      	b.n	8001e64 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6a:	e001      	b.n	8001e70 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	75fb      	strb	r3, [r7, #23]
 8001ea0:	e066      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb0:	d002      	beq.n	8001eb8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
 8001eb6:	e05b      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10e      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	e048      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	d102      	bne.n	8001f00 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
 8001efe:	e037      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d004      	beq.n	8001f14 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d12b      	bne.n	8001f6c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001f22:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d101      	bne.n	8001f34 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001f32:	e000      	b.n	8001f36 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001f34:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	331c      	adds	r3, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f000 f9bc 	bl	80022c8 <HAL_DMA_Start_IT>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	; 0xff
 8001f5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f62:	e005      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f8ab 	bl	80020c0 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f6a:	e001      	b.n	8001f70 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08001fb9 	.word	0x08001fb9
 8001f80:	08001fd5 	.word	0x08001fd5
 8001f84:	08001f9d 	.word	0x08001f9d

08001f88 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff f95c 	bl	8001268 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff f95e 	bl	8001288 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff ffcd 	bl	8001f88 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <DFSDM_GetChannelFromInstance+0x9c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <DFSDM_GetChannelFromInstance+0x18>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <DFSDM_GetChannelFromInstance+0xa0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e037      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <DFSDM_GetChannelFromInstance+0xa4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <DFSDM_GetChannelFromInstance+0x2e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d102      	bne.n	800202c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002026:	2301      	movs	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e02c      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <DFSDM_GetChannelFromInstance+0xac>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <DFSDM_GetChannelFromInstance+0x44>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d102      	bne.n	8002042 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800203c:	2302      	movs	r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e021      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <DFSDM_GetChannelFromInstance+0xb4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <DFSDM_GetChannelFromInstance+0x5a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <DFSDM_GetChannelFromInstance+0xb8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d102      	bne.n	8002058 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002052:	2303      	movs	r3, #3
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e016      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <DFSDM_GetChannelFromInstance+0xbc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002060:	2304      	movs	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e00f      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <DFSDM_GetChannelFromInstance+0xc0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d102      	bne.n	8002074 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800206e:	2305      	movs	r3, #5
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e008      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <DFSDM_GetChannelFromInstance+0xc4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d102      	bne.n	8002082 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800207c:	2306      	movs	r3, #6
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e001      	b.n	8002086 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002082:	2307      	movs	r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40016000 	.word	0x40016000
 8002098:	40016400 	.word	0x40016400
 800209c:	40016020 	.word	0x40016020
 80020a0:	40016420 	.word	0x40016420
 80020a4:	40016040 	.word	0x40016040
 80020a8:	40016440 	.word	0x40016440
 80020ac:	40016060 	.word	0x40016060
 80020b0:	40016460 	.word	0x40016460
 80020b4:	40016480 	.word	0x40016480
 80020b8:	400164a0 	.word	0x400164a0
 80020bc:	400164c0 	.word	0x400164c0

080020c0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e033      	b.n	800214a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002100:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002118:	2b03      	cmp	r3, #3
 800211a:	d116      	bne.n	800214a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0202 	orr.w	r2, r2, #2
 8002132:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <DFSDM_RegConvStart+0x84>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	e000      	b.n	8002146 <DFSDM_RegConvStart+0x86>
 8002144:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <DFSDM_RegConvStart+0x98>
 8002154:	2202      	movs	r2, #2
 8002156:	e000      	b.n	800215a <DFSDM_RegConvStart+0x9a>
 8002158:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff fb20 	bl	80017bc <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e099      	b.n	80022bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a8:	e00f      	b.n	80021ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021aa:	f7ff fb07 	bl	80017bc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d908      	bls.n	80021ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e078      	b.n	80022bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e8      	bne.n	80021aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_DMA_Init+0x158>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002202:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2b04      	cmp	r3, #4
 8002222:	d107      	bne.n	8002234 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4313      	orrs	r3, r2
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0307 	bic.w	r3, r3, #7
 800224a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b04      	cmp	r3, #4
 800225c:	d117      	bne.n	800228e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fa91 	bl	8002798 <DMA_CheckFifoParam>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800228a:	2301      	movs	r3, #1
 800228c:	e016      	b.n	80022bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fa48 	bl	800272c <DMA_CalcBaseAndBitshift>
 800229c:	4603      	mov	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	223f      	movs	r2, #63	; 0x3f
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	e010803f 	.word	0xe010803f

080022c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_DMA_Start_IT+0x26>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e040      	b.n	8002370 <HAL_DMA_Start_IT+0xa8>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d12f      	bne.n	8002362 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9da 	bl	80026d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	223f      	movs	r2, #63	; 0x3f
 8002322:	409a      	lsls	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0216 	orr.w	r2, r2, #22
 8002336:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0208 	orr.w	r2, r2, #8
 800234e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e005      	b.n	800236e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d004      	beq.n	8002396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00c      	b.n	80023b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023c8:	4b92      	ldr	r3, [pc, #584]	; (8002614 <HAL_DMA_IRQHandler+0x258>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a92      	ldr	r2, [pc, #584]	; (8002618 <HAL_DMA_IRQHandler+0x25c>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2208      	movs	r2, #8
 80023e8:	409a      	lsls	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2208      	movs	r2, #8
 8002416:	409a      	lsls	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	2201      	movs	r2, #1
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2201      	movs	r2, #1
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	2204      	movs	r2, #4
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2210      	movs	r2, #16
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d043      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d03c      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2210      	movs	r2, #16
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d024      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
 80024ea:	e01f      	b.n	800252c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e016      	b.n	800252c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d107      	bne.n	800251c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0208 	bic.w	r2, r2, #8
 800251a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	2220      	movs	r2, #32
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 808e 	beq.w	800265a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8086 	beq.w	800265a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2220      	movs	r2, #32
 8002554:	409a      	lsls	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d136      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0216 	bic.w	r2, r2, #22
 8002574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_DMA_IRQHandler+0x1da>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	223f      	movs	r2, #63	; 0x3f
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d07d      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
        }
        return;
 80025d2:	e078      	b.n	80026c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01c      	beq.n	800261c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d030      	beq.n	800265a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e02b      	b.n	800265a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d027      	beq.n	800265a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
 8002612:	e022      	b.n	800265a <HAL_DMA_IRQHandler+0x29e>
 8002614:	2000eba0 	.word	0x2000eba0
 8002618:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0210 	bic.w	r2, r2, #16
 8002638:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	2b00      	cmp	r3, #0
 8002660:	d032      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2205      	movs	r2, #5
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3301      	adds	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	429a      	cmp	r2, r3
 8002690:	d307      	bcc.n	80026a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f2      	bne.n	8002686 <HAL_DMA_IRQHandler+0x2ca>
 80026a0:	e000      	b.n	80026a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e000      	b.n	80026c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026c6:	bf00      	nop
    }
  }
}
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop

080026d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d108      	bne.n	8002710 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800270e:	e007      	b.n	8002720 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3b10      	subs	r3, #16
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <DMA_CalcBaseAndBitshift+0x64>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <DMA_CalcBaseAndBitshift+0x68>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d909      	bls.n	800276e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	1d1a      	adds	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58
 800276c:	e007      	b.n	800277e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	aaaaaaab 	.word	0xaaaaaaab
 8002794:	08006578 	.word	0x08006578

08002798 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11f      	bne.n	80027f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d855      	bhi.n	8002864 <DMA_CheckFifoParam+0xcc>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <DMA_CheckFifoParam+0x28>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	080027d1 	.word	0x080027d1
 80027cc:	08002865 	.word	0x08002865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d045      	beq.n	8002868 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e042      	b.n	8002868 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ea:	d13f      	bne.n	800286c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e03c      	b.n	800286c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d121      	bne.n	8002840 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d836      	bhi.n	8002870 <DMA_CheckFifoParam+0xd8>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <DMA_CheckFifoParam+0x70>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	08002819 	.word	0x08002819
 800280c:	0800281f 	.word	0x0800281f
 8002810:	08002819 	.word	0x08002819
 8002814:	08002831 	.word	0x08002831
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      break;
 800281c:	e02f      	b.n	800287e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d024      	beq.n	8002874 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282e:	e021      	b.n	8002874 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002838:	d11e      	bne.n	8002878 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800283e:	e01b      	b.n	8002878 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <DMA_CheckFifoParam+0xb4>
 8002846:	2b03      	cmp	r3, #3
 8002848:	d003      	beq.n	8002852 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800284a:	e018      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e015      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00e      	beq.n	800287c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
      break;
 8002862:	e00b      	b.n	800287c <DMA_CheckFifoParam+0xe4>
      break;
 8002864:	bf00      	nop
 8002866:	e00a      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 8002868:	bf00      	nop
 800286a:	e008      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 800286c:	bf00      	nop
 800286e:	e006      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 8002870:	bf00      	nop
 8002872:	e004      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 8002874:	bf00      	nop
 8002876:	e002      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;   
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <DMA_CheckFifoParam+0xe6>
      break;
 800287c:	bf00      	nop
    }
  } 
  
  return status; 
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e165      	b.n	8002b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8154 	bne.w	8002b6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d00b      	beq.n	80028e6 <HAL_GPIO_Init+0x5a>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028da:	2b11      	cmp	r3, #17
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d130      	bne.n	8002948 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 0201 	and.w	r2, r3, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0xfc>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b12      	cmp	r3, #18
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80ae 	beq.w	8002b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_GPIO_Init+0x304>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x21a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x308>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x216>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x212>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <HAL_GPIO_Init+0x310>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x20a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x206>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x202>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x21c>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_GPIO_Init+0x300>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aea:	4a30      	ldr	r2, [pc, #192]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b68:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae96 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3724      	adds	r7, #36	; 0x24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d104      	bne.n	8002c06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e11f      	b.n	8002e6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd ff4c 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f001 fccc 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <HAL_I2C_Init+0x25c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d807      	bhi.n	8002c9c <HAL_I2C_Init+0x84>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <HAL_I2C_Init+0x260>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e006      	b.n	8002caa <HAL_I2C_Init+0x92>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a77      	ldr	r2, [pc, #476]	; (8002e7c <HAL_I2C_Init+0x264>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0db      	b.n	8002e6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a72      	ldr	r2, [pc, #456]	; (8002e80 <HAL_I2C_Init+0x268>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a64      	ldr	r2, [pc, #400]	; (8002e74 <HAL_I2C_Init+0x25c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <HAL_I2C_Init+0xd4>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	e009      	b.n	8002d00 <HAL_I2C_Init+0xe8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_I2C_Init+0x26c>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	3301      	adds	r3, #1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4956      	ldr	r1, [pc, #344]	; (8002e74 <HAL_I2C_Init+0x25c>)
 8002d1c:	428b      	cmp	r3, r1
 8002d1e:	d80d      	bhi.n	8002d3c <HAL_I2C_Init+0x124>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e59      	subs	r1, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	bf38      	it	cc
 8002d38:	2304      	movcc	r3, #4
 8002d3a:	e04f      	b.n	8002ddc <HAL_I2C_Init+0x1c4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_I2C_Init+0x150>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	440b      	add	r3, r1
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e012      	b.n	8002d8e <HAL_I2C_Init+0x176>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Init+0x17e>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e022      	b.n	8002ddc <HAL_I2C_Init+0x1c4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <HAL_I2C_Init+0x1a4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e58      	subs	r0, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	440b      	add	r3, r1
 8002dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dba:	e00f      	b.n	8002ddc <HAL_I2C_Init+0x1c4>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1e58      	subs	r0, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	0099      	lsls	r1, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	6809      	ldr	r1, [r1, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6911      	ldr	r1, [r2, #16]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	4311      	orrs	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	000186a0 	.word	0x000186a0
 8002e78:	001e847f 	.word	0x001e847f
 8002e7c:	003d08ff 	.word	0x003d08ff
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	460b      	mov	r3, r1
 8002e96:	817b      	strh	r3, [r7, #10]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7fe fc8e 	bl	80017bc <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 80e0 	bne.w	8003070 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4970      	ldr	r1, [pc, #448]	; (800307c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa92 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0d3      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x50>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0cc      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d007      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2221      	movs	r2, #33	; 0x21
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a50      	ldr	r2, [pc, #320]	; (8003080 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f9ca 	bl	80032e0 <I2C_MasterRequestWrite>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e08d      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f6c:	e066      	b.n	800303c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6a39      	ldr	r1, [r7, #32]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fb0c 	bl	8003590 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d107      	bne.n	8002f96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06b      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_I2C_Master_Transmit+0x188>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6a39      	ldr	r1, [r7, #32]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fafc 	bl	8003612 <I2C_WaitOnBTFFlagUntilTimeout>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b04      	cmp	r3, #4
 8003026:	d107      	bne.n	8003038 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e01a      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d194      	bne.n	8002f6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00100002 	.word	0x00100002
 8003080:	ffff0000 	.word	0xffff0000

08003084 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7fe fb92 	bl	80017bc <HAL_GetTick>
 8003098:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 8110 	bne.w	80032cc <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4988      	ldr	r1, [pc, #544]	; (80032d8 <HAL_I2C_IsDeviceReady+0x254>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f994 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e103      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_IsDeviceReady+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0fc      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2224      	movs	r2, #36	; 0x24
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a70      	ldr	r2, [pc, #448]	; (80032dc <HAL_I2C_IsDeviceReady+0x258>)
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f952 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e0b6      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800316e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003170:	f7fe fb24 	bl	80017bc <HAL_GetTick>
 8003174:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a4:	e025      	b.n	80031f2 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe fb09 	bl	80017bc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <HAL_I2C_IsDeviceReady+0x138>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22a0      	movs	r2, #160	; 0xa0
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2ba0      	cmp	r3, #160	; 0xa0
 80031fc:	d005      	beq.n	800320a <HAL_I2C_IsDeviceReady+0x186>
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_I2C_IsDeviceReady+0x186>
 8003204:	7dbb      	ldrb	r3, [r7, #22]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0cd      	beq.n	80031a6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d129      	bne.n	8003274 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2319      	movs	r3, #25
 800324c:	2201      	movs	r2, #1
 800324e:	4922      	ldr	r1, [pc, #136]	; (80032d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f8c7 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e036      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e02c      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800328c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2319      	movs	r3, #25
 8003294:	2201      	movs	r2, #1
 8003296:	4910      	ldr	r1, [pc, #64]	; (80032d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f8a3 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e012      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f4ff af33 	bcc.w	800311e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000

080032e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	460b      	mov	r3, r1
 80032ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d006      	beq.n	800330a <I2C_MasterRequestWrite+0x2a>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d003      	beq.n	800330a <I2C_MasterRequestWrite+0x2a>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003308:	d108      	bne.n	800331c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e00b      	b.n	8003334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	2b12      	cmp	r3, #18
 8003322:	d107      	bne.n	8003334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f84f 	bl	80033e4 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e035      	b.n	80033d2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800336e:	d108      	bne.n	8003382 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	e01b      	b.n	80033ba <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	11db      	asrs	r3, r3, #7
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f003 0306 	and.w	r3, r3, #6
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f063 030f 	orn	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	490f      	ldr	r1, [pc, #60]	; (80033dc <I2C_MasterRequestWrite+0xfc>)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f876 	bl	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e010      	b.n	80033d2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033b0:	897b      	ldrh	r3, [r7, #10]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4908      	ldr	r1, [pc, #32]	; (80033e0 <I2C_MasterRequestWrite+0x100>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f866 	bl	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	00010008 	.word	0x00010008
 80033e0:	00010002 	.word	0x00010002

080033e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f4:	e025      	b.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d021      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7fe f9dd 	bl	80017bc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d116      	bne.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e023      	b.n	800348a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10d      	bne.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	e00c      	b.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	429a      	cmp	r2, r3
 8003486:	d0b6      	beq.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a0:	e051      	b.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d123      	bne.n	80034fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e046      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d021      	beq.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe f95b 	bl	80017bc <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e020      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10c      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e00b      	b.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d18d      	bne.n	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800359c:	e02d      	b.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f878 	bl	8003694 <I2C_IsAcknowledgeFailed>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e02d      	b.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d021      	beq.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe f901 	bl	80017bc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d1ca      	bne.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800361e:	e02d      	b.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f837 	bl	8003694 <I2C_IsAcknowledgeFailed>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e02d      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d021      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003638:	f7fe f8c0 	bl	80017bc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d1ca      	bne.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d11b      	bne.n	80036e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e154      	b.n	80039b0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a98      	ldr	r2, [pc, #608]	; (8003980 <HAL_I2S_Init+0x28c>)
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fa51 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800373c:	f023 030f 	bic.w	r3, r3, #15
 8003740:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d06f      	beq.n	8003832 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800375a:	2310      	movs	r3, #16
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e001      	b.n	8003764 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b20      	cmp	r3, #32
 800376a:	d802      	bhi.n	8003772 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a83      	ldr	r2, [pc, #524]	; (8003984 <HAL_I2S_Init+0x290>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_I2S_Init+0x92>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a81      	ldr	r2, [pc, #516]	; (8003988 <HAL_I2S_Init+0x294>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d104      	bne.n	8003790 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8003786:	2001      	movs	r0, #1
 8003788:	f001 f9fa 	bl	8004b80 <HAL_RCCEx_GetPeriphCLKFreq>
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	e003      	b.n	8003798 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8003790:	2002      	movs	r0, #2
 8003792:	f001 f9f5 	bl	8004b80 <HAL_RCCEx_GetPeriphCLKFreq>
 8003796:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d125      	bne.n	80037ee <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	3305      	adds	r3, #5
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e01f      	b.n	800380c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	3305      	adds	r3, #5
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e00e      	b.n	800380c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	3305      	adds	r3, #5
 800380a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4a5f      	ldr	r2, [pc, #380]	; (800398c <HAL_I2S_Init+0x298>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e003      	b.n	800383a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003832:	2302      	movs	r3, #2
 8003834:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d902      	bls.n	8003846 <HAL_I2S_Init+0x152>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d907      	bls.n	8003856 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0ac      	b.n	80039b0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	430a      	orrs	r2, r1
 8003868:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003874:	f023 030f 	bic.w	r3, r3, #15
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6851      	ldr	r1, [r2, #4]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6992      	ldr	r2, [r2, #24]
 800388c:	430a      	orrs	r2, r1
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003898:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	d003      	beq.n	80038aa <HAL_I2S_Init+0x1b6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2bb0      	cmp	r3, #176	; 0xb0
 80038a8:	d107      	bne.n	80038ba <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038b8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d16e      	bne.n	80039a0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a32      	ldr	r2, [pc, #200]	; (8003990 <HAL_I2S_Init+0x29c>)
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a2d      	ldr	r2, [pc, #180]	; (8003984 <HAL_I2S_Init+0x290>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_I2S_Init+0x1e2>
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_I2S_Init+0x2a0>)
 80038d4:	e001      	b.n	80038da <HAL_I2S_Init+0x1e6>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4928      	ldr	r1, [pc, #160]	; (8003984 <HAL_I2S_Init+0x290>)
 80038e2:	428a      	cmp	r2, r1
 80038e4:	d101      	bne.n	80038ea <HAL_I2S_Init+0x1f6>
 80038e6:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <HAL_I2S_Init+0x2a0>)
 80038e8:	e001      	b.n	80038ee <HAL_I2S_Init+0x1fa>
 80038ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038f2:	f023 030f 	bic.w	r3, r3, #15
 80038f6:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <HAL_I2S_Init+0x290>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_I2S_Init+0x212>
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_I2S_Init+0x2a0>)
 8003904:	e001      	b.n	800390a <HAL_I2S_Init+0x216>
 8003906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390a:	2202      	movs	r2, #2
 800390c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_I2S_Init+0x290>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_I2S_Init+0x228>
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_I2S_Init+0x2a0>)
 800391a:	e001      	b.n	8003920 <HAL_I2S_Init+0x22c>
 800391c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392c:	d003      	beq.n	8003936 <HAL_I2S_Init+0x242>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e001      	b.n	8003942 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	b299      	uxth	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003958:	4303      	orrs	r3, r0
 800395a:	b29b      	uxth	r3, r3
 800395c:	430b      	orrs	r3, r1
 800395e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003960:	4313      	orrs	r3, r2
 8003962:	b29a      	uxth	r2, r3
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	4313      	orrs	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800396e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_I2S_Init+0x290>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10e      	bne.n	8003998 <HAL_I2S_Init+0x2a4>
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_I2S_Init+0x2a0>)
 800397c:	e00e      	b.n	800399c <HAL_I2S_Init+0x2a8>
 800397e:	bf00      	nop
 8003980:	08003cbd 	.word	0x08003cbd
 8003984:	40003800 	.word	0x40003800
 8003988:	40003c00 	.word	0x40003c00
 800398c:	cccccccd 	.word	0xcccccccd
 8003990:	08003dd1 	.word	0x08003dd1
 8003994:	40003400 	.word	0x40003400
 8003998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399c:	897a      	ldrh	r2, [r7, #10]
 800399e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_I2S_Transmit_DMA+0x1a>
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08e      	b.n	8003af4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_I2S_Transmit_DMA+0x2e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e086      	b.n	8003af4 <HAL_I2S_Transmit_DMA+0x13c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d005      	beq.n	8003a06 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	e076      	b.n	8003af4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d002      	beq.n	8003a32 <HAL_I2S_Transmit_DMA+0x7a>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10a      	bne.n	8003a48 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a46:	e005      	b.n	8003a54 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	4a28      	ldr	r2, [pc, #160]	; (8003afc <HAL_I2S_Transmit_DMA+0x144>)
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <HAL_I2S_Transmit_DMA+0x148>)
 8003a62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <HAL_I2S_Transmit_DMA+0x14c>)
 8003a6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003a74:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003a7c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003a84:	f7fe fc20 	bl	80022c8 <HAL_DMA_Start_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00f      	beq.n	8003aae <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e022      	b.n	8003af4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aca:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0202 	orr.w	r2, r2, #2
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08003b9b 	.word	0x08003b9b
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003bb7 	.word	0x08003bb7

08003b08 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0202 	bic.w	r2, r2, #2
 8003b7c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ffc5 	bl	8003b1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ffad 	bl	8003b08 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0203 	bic.w	r2, r2, #3
 8003bd2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f043 0208 	orr.w	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff ffa5 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10e      	bne.n	8003c56 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff63 	bl	8003b1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	b292      	uxth	r2, r2
 8003c72:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	1c9a      	adds	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff3e 	bl	8003b30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d13a      	bne.n	8003d4e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d109      	bne.n	8003cf6 <I2S_IRQHandler+0x3a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d102      	bne.n	8003cf6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffb4 	bl	8003c5e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d126      	bne.n	8003d4e <I2S_IRQHandler+0x92>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d11f      	bne.n	8003d4e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f043 0202 	orr.w	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fefb 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d136      	bne.n	8003dc8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d109      	bne.n	8003d78 <I2S_IRQHandler+0xbc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d102      	bne.n	8003d78 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff45 	bl	8003c02 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d122      	bne.n	8003dc8 <I2S_IRQHandler+0x10c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d11b      	bne.n	8003dc8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f043 0204 	orr.w	r2, r3, #4
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff febe 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4aa2      	ldr	r2, [pc, #648]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dea:	4ba2      	ldr	r3, [pc, #648]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dec:	e001      	b.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a9b      	ldr	r2, [pc, #620]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e08:	4b9a      	ldr	r3, [pc, #616]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e0a:	e001      	b.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d004      	beq.n	8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 8099 	bne.w	8003f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d107      	bne.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f925 	bl	800408c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9c8 	bl	80041ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d13a      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d035      	beq.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7e      	ldr	r2, [pc, #504]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e7a:	4b7e      	ldr	r3, [pc, #504]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e7c:	e001      	b.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4979      	ldr	r1, [pc, #484]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8a:	428b      	cmp	r3, r1
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e8e:	4b79      	ldr	r3, [pc, #484]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e90:	e001      	b.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fe34 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	f040 80be 	bne.w	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80b8 	beq.w	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a59      	ldr	r2, [pc, #356]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f0e:	4b59      	ldr	r3, [pc, #356]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f10:	e001      	b.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4954      	ldr	r1, [pc, #336]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f1e:	428b      	cmp	r3, r1
 8003f20:	d101      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f22:	4b54      	ldr	r3, [pc, #336]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f24:	e001      	b.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f043 0204 	orr.w	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fdf6 	bl	8003b44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f58:	e084      	b.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d107      	bne.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8be 	bl	80040f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d107      	bne.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8fd 	bl	8004188 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d12f      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02a      	beq.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fbe:	e001      	b.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4929      	ldr	r1, [pc, #164]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd2:	e001      	b.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f043 0202 	orr.w	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fda6 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d131      	bne.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02c      	beq.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004018:	e001      	b.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800401a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4912      	ldr	r1, [pc, #72]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004026:	428b      	cmp	r3, r1
 8004028:	d101      	bne.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800402c:	e001      	b.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004036:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004046:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	f043 0204 	orr.w	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fd71 	bl	8003b44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004062:	e000      	b.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004064:	bf00      	nop
}
 8004066:	bf00      	nop
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40003400 	.word	0x40003400

08004078 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c99      	adds	r1, r3, #2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6251      	str	r1, [r2, #36]	; 0x24
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d113      	bne.n	80040e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ffc9 	bl	8004078 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c99      	adds	r1, r3, #2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6251      	str	r1, [r2, #36]	; 0x24
 8004102:	8819      	ldrh	r1, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <I2SEx_TxISR_I2SExt+0x90>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <I2SEx_TxISR_I2SExt+0x22>
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <I2SEx_TxISR_I2SExt+0x94>)
 8004110:	e001      	b.n	8004116 <I2SEx_TxISR_I2SExt+0x26>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004116:	460a      	mov	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d121      	bne.n	8004176 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <I2SEx_TxISR_I2SExt+0x90>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <I2SEx_TxISR_I2SExt+0x50>
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <I2SEx_TxISR_I2SExt+0x94>)
 800413e:	e001      	b.n	8004144 <I2SEx_TxISR_I2SExt+0x54>
 8004140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	490d      	ldr	r1, [pc, #52]	; (8004180 <I2SEx_TxISR_I2SExt+0x90>)
 800414c:	428b      	cmp	r3, r1
 800414e:	d101      	bne.n	8004154 <I2SEx_TxISR_I2SExt+0x64>
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <I2SEx_TxISR_I2SExt+0x94>)
 8004152:	e001      	b.n	8004158 <I2SEx_TxISR_I2SExt+0x68>
 8004154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800415c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff81 	bl	8004078 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40003800 	.word	0x40003800
 8004184:	40003400 	.word	0x40003400

08004188 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68d8      	ldr	r0, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	1c99      	adds	r1, r3, #2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041a0:	b282      	uxth	r2, r0
 80041a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d113      	bne.n	80041e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ff4a 	bl	8004078 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <I2SEx_RxISR_I2SExt+0x90>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <I2SEx_RxISR_I2SExt+0x16>
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <I2SEx_RxISR_I2SExt+0x94>)
 8004200:	e001      	b.n	8004206 <I2SEx_RxISR_I2SExt+0x1a>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004206:	68d8      	ldr	r0, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	1c99      	adds	r1, r3, #2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004212:	b282      	uxth	r2, r0
 8004214:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d121      	bne.n	8004272 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <I2SEx_RxISR_I2SExt+0x90>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <I2SEx_RxISR_I2SExt+0x50>
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <I2SEx_RxISR_I2SExt+0x94>)
 800423a:	e001      	b.n	8004240 <I2SEx_RxISR_I2SExt+0x54>
 800423c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	490d      	ldr	r1, [pc, #52]	; (800427c <I2SEx_RxISR_I2SExt+0x90>)
 8004248:	428b      	cmp	r3, r1
 800424a:	d101      	bne.n	8004250 <I2SEx_RxISR_I2SExt+0x64>
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <I2SEx_RxISR_I2SExt+0x94>)
 800424e:	e001      	b.n	8004254 <I2SEx_RxISR_I2SExt+0x68>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004258:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff03 	bl	8004078 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40003800 	.word	0x40003800
 8004280:	40003400 	.word	0x40003400

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0cc      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d90c      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d044      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d119      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d003      	beq.n	8004342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e067      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4934      	ldr	r1, [pc, #208]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fd fa22 	bl	80017bc <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd fa1e 	bl	80017bc <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d20c      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4601      	mov	r1, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	fa21 f303 	lsr.w	r3, r1, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f982 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00
 8004440:	40023800 	.word	0x40023800
 8004444:	08006560 	.word	0x08006560
 8004448:	2000eba0 	.word	0x2000eba0
 800444c:	2000eba4 	.word	0x2000eba4

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	2300      	movs	r3, #0
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b04      	cmp	r3, #4
 8004470:	d007      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x32>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d008      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x38>
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80b4 	bne.w	80045e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800447e:	60bb      	str	r3, [r7, #8]
       break;
 8004480:	e0b3      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004484:	60bb      	str	r3, [r7, #8]
      break;
 8004486:	e0b0      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004488:	4b5a      	ldr	r3, [pc, #360]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004490:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004492:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d04a      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	ea03 0501 	and.w	r5, r3, r1
 80044b4:	ea04 0602 	and.w	r6, r4, r2
 80044b8:	4629      	mov	r1, r5
 80044ba:	4632      	mov	r2, r6
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	0154      	lsls	r4, r2, #5
 80044c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044ca:	014b      	lsls	r3, r1, #5
 80044cc:	4619      	mov	r1, r3
 80044ce:	4622      	mov	r2, r4
 80044d0:	1b49      	subs	r1, r1, r5
 80044d2:	eb62 0206 	sbc.w	r2, r2, r6
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	0194      	lsls	r4, r2, #6
 80044e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044e4:	018b      	lsls	r3, r1, #6
 80044e6:	1a5b      	subs	r3, r3, r1
 80044e8:	eb64 0402 	sbc.w	r4, r4, r2
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	00e2      	lsls	r2, r4, #3
 80044f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044fa:	00d9      	lsls	r1, r3, #3
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	195b      	adds	r3, r3, r5
 8004502:	eb44 0406 	adc.w	r4, r4, r6
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	0262      	lsls	r2, r4, #9
 8004510:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004514:	0259      	lsls	r1, r3, #9
 8004516:	460b      	mov	r3, r1
 8004518:	4614      	mov	r4, r2
 800451a:	4618      	mov	r0, r3
 800451c:	4621      	mov	r1, r4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f04f 0400 	mov.w	r4, #0
 8004524:	461a      	mov	r2, r3
 8004526:	4623      	mov	r3, r4
 8004528:	f7fb fe76 	bl	8000218 <__aeabi_uldivmod>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e049      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	f04f 0400 	mov.w	r4, #0
 800453e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	ea03 0501 	and.w	r5, r3, r1
 800454a:	ea04 0602 	and.w	r6, r4, r2
 800454e:	4629      	mov	r1, r5
 8004550:	4632      	mov	r2, r6
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f04f 0400 	mov.w	r4, #0
 800455a:	0154      	lsls	r4, r2, #5
 800455c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004560:	014b      	lsls	r3, r1, #5
 8004562:	4619      	mov	r1, r3
 8004564:	4622      	mov	r2, r4
 8004566:	1b49      	subs	r1, r1, r5
 8004568:	eb62 0206 	sbc.w	r2, r2, r6
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	f04f 0400 	mov.w	r4, #0
 8004574:	0194      	lsls	r4, r2, #6
 8004576:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800457a:	018b      	lsls	r3, r1, #6
 800457c:	1a5b      	subs	r3, r3, r1
 800457e:	eb64 0402 	sbc.w	r4, r4, r2
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004590:	00d9      	lsls	r1, r3, #3
 8004592:	460b      	mov	r3, r1
 8004594:	4614      	mov	r4, r2
 8004596:	195b      	adds	r3, r3, r5
 8004598:	eb44 0406 	adc.w	r4, r4, r6
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	02a2      	lsls	r2, r4, #10
 80045a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045aa:	0299      	lsls	r1, r3, #10
 80045ac:	460b      	mov	r3, r1
 80045ae:	4614      	mov	r4, r2
 80045b0:	4618      	mov	r0, r3
 80045b2:	4621      	mov	r1, r4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f04f 0400 	mov.w	r4, #0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	f7fb fe2b 	bl	8000218 <__aeabi_uldivmod>
 80045c2:	4603      	mov	r3, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	60bb      	str	r3, [r7, #8]
      break;
 80045e2:	e002      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045e6:	60bb      	str	r3, [r7, #8]
      break;
 80045e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ea:	68bb      	ldr	r3, [r7, #8]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	2000eba0 	.word	0x2000eba0

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4601      	mov	r1, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	08006570 	.word	0x08006570

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4601      	mov	r1, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4a03      	ldr	r2, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	08006570 	.word	0x08006570

08004668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800468c:	4b7a      	ldr	r3, [pc, #488]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800468e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004692:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	4977      	ldr	r1, [pc, #476]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d010      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80046ba:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	496b      	ldr	r1, [pc, #428]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80046d8:	2301      	movs	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80046e8:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	4960      	ldr	r1, [pc, #384]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004712:	d10c      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004714:	4b58      	ldr	r3, [pc, #352]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	3b01      	subs	r3, #1
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	4954      	ldr	r1, [pc, #336]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d022      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800473a:	4b4f      	ldr	r3, [pc, #316]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800473c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004740:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004748:	494b      	ldr	r1, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004758:	2301      	movs	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004766:	4b44      	ldr	r3, [pc, #272]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	3b01      	subs	r3, #1
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	493f      	ldr	r1, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 808a 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a33      	ldr	r2, [pc, #204]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b6:	f7fd f801 	bl	80017bc <HAL_GetTick>
 80047ba:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047be:	f7fc fffd 	bl	80017bc <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1d1      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047dc:	4b26      	ldr	r3, [pc, #152]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02f      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d028      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047fa:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800480a:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d114      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004822:	f7fc ffcb 	bl	80017bc <HAL_GetTick>
 8004826:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fc ffc7 	bl	80017bc <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e199      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004858:	d114      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800486a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486e:	4902      	ldr	r1, [pc, #8]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
 8004874:	e00c      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	40007000 	.word	0x40007000
 8004880:	42470e40 	.word	0x42470e40
 8004884:	4b89      	ldr	r3, [pc, #548]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a88      	ldr	r2, [pc, #544]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800488a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800488e:	6093      	str	r3, [r2, #8]
 8004890:	4b86      	ldr	r3, [pc, #536]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	4983      	ldr	r1, [pc, #524]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80048b4:	4b7e      	ldr	r3, [pc, #504]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80048b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80048c4:	4b79      	ldr	r3, [pc, #484]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4976      	ldr	r1, [pc, #472]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d011      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048e6:	4b71      	ldr	r3, [pc, #452]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	496d      	ldr	r1, [pc, #436]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004904:	d101      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004906:	2301      	movs	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800491c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	4961      	ldr	r1, [pc, #388]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d004      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	f040 80c6 	bne.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800493c:	4b5d      	ldr	r3, [pc, #372]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004942:	f7fc ff3b 	bl	80017bc <HAL_GetTick>
 8004946:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800494a:	f7fc ff37 	bl	80017bc <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e10b      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004968:	4a53      	ldr	r2, [pc, #332]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d023      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d019      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ac:	d00e      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d019      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d115      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x386>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ca:	d110      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	071b      	lsls	r3, r3, #28
 80049e6:	4931      	ldr	r1, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d026      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d122      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a16:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1c:	0e1b      	lsrs	r3, r3, #24
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	071b      	lsls	r3, r3, #28
 8004a3c:	491b      	ldr	r1, [pc, #108]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4a:	f023 021f 	bic.w	r2, r3, #31
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4915      	ldr	r1, [pc, #84]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	490a      	ldr	r1, [pc, #40]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fc fe94 	bl	80017bc <HAL_GetTick>
 8004a94:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a96:	e011      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a98:	f7fc fe90 	bl	80017bc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d90a      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e064      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	424711e0 	.word	0x424711e0
 8004ab4:	42470068 	.word	0x42470068
 8004ab8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abc:	4b2f      	ldr	r3, [pc, #188]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0e7      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ada:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	4926      	ldr	r1, [pc, #152]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	491d      	ldr	r1, [pc, #116]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	4915      	ldr	r1, [pc, #84]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b40:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	490c      	ldr	r1, [pc, #48]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b62:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	4904      	ldr	r1, [pc, #16]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	f000 8098 	beq.w	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004ba4:	e12d      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004ba6:	4b9a      	ldr	r3, [pc, #616]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004bb0:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8004bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bbe:	d802      	bhi.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8004bc4:	e082      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bca:	d047      	beq.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004bcc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004bd0:	d06f      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8004bd2:	e07b      	b.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bd4:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004bd6:	617b      	str	r3, [r7, #20]
          break;
 8004bd8:	e07b      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004bda:	4b8d      	ldr	r3, [pc, #564]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004bea:	4b89      	ldr	r3, [pc, #548]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf4:	4a87      	ldr	r2, [pc, #540]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	e019      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bfe:	4b84      	ldr	r3, [pc, #528]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c0a:	d109      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c0c:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c16:	4a80      	ldr	r2, [pc, #512]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c20:	4b7b      	ldr	r3, [pc, #492]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2a:	4a7c      	ldr	r2, [pc, #496]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c32:	4b77      	ldr	r3, [pc, #476]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c46:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4c:	0f1b      	lsrs	r3, r3, #28
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
          break;
 8004c5a:	e03a      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c5c:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c68:	d108      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c6a:	4b69      	ldr	r3, [pc, #420]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c72:	4a69      	ldr	r2, [pc, #420]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e007      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c7c:	4b64      	ldr	r3, [pc, #400]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	4a65      	ldr	r2, [pc, #404]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004c8c:	4b60      	ldr	r3, [pc, #384]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004c9e:	4b5c      	ldr	r3, [pc, #368]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	0f1b      	lsrs	r3, r3, #28
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
          break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cb2:	4b57      	ldr	r3, [pc, #348]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8004cc0:	4b55      	ldr	r3, [pc, #340]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004cc2:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8004cc6:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004cc8:	617b      	str	r3, [r7, #20]
          break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
          break;
 8004cd0:	bf00      	nop
        }
      }
      break;
 8004cd2:	e096      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004cd4:	4b4e      	ldr	r3, [pc, #312]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8004cde:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce6:	d00c      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cec:	d802      	bhi.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004cf2:	e082      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8004cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf8:	d047      	beq.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004cfa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004cfe:	d06f      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004d00:	e07b      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d02:	4b44      	ldr	r3, [pc, #272]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d04:	617b      	str	r3, [r7, #20]
          break;
 8004d06:	e07b      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d16:	d109      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d18:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d22:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e019      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d2c:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d38:	d109      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d3a:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	4a34      	ldr	r2, [pc, #208]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	e008      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d4e:	4b30      	ldr	r3, [pc, #192]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d58:	4a30      	ldr	r2, [pc, #192]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d74:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	0f1b      	lsrs	r3, r3, #28
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]
          break;
 8004d88:	e03a      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d8a:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d96:	d108      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e007      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db2:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	099b      	lsrs	r3, r3, #6
 8004dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	0f1b      	lsrs	r3, r3, #28
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
          break;
 8004dde:	e00f      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dec:	d102      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8004dee:	4b0a      	ldr	r3, [pc, #40]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004df0:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004df2:	e005      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004df6:	617b      	str	r3, [r7, #20]
          break;
 8004df8:	e002      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
          break;
 8004dfe:	bf00      	nop
        }
      }
      break;
 8004e00:	bf00      	nop
    }
  }
  return frequency;
 8004e02:	697b      	ldr	r3, [r7, #20]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40023800 	.word	0x40023800
 8004e14:	00bb8000 	.word	0x00bb8000
 8004e18:	007a1200 	.word	0x007a1200
 8004e1c:	00f42400 	.word	0x00f42400

08004e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d075      	beq.n	8004f24 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e38:	4ba2      	ldr	r3, [pc, #648]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e44:	4b9f      	ldr	r3, [pc, #636]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d112      	bne.n	8004e76 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e50:	4b9c      	ldr	r3, [pc, #624]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5e:	4b99      	ldr	r3, [pc, #612]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05b      	beq.n	8004f22 <HAL_RCC_OscConfig+0x102>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d157      	bne.n	8004f22 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e20b      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x6e>
 8004e80:	4b90      	ldr	r3, [pc, #576]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a8f      	ldr	r2, [pc, #572]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e01d      	b.n	8004eca <HAL_RCC_OscConfig+0xaa>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e96:	d10c      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x92>
 8004e98:	4b8a      	ldr	r3, [pc, #552]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a89      	ldr	r2, [pc, #548]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	4b87      	ldr	r3, [pc, #540]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a86      	ldr	r2, [pc, #536]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e00b      	b.n	8004eca <HAL_RCC_OscConfig+0xaa>
 8004eb2:	4b84      	ldr	r3, [pc, #528]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a83      	ldr	r2, [pc, #524]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a80      	ldr	r2, [pc, #512]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fc fc73 	bl	80017bc <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eda:	f7fc fc6f 	bl	80017bc <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b64      	cmp	r3, #100	; 0x64
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1d0      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eec:	4b75      	ldr	r3, [pc, #468]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0xba>
 8004ef8:	e014      	b.n	8004f24 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fc fc5f 	bl	80017bc <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f02:	f7fc fc5b 	bl	80017bc <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1bc      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f14:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0xe2>
 8004f20:	e000      	b.n	8004f24 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d063      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f30:	4b64      	ldr	r3, [pc, #400]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3c:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d11c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d116      	bne.n	8004f82 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f54:	4b5b      	ldr	r3, [pc, #364]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_OscConfig+0x14c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e190      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6c:	4b55      	ldr	r3, [pc, #340]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	4952      	ldr	r1, [pc, #328]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f80:	e03a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <HAL_RCC_OscConfig+0x2a8>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc fc14 	bl	80017bc <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f98:	f7fc fc10 	bl	80017bc <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e171      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	493f      	ldr	r1, [pc, #252]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
 8004fca:	e015      	b.n	8004ff8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <HAL_RCC_OscConfig+0x2a8>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fc fbf3 	bl	80017bc <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fc fbef 	bl	80017bc <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e150      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fec:	4b35      	ldr	r3, [pc, #212]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d030      	beq.n	8005066 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500c:	4b2f      	ldr	r3, [pc, #188]	; (80050cc <HAL_RCC_OscConfig+0x2ac>)
 800500e:	2201      	movs	r2, #1
 8005010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fc fbd3 	bl	80017bc <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501a:	f7fc fbcf 	bl	80017bc <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e130      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502c:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x1fa>
 8005038:	e015      	b.n	8005066 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x2ac>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fc fbbc 	bl	80017bc <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7fc fbb8 	bl	80017bc <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e119      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505a:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 809f 	beq.w	80051b2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005078:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	4a0d      	ldr	r2, [pc, #52]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6413      	str	r3, [r2, #64]	; 0x40
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <HAL_RCC_OscConfig+0x2b0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d120      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <HAL_RCC_OscConfig+0x2b0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <HAL_RCC_OscConfig+0x2b0>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050bc:	f7fc fb7e 	bl	80017bc <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	e010      	b.n	80050e6 <HAL_RCC_OscConfig+0x2c6>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	42470000 	.word	0x42470000
 80050cc:	42470e80 	.word	0x42470e80
 80050d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d4:	f7fc fb72 	bl	80017bc <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0d3      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d106      	bne.n	8005108 <HAL_RCC_OscConfig+0x2e8>
 80050fa:	4b68      	ldr	r3, [pc, #416]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a67      	ldr	r2, [pc, #412]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
 8005106:	e01c      	b.n	8005142 <HAL_RCC_OscConfig+0x322>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b05      	cmp	r3, #5
 800510e:	d10c      	bne.n	800512a <HAL_RCC_OscConfig+0x30a>
 8005110:	4b62      	ldr	r3, [pc, #392]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a61      	ldr	r2, [pc, #388]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005116:	f043 0304 	orr.w	r3, r3, #4
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a5e      	ldr	r2, [pc, #376]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
 8005128:	e00b      	b.n	8005142 <HAL_RCC_OscConfig+0x322>
 800512a:	4b5c      	ldr	r3, [pc, #368]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	4a5b      	ldr	r2, [pc, #364]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	6713      	str	r3, [r2, #112]	; 0x70
 8005136:	4b59      	ldr	r3, [pc, #356]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	4a58      	ldr	r2, [pc, #352]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800513c:	f023 0304 	bic.w	r3, r3, #4
 8005140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d015      	beq.n	8005176 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fc fb37 	bl	80017bc <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fb33 	bl	80017bc <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e092      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005168:	4b4c      	ldr	r3, [pc, #304]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ee      	beq.n	8005152 <HAL_RCC_OscConfig+0x332>
 8005174:	e014      	b.n	80051a0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fc fb21 	bl	80017bc <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fc fb1d 	bl	80017bc <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e07c      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	4b41      	ldr	r3, [pc, #260]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ee      	bne.n	800517e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a6:	4b3d      	ldr	r3, [pc, #244]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d068      	beq.n	800528c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ba:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d060      	beq.n	8005288 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d145      	bne.n	800525a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCC_OscConfig+0x480>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc faf2 	bl	80017bc <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc faee 	bl	80017bc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e04f      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	3b01      	subs	r3, #1
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	491d      	ldr	r1, [pc, #116]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_RCC_OscConfig+0x480>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc fac3 	bl	80017bc <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523a:	f7fc fabf 	bl	80017bc <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e020      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x41a>
 8005258:	e018      	b.n	800528c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_RCC_OscConfig+0x480>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fc faac 	bl	80017bc <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fc faa8 	bl	80017bc <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e009      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <HAL_RCC_OscConfig+0x47c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x448>
 8005286:	e001      	b.n	800528c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40007000 	.word	0x40007000
 800529c:	40023800 	.word	0x40023800
 80052a0:	42470060 	.word	0x42470060

080052a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e03f      	b.n	8005336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc f962 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fb8b 	bl	8005a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d166      	bne.n	8005428 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_UART_Receive_DMA+0x26>
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e05f      	b.n	800542a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UART_Receive_DMA+0x38>
 8005374:	2302      	movs	r3, #2
 8005376:	e058      	b.n	800542a <HAL_UART_Receive_DMA+0xea>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2222      	movs	r2, #34	; 0x22
 8005396:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_UART_Receive_DMA+0xf4>)
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	4a24      	ldr	r2, [pc, #144]	; (8005438 <HAL_UART_Receive_DMA+0xf8>)
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	4a23      	ldr	r2, [pc, #140]	; (800543c <HAL_UART_Receive_DMA+0xfc>)
 80053b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	2200      	movs	r2, #0
 80053b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80053ba:	f107 0308 	add.w	r3, r7, #8
 80053be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	f7fc ff79 	bl	80022c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005422:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	0800567d 	.word	0x0800567d
 8005438:	080056e5 	.word	0x080056e5
 800543c:	08005701 	.word	0x08005701

08005440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_UART_IRQHandler+0x52>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa38 	bl	8005900 <UART_Receive_IT>
      return;
 8005490:	e0d1      	b.n	8005636 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80b0 	beq.w	80055fa <HAL_UART_IRQHandler+0x1ba>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_UART_IRQHandler+0x70>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80a5 	beq.w	80055fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_UART_IRQHandler+0x90>
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_UART_IRQHandler+0xb0>
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	f043 0202 	orr.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_UART_IRQHandler+0xd0>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00f      	beq.n	800553a <HAL_UART_IRQHandler+0xfa>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d104      	bne.n	800552e <HAL_UART_IRQHandler+0xee>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	f043 0208 	orr.w	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d078      	beq.n	8005634 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_UART_IRQHandler+0x11c>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9d2 	bl	8005900 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_UART_IRQHandler+0x144>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d031      	beq.n	80055e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f91b 	bl	80057c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d123      	bne.n	80055e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	4a21      	ldr	r2, [pc, #132]	; (800563c <HAL_UART_IRQHandler+0x1fc>)
 80055b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fc fedb 	bl	8002378 <HAL_DMA_Abort_IT>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055d2:	4610      	mov	r0, r2
 80055d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d6:	e00e      	b.n	80055f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f845 	bl	8005668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	e00a      	b.n	80055f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f841 	bl	8005668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	e006      	b.n	80055f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f83d 	bl	8005668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80055f4:	e01e      	b.n	8005634 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f6:	bf00      	nop
    return;
 80055f8:	e01c      	b.n	8005634 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x1d6>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f908 	bl	8005824 <UART_Transmit_IT>
    return;
 8005614:	e00f      	b.n	8005636 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_UART_IRQHandler+0x1f6>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f950 	bl	80058d0 <UART_EndTransmit_IT>
    return;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005634:	bf00      	nop
  }
}
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	080057fd 	.word	0x080057fd

08005640 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11e      	bne.n	80056d6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7fb fd10 	bl	80010fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff ffae 	bl	8005654 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b21      	cmp	r3, #33	; 0x21
 8005732:	d108      	bne.n	8005746 <UART_DMAError+0x46>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005740:	68b8      	ldr	r0, [r7, #8]
 8005742:	f000 f827 	bl	8005794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b22      	cmp	r3, #34	; 0x22
 8005766:	d108      	bne.n	800577a <UART_DMAError+0x7a>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2200      	movs	r2, #0
 8005772:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	f000 f823 	bl	80057c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	f043 0210 	orr.w	r2, r3, #16
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005786:	68b8      	ldr	r0, [r7, #8]
 8005788:	f7ff ff6e 	bl	8005668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057aa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff ff26 	bl	8005668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b21      	cmp	r3, #33	; 0x21
 8005836:	d144      	bne.n	80058c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005840:	d11a      	bne.n	8005878 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005856:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	1c9a      	adds	r2, r3, #2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]
 800586a:	e00e      	b.n	800588a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]
 8005876:	e008      	b.n	800588a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6211      	str	r1, [r2, #32]
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29b      	uxth	r3, r3
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4619      	mov	r1, r3
 8005898:	84d1      	strh	r1, [r2, #38]	; 0x26
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10f      	bne.n	80058be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fea5 	bl	8005640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b22      	cmp	r3, #34	; 0x22
 8005912:	d171      	bne.n	80059f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591c:	d123      	bne.n	8005966 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10e      	bne.n	800594a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	1c9a      	adds	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
 8005948:	e029      	b.n	800599e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	b29b      	uxth	r3, r3
 8005952:	b2db      	uxtb	r3, r3
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
 8005964:	e01b      	b.n	800599e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6858      	ldr	r0, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6291      	str	r1, [r2, #40]	; 0x28
 800597e:	b2c2      	uxtb	r2, r0
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e00c      	b.n	800599e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	1c58      	adds	r0, r3, #1
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	6288      	str	r0, [r1, #40]	; 0x28
 8005996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4619      	mov	r1, r3
 80059ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d120      	bne.n	80059f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0220 	bic.w	r2, r2, #32
 80059c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fb fb86 	bl	80010fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e002      	b.n	80059fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a46:	f023 030c 	bic.w	r3, r3, #12
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	430b      	orrs	r3, r1
 8005a52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a72:	f040 8199 	bne.w	8005da8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4ac6      	ldr	r2, [pc, #792]	; (8005d94 <UART_SetConfig+0x390>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00f      	beq.n	8005aa0 <UART_SetConfig+0x9c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4ac4      	ldr	r2, [pc, #784]	; (8005d98 <UART_SetConfig+0x394>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00a      	beq.n	8005aa0 <UART_SetConfig+0x9c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4ac3      	ldr	r2, [pc, #780]	; (8005d9c <UART_SetConfig+0x398>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d005      	beq.n	8005aa0 <UART_SetConfig+0x9c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4ac1      	ldr	r2, [pc, #772]	; (8005da0 <UART_SetConfig+0x39c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	f040 80bd 	bne.w	8005c1a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005aa0:	f7fe fdce 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	461d      	mov	r5, r3
 8005aaa:	f04f 0600 	mov.w	r6, #0
 8005aae:	46a8      	mov	r8, r5
 8005ab0:	46b1      	mov	r9, r6
 8005ab2:	eb18 0308 	adds.w	r3, r8, r8
 8005ab6:	eb49 0409 	adc.w	r4, r9, r9
 8005aba:	4698      	mov	r8, r3
 8005abc:	46a1      	mov	r9, r4
 8005abe:	eb18 0805 	adds.w	r8, r8, r5
 8005ac2:	eb49 0906 	adc.w	r9, r9, r6
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ad2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ad6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ada:	4688      	mov	r8, r1
 8005adc:	4691      	mov	r9, r2
 8005ade:	eb18 0005 	adds.w	r0, r8, r5
 8005ae2:	eb49 0106 	adc.w	r1, r9, r6
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	461d      	mov	r5, r3
 8005aec:	f04f 0600 	mov.w	r6, #0
 8005af0:	196b      	adds	r3, r5, r5
 8005af2:	eb46 0406 	adc.w	r4, r6, r6
 8005af6:	461a      	mov	r2, r3
 8005af8:	4623      	mov	r3, r4
 8005afa:	f7fa fb8d 	bl	8000218 <__aeabi_uldivmod>
 8005afe:	4603      	mov	r3, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	461a      	mov	r2, r3
 8005b04:	4ba7      	ldr	r3, [pc, #668]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005b06:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	461d      	mov	r5, r3
 8005b14:	f04f 0600 	mov.w	r6, #0
 8005b18:	46a9      	mov	r9, r5
 8005b1a:	46b2      	mov	sl, r6
 8005b1c:	eb19 0309 	adds.w	r3, r9, r9
 8005b20:	eb4a 040a 	adc.w	r4, sl, sl
 8005b24:	4699      	mov	r9, r3
 8005b26:	46a2      	mov	sl, r4
 8005b28:	eb19 0905 	adds.w	r9, r9, r5
 8005b2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b44:	4689      	mov	r9, r1
 8005b46:	4692      	mov	sl, r2
 8005b48:	eb19 0005 	adds.w	r0, r9, r5
 8005b4c:	eb4a 0106 	adc.w	r1, sl, r6
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	461d      	mov	r5, r3
 8005b56:	f04f 0600 	mov.w	r6, #0
 8005b5a:	196b      	adds	r3, r5, r5
 8005b5c:	eb46 0406 	adc.w	r4, r6, r6
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	f7fa fb58 	bl	8000218 <__aeabi_uldivmod>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b8d      	ldr	r3, [pc, #564]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005b70:	fba3 1302 	umull	r1, r3, r3, r2
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	2164      	movs	r1, #100	; 0x64
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	3332      	adds	r3, #50	; 0x32
 8005b82:	4a88      	ldr	r2, [pc, #544]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b90:	4498      	add	r8, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	461d      	mov	r5, r3
 8005b96:	f04f 0600 	mov.w	r6, #0
 8005b9a:	46a9      	mov	r9, r5
 8005b9c:	46b2      	mov	sl, r6
 8005b9e:	eb19 0309 	adds.w	r3, r9, r9
 8005ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	46a2      	mov	sl, r4
 8005baa:	eb19 0905 	adds.w	r9, r9, r5
 8005bae:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bb2:	f04f 0100 	mov.w	r1, #0
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	4692      	mov	sl, r2
 8005bca:	eb19 0005 	adds.w	r0, r9, r5
 8005bce:	eb4a 0106 	adc.w	r1, sl, r6
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	f04f 0600 	mov.w	r6, #0
 8005bdc:	196b      	adds	r3, r5, r5
 8005bde:	eb46 0406 	adc.w	r4, r6, r6
 8005be2:	461a      	mov	r2, r3
 8005be4:	4623      	mov	r3, r4
 8005be6:	f7fa fb17 	bl	8000218 <__aeabi_uldivmod>
 8005bea:	4603      	mov	r3, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b6c      	ldr	r3, [pc, #432]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2164      	movs	r1, #100	; 0x64
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	3332      	adds	r3, #50	; 0x32
 8005c04:	4a67      	ldr	r2, [pc, #412]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f003 0207 	and.w	r2, r3, #7
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4442      	add	r2, r8
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	e27d      	b.n	8006116 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f7fe fcfd 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8005c1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	461d      	mov	r5, r3
 8005c24:	f04f 0600 	mov.w	r6, #0
 8005c28:	46a8      	mov	r8, r5
 8005c2a:	46b1      	mov	r9, r6
 8005c2c:	eb18 0308 	adds.w	r3, r8, r8
 8005c30:	eb49 0409 	adc.w	r4, r9, r9
 8005c34:	4698      	mov	r8, r3
 8005c36:	46a1      	mov	r9, r4
 8005c38:	eb18 0805 	adds.w	r8, r8, r5
 8005c3c:	eb49 0906 	adc.w	r9, r9, r6
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c54:	4688      	mov	r8, r1
 8005c56:	4691      	mov	r9, r2
 8005c58:	eb18 0005 	adds.w	r0, r8, r5
 8005c5c:	eb49 0106 	adc.w	r1, r9, r6
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	461d      	mov	r5, r3
 8005c66:	f04f 0600 	mov.w	r6, #0
 8005c6a:	196b      	adds	r3, r5, r5
 8005c6c:	eb46 0406 	adc.w	r4, r6, r6
 8005c70:	461a      	mov	r2, r3
 8005c72:	4623      	mov	r3, r4
 8005c74:	f7fa fad0 	bl	8000218 <__aeabi_uldivmod>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005c80:	fba3 2302 	umull	r2, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	f04f 0600 	mov.w	r6, #0
 8005c92:	46a9      	mov	r9, r5
 8005c94:	46b2      	mov	sl, r6
 8005c96:	eb19 0309 	adds.w	r3, r9, r9
 8005c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	46a2      	mov	sl, r4
 8005ca2:	eb19 0905 	adds.w	r9, r9, r5
 8005ca6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cbe:	4689      	mov	r9, r1
 8005cc0:	4692      	mov	sl, r2
 8005cc2:	eb19 0005 	adds.w	r0, r9, r5
 8005cc6:	eb4a 0106 	adc.w	r1, sl, r6
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	461d      	mov	r5, r3
 8005cd0:	f04f 0600 	mov.w	r6, #0
 8005cd4:	196b      	adds	r3, r5, r5
 8005cd6:	eb46 0406 	adc.w	r4, r6, r6
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4623      	mov	r3, r4
 8005cde:	f7fa fa9b 	bl	8000218 <__aeabi_uldivmod>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b2e      	ldr	r3, [pc, #184]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005cea:	fba3 1302 	umull	r1, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2164      	movs	r1, #100	; 0x64
 8005cf2:	fb01 f303 	mul.w	r3, r1, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	3332      	adds	r3, #50	; 0x32
 8005cfc:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d0a:	4498      	add	r8, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	461d      	mov	r5, r3
 8005d10:	f04f 0600 	mov.w	r6, #0
 8005d14:	46a9      	mov	r9, r5
 8005d16:	46b2      	mov	sl, r6
 8005d18:	eb19 0309 	adds.w	r3, r9, r9
 8005d1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d20:	4699      	mov	r9, r3
 8005d22:	46a2      	mov	sl, r4
 8005d24:	eb19 0905 	adds.w	r9, r9, r5
 8005d28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d2c:	f04f 0100 	mov.w	r1, #0
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d40:	4689      	mov	r9, r1
 8005d42:	4692      	mov	sl, r2
 8005d44:	eb19 0005 	adds.w	r0, r9, r5
 8005d48:	eb4a 0106 	adc.w	r1, sl, r6
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	461d      	mov	r5, r3
 8005d52:	f04f 0600 	mov.w	r6, #0
 8005d56:	196b      	adds	r3, r5, r5
 8005d58:	eb46 0406 	adc.w	r4, r6, r6
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	f7fa fa5a 	bl	8000218 <__aeabi_uldivmod>
 8005d64:	4603      	mov	r3, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	2164      	movs	r1, #100	; 0x64
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	3332      	adds	r3, #50	; 0x32
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <UART_SetConfig+0x3a0>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	f003 0207 	and.w	r2, r3, #7
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4442      	add	r2, r8
 8005d90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d92:	e1c0      	b.n	8006116 <UART_SetConfig+0x712>
 8005d94:	40011000 	.word	0x40011000
 8005d98:	40011400 	.word	0x40011400
 8005d9c:	40011800 	.word	0x40011800
 8005da0:	40011c00 	.word	0x40011c00
 8005da4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4adc      	ldr	r2, [pc, #880]	; (8006120 <UART_SetConfig+0x71c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <UART_SetConfig+0x3ce>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4adb      	ldr	r2, [pc, #876]	; (8006124 <UART_SetConfig+0x720>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00a      	beq.n	8005dd2 <UART_SetConfig+0x3ce>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4ad9      	ldr	r2, [pc, #868]	; (8006128 <UART_SetConfig+0x724>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d005      	beq.n	8005dd2 <UART_SetConfig+0x3ce>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4ad8      	ldr	r2, [pc, #864]	; (800612c <UART_SetConfig+0x728>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	f040 80d1 	bne.w	8005f74 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd2:	f7fe fc35 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8005dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	469a      	mov	sl, r3
 8005ddc:	f04f 0b00 	mov.w	fp, #0
 8005de0:	46d0      	mov	r8, sl
 8005de2:	46d9      	mov	r9, fp
 8005de4:	eb18 0308 	adds.w	r3, r8, r8
 8005de8:	eb49 0409 	adc.w	r4, r9, r9
 8005dec:	4698      	mov	r8, r3
 8005dee:	46a1      	mov	r9, r4
 8005df0:	eb18 080a 	adds.w	r8, r8, sl
 8005df4:	eb49 090b 	adc.w	r9, r9, fp
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e0c:	4688      	mov	r8, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	eb1a 0508 	adds.w	r5, sl, r8
 8005e14:	eb4b 0609 	adc.w	r6, fp, r9
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f04f 0400 	mov.w	r4, #0
 8005e2a:	0094      	lsls	r4, r2, #2
 8005e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e30:	008b      	lsls	r3, r1, #2
 8005e32:	461a      	mov	r2, r3
 8005e34:	4623      	mov	r3, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	4631      	mov	r1, r6
 8005e3a:	f7fa f9ed 	bl	8000218 <__aeabi_uldivmod>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	461a      	mov	r2, r3
 8005e44:	4bba      	ldr	r3, [pc, #744]	; (8006130 <UART_SetConfig+0x72c>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	469b      	mov	fp, r3
 8005e54:	f04f 0c00 	mov.w	ip, #0
 8005e58:	46d9      	mov	r9, fp
 8005e5a:	46e2      	mov	sl, ip
 8005e5c:	eb19 0309 	adds.w	r3, r9, r9
 8005e60:	eb4a 040a 	adc.w	r4, sl, sl
 8005e64:	4699      	mov	r9, r3
 8005e66:	46a2      	mov	sl, r4
 8005e68:	eb19 090b 	adds.w	r9, r9, fp
 8005e6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e84:	4689      	mov	r9, r1
 8005e86:	4692      	mov	sl, r2
 8005e88:	eb1b 0509 	adds.w	r5, fp, r9
 8005e8c:	eb4c 060a 	adc.w	r6, ip, sl
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4619      	mov	r1, r3
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	f04f 0400 	mov.w	r4, #0
 8005ea2:	0094      	lsls	r4, r2, #2
 8005ea4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ea8:	008b      	lsls	r3, r1, #2
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4623      	mov	r3, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	f7fa f9b1 	bl	8000218 <__aeabi_uldivmod>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4b9c      	ldr	r3, [pc, #624]	; (8006130 <UART_SetConfig+0x72c>)
 8005ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2164      	movs	r1, #100	; 0x64
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	3332      	adds	r3, #50	; 0x32
 8005ed0:	4a97      	ldr	r2, [pc, #604]	; (8006130 <UART_SetConfig+0x72c>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005edc:	4498      	add	r8, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	469b      	mov	fp, r3
 8005ee2:	f04f 0c00 	mov.w	ip, #0
 8005ee6:	46d9      	mov	r9, fp
 8005ee8:	46e2      	mov	sl, ip
 8005eea:	eb19 0309 	adds.w	r3, r9, r9
 8005eee:	eb4a 040a 	adc.w	r4, sl, sl
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	46a2      	mov	sl, r4
 8005ef6:	eb19 090b 	adds.w	r9, r9, fp
 8005efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f12:	4689      	mov	r9, r1
 8005f14:	4692      	mov	sl, r2
 8005f16:	eb1b 0509 	adds.w	r5, fp, r9
 8005f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4619      	mov	r1, r3
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f04f 0400 	mov.w	r4, #0
 8005f30:	0094      	lsls	r4, r2, #2
 8005f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f36:	008b      	lsls	r3, r1, #2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	4631      	mov	r1, r6
 8005f40:	f7fa f96a 	bl	8000218 <__aeabi_uldivmod>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b79      	ldr	r3, [pc, #484]	; (8006130 <UART_SetConfig+0x72c>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a74      	ldr	r2, [pc, #464]	; (8006130 <UART_SetConfig+0x72c>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 020f 	and.w	r2, r3, #15
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4442      	add	r2, r8
 8005f70:	609a      	str	r2, [r3, #8]
 8005f72:	e0d0      	b.n	8006116 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7fe fb50 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8005f78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	469a      	mov	sl, r3
 8005f7e:	f04f 0b00 	mov.w	fp, #0
 8005f82:	46d0      	mov	r8, sl
 8005f84:	46d9      	mov	r9, fp
 8005f86:	eb18 0308 	adds.w	r3, r8, r8
 8005f8a:	eb49 0409 	adc.w	r4, r9, r9
 8005f8e:	4698      	mov	r8, r3
 8005f90:	46a1      	mov	r9, r4
 8005f92:	eb18 080a 	adds.w	r8, r8, sl
 8005f96:	eb49 090b 	adc.w	r9, r9, fp
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005faa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fae:	4688      	mov	r8, r1
 8005fb0:	4691      	mov	r9, r2
 8005fb2:	eb1a 0508 	adds.w	r5, sl, r8
 8005fb6:	eb4b 0609 	adc.w	r6, fp, r9
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	0094      	lsls	r4, r2, #2
 8005fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	4631      	mov	r1, r6
 8005fdc:	f7fa f91c 	bl	8000218 <__aeabi_uldivmod>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b52      	ldr	r3, [pc, #328]	; (8006130 <UART_SetConfig+0x72c>)
 8005fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	469b      	mov	fp, r3
 8005ff6:	f04f 0c00 	mov.w	ip, #0
 8005ffa:	46d9      	mov	r9, fp
 8005ffc:	46e2      	mov	sl, ip
 8005ffe:	eb19 0309 	adds.w	r3, r9, r9
 8006002:	eb4a 040a 	adc.w	r4, sl, sl
 8006006:	4699      	mov	r9, r3
 8006008:	46a2      	mov	sl, r4
 800600a:	eb19 090b 	adds.w	r9, r9, fp
 800600e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006026:	4689      	mov	r9, r1
 8006028:	4692      	mov	sl, r2
 800602a:	eb1b 0509 	adds.w	r5, fp, r9
 800602e:	eb4c 060a 	adc.w	r6, ip, sl
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4619      	mov	r1, r3
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f04f 0400 	mov.w	r4, #0
 8006044:	0094      	lsls	r4, r2, #2
 8006046:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800604a:	008b      	lsls	r3, r1, #2
 800604c:	461a      	mov	r2, r3
 800604e:	4623      	mov	r3, r4
 8006050:	4628      	mov	r0, r5
 8006052:	4631      	mov	r1, r6
 8006054:	f7fa f8e0 	bl	8000218 <__aeabi_uldivmod>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	461a      	mov	r2, r3
 800605e:	4b34      	ldr	r3, [pc, #208]	; (8006130 <UART_SetConfig+0x72c>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a2f      	ldr	r2, [pc, #188]	; (8006130 <UART_SetConfig+0x72c>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607e:	4498      	add	r8, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	469b      	mov	fp, r3
 8006084:	f04f 0c00 	mov.w	ip, #0
 8006088:	46d9      	mov	r9, fp
 800608a:	46e2      	mov	sl, ip
 800608c:	eb19 0309 	adds.w	r3, r9, r9
 8006090:	eb4a 040a 	adc.w	r4, sl, sl
 8006094:	4699      	mov	r9, r3
 8006096:	46a2      	mov	sl, r4
 8006098:	eb19 090b 	adds.w	r9, r9, fp
 800609c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060b4:	4689      	mov	r9, r1
 80060b6:	4692      	mov	sl, r2
 80060b8:	eb1b 0509 	adds.w	r5, fp, r9
 80060bc:	eb4c 060a 	adc.w	r6, ip, sl
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	f04f 0400 	mov.w	r4, #0
 80060d2:	0094      	lsls	r4, r2, #2
 80060d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	461a      	mov	r2, r3
 80060dc:	4623      	mov	r3, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	4631      	mov	r1, r6
 80060e2:	f7fa f899 	bl	8000218 <__aeabi_uldivmod>
 80060e6:	4603      	mov	r3, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	461a      	mov	r2, r3
 80060ec:	4b10      	ldr	r3, [pc, #64]	; (8006130 <UART_SetConfig+0x72c>)
 80060ee:	fba3 1302 	umull	r1, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <UART_SetConfig+0x72c>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4442      	add	r2, r8
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	e7ff      	b.n	8006116 <UART_SetConfig+0x712>
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	40011800 	.word	0x40011800
 800612c:	40011c00 	.word	0x40011c00
 8006130:	51eb851f 	.word	0x51eb851f

08006134 <arm_biquad_cascade_df2T_f32>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	7807      	ldrb	r7, [r0, #0]
 800613a:	ea4f 1e13 	mov.w	lr, r3, lsr #4
 800613e:	6885      	ldr	r5, [r0, #8]
 8006140:	3514      	adds	r5, #20
 8006142:	6846      	ldr	r6, [r0, #4]
 8006144:	3608      	adds	r6, #8
 8006146:	ea4f 198e 	mov.w	r9, lr, lsl #6
 800614a:	eb02 0b09 	add.w	fp, r2, r9
 800614e:	f003 080f 	and.w	r8, r3, #15
 8006152:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8006156:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800615a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800615e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006162:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006166:	ed55 5a01 	vldr	s11, [r5, #-4]
 800616a:	46b4      	mov	ip, r6
 800616c:	ed56 3a02 	vldr	s7, [r6, #-8]
 8006170:	ed16 4a01 	vldr	s8, [r6, #-4]
 8006174:	f1be 0f00 	cmp.w	lr, #0
 8006178:	f000 8195 	beq.w	80064a6 <arm_biquad_cascade_df2T_f32+0x372>
 800617c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8006180:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8006184:	4674      	mov	r4, lr
 8006186:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800618a:	ee27 5a83 	vmul.f32	s10, s15, s6
 800618e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006192:	ee67 4a03 	vmul.f32	s9, s14, s6
 8006196:	ee34 4a84 	vadd.f32	s8, s9, s8
 800619a:	ee66 4a05 	vmul.f32	s9, s12, s10
 800619e:	ee34 4a84 	vadd.f32	s8, s9, s8
 80061a2:	ee26 3a83 	vmul.f32	s6, s13, s6
 80061a6:	ed03 5a10 	vstr	s10, [r3, #-64]	; 0xffffffc0
 80061aa:	ed50 3a0f 	vldr	s7, [r0, #-60]	; 0xffffffc4
 80061ae:	ee67 4aa3 	vmul.f32	s9, s15, s7
 80061b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80061b6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80061ba:	ee35 5a03 	vadd.f32	s10, s10, s6
 80061be:	ee27 4a23 	vmul.f32	s8, s14, s7
 80061c2:	ee35 5a04 	vadd.f32	s10, s10, s8
 80061c6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80061ca:	ee33 3a05 	vadd.f32	s6, s6, s10
 80061ce:	ee66 3aa3 	vmul.f32	s7, s13, s7
 80061d2:	ed43 4a0f 	vstr	s9, [r3, #-60]	; 0xffffffc4
 80061d6:	ed10 4a0e 	vldr	s8, [r0, #-56]	; 0xffffffc8
 80061da:	ee27 5a84 	vmul.f32	s10, s15, s8
 80061de:	ee35 5a03 	vadd.f32	s10, s10, s6
 80061e2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80061e6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80061ea:	ee67 3a04 	vmul.f32	s7, s14, s8
 80061ee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80061f2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80061f6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80061fa:	ee66 3a84 	vmul.f32	s7, s13, s8
 80061fe:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
 8006202:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8006206:	ee67 4a84 	vmul.f32	s9, s15, s8
 800620a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800620e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006212:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006216:	ee67 3a04 	vmul.f32	s7, s14, s8
 800621a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800621e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006222:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006226:	ee66 3a84 	vmul.f32	s7, s13, s8
 800622a:	ed43 4a0d 	vstr	s9, [r3, #-52]	; 0xffffffcc
 800622e:	ed10 4a0c 	vldr	s8, [r0, #-48]	; 0xffffffd0
 8006232:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006236:	ee35 5a03 	vadd.f32	s10, s10, s6
 800623a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800623e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006242:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006246:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800624a:	ee26 3a05 	vmul.f32	s6, s12, s10
 800624e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006252:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006256:	ed03 5a0c 	vstr	s10, [r3, #-48]	; 0xffffffd0
 800625a:	ed10 4a0b 	vldr	s8, [r0, #-44]	; 0xffffffd4
 800625e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006262:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006266:	ee25 5a85 	vmul.f32	s10, s11, s10
 800626a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800626e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006272:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006276:	ee26 3a24 	vmul.f32	s6, s12, s9
 800627a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800627e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006282:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
 8006286:	ed10 4a0a 	vldr	s8, [r0, #-40]	; 0xffffffd8
 800628a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800628e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006292:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006296:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800629a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800629e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80062a2:	ee26 3a05 	vmul.f32	s6, s12, s10
 80062a6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80062aa:	ee66 3a84 	vmul.f32	s7, s13, s8
 80062ae:	ed03 5a0a 	vstr	s10, [r3, #-40]	; 0xffffffd8
 80062b2:	ed10 4a09 	vldr	s8, [r0, #-36]	; 0xffffffdc
 80062b6:	ee67 4a84 	vmul.f32	s9, s15, s8
 80062ba:	ee74 4a83 	vadd.f32	s9, s9, s6
 80062be:	ee25 5a85 	vmul.f32	s10, s11, s10
 80062c2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80062c6:	ee67 3a04 	vmul.f32	s7, s14, s8
 80062ca:	ee35 5a23 	vadd.f32	s10, s10, s7
 80062ce:	ee26 3a24 	vmul.f32	s6, s12, s9
 80062d2:	ee33 3a05 	vadd.f32	s6, s6, s10
 80062d6:	ee66 3a84 	vmul.f32	s7, s13, s8
 80062da:	ed43 4a09 	vstr	s9, [r3, #-36]	; 0xffffffdc
 80062de:	ed10 4a08 	vldr	s8, [r0, #-32]	; 0xffffffe0
 80062e2:	ee27 5a84 	vmul.f32	s10, s15, s8
 80062e6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80062ea:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80062ee:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80062f2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80062f6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80062fa:	ee26 3a05 	vmul.f32	s6, s12, s10
 80062fe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006302:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006306:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800630a:	ed10 4a07 	vldr	s8, [r0, #-28]	; 0xffffffe4
 800630e:	ee67 4a84 	vmul.f32	s9, s15, s8
 8006312:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006316:	ee25 5a85 	vmul.f32	s10, s11, s10
 800631a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800631e:	ee67 3a04 	vmul.f32	s7, s14, s8
 8006322:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006326:	ee26 3a24 	vmul.f32	s6, s12, s9
 800632a:	ee33 3a05 	vadd.f32	s6, s6, s10
 800632e:	ee66 3a84 	vmul.f32	s7, s13, s8
 8006332:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8006336:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 800633a:	ee27 5a84 	vmul.f32	s10, s15, s8
 800633e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006342:	ee65 4aa4 	vmul.f32	s9, s11, s9
 8006346:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800634a:	ee67 3a04 	vmul.f32	s7, s14, s8
 800634e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006352:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006356:	ee33 3a24 	vadd.f32	s6, s6, s9
 800635a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800635e:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8006362:	ed10 4a05 	vldr	s8, [r0, #-20]	; 0xffffffec
 8006366:	ee67 4a84 	vmul.f32	s9, s15, s8
 800636a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800636e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006372:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006376:	ee67 3a04 	vmul.f32	s7, s14, s8
 800637a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800637e:	ee26 3a24 	vmul.f32	s6, s12, s9
 8006382:	ee33 3a05 	vadd.f32	s6, s6, s10
 8006386:	ee66 3a84 	vmul.f32	s7, s13, s8
 800638a:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
 800638e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006392:	ee27 5a84 	vmul.f32	s10, s15, s8
 8006396:	ee35 5a03 	vadd.f32	s10, s10, s6
 800639a:	ee65 4aa4 	vmul.f32	s9, s11, s9
 800639e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80063a2:	ee67 3a04 	vmul.f32	s7, s14, s8
 80063a6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80063aa:	ee26 3a05 	vmul.f32	s6, s12, s10
 80063ae:	ee33 3a24 	vadd.f32	s6, s6, s9
 80063b2:	ee66 3a84 	vmul.f32	s7, s13, s8
 80063b6:	ed03 5a04 	vstr	s10, [r3, #-16]
 80063ba:	ed10 4a03 	vldr	s8, [r0, #-12]
 80063be:	ee67 4a84 	vmul.f32	s9, s15, s8
 80063c2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80063c6:	ee25 5a85 	vmul.f32	s10, s11, s10
 80063ca:	ee35 5a23 	vadd.f32	s10, s10, s7
 80063ce:	ee67 3a04 	vmul.f32	s7, s14, s8
 80063d2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80063d6:	ee26 3a24 	vmul.f32	s6, s12, s9
 80063da:	ee33 3a05 	vadd.f32	s6, s6, s10
 80063de:	ee66 3a84 	vmul.f32	s7, s13, s8
 80063e2:	ed43 4a03 	vstr	s9, [r3, #-12]
 80063e6:	ed10 4a02 	vldr	s8, [r0, #-8]
 80063ea:	ee27 5a84 	vmul.f32	s10, s15, s8
 80063ee:	ee35 5a03 	vadd.f32	s10, s10, s6
 80063f2:	ee65 4aa4 	vmul.f32	s9, s11, s9
 80063f6:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80063fa:	ee67 3a04 	vmul.f32	s7, s14, s8
 80063fe:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006402:	ee26 3a05 	vmul.f32	s6, s12, s10
 8006406:	ee33 3a24 	vadd.f32	s6, s6, s9
 800640a:	ee66 3a84 	vmul.f32	s7, s13, s8
 800640e:	ed03 5a02 	vstr	s10, [r3, #-8]
 8006412:	ed10 4a01 	vldr	s8, [r0, #-4]
 8006416:	ee67 4a84 	vmul.f32	s9, s15, s8
 800641a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800641e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006422:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006426:	ee67 3a04 	vmul.f32	s7, s14, s8
 800642a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800642e:	ee66 3a24 	vmul.f32	s7, s12, s9
 8006432:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006436:	ee26 5a84 	vmul.f32	s10, s13, s8
 800643a:	ee25 4aa4 	vmul.f32	s8, s11, s9
 800643e:	ee34 4a05 	vadd.f32	s8, s8, s10
 8006442:	ed43 4a01 	vstr	s9, [r3, #-4]
 8006446:	3040      	adds	r0, #64	; 0x40
 8006448:	3340      	adds	r3, #64	; 0x40
 800644a:	3c01      	subs	r4, #1
 800644c:	f47f ae9b 	bne.w	8006186 <arm_biquad_cascade_df2T_f32+0x52>
 8006450:	4449      	add	r1, r9
 8006452:	465b      	mov	r3, fp
 8006454:	f1b8 0f00 	cmp.w	r8, #0
 8006458:	d019      	beq.n	800648e <arm_biquad_cascade_df2T_f32+0x35a>
 800645a:	eb01 000a 	add.w	r0, r1, sl
 800645e:	ecf1 2a01 	vldmia	r1!, {s5}
 8006462:	ee27 3aa2 	vmul.f32	s6, s15, s5
 8006466:	ee33 3a23 	vadd.f32	s6, s6, s7
 800646a:	ee67 3a22 	vmul.f32	s7, s14, s5
 800646e:	ee33 4a84 	vadd.f32	s8, s7, s8
 8006472:	ee26 5a03 	vmul.f32	s10, s12, s6
 8006476:	ee75 3a04 	vadd.f32	s7, s10, s8
 800647a:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800647e:	ee25 4a83 	vmul.f32	s8, s11, s6
 8006482:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006486:	eca3 3a01 	vstmia	r3!, {s6}
 800648a:	4281      	cmp	r1, r0
 800648c:	d1e7      	bne.n	800645e <arm_biquad_cascade_df2T_f32+0x32a>
 800648e:	ed4c 3a02 	vstr	s7, [ip, #-8]
 8006492:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8006496:	3514      	adds	r5, #20
 8006498:	3608      	adds	r6, #8
 800649a:	4611      	mov	r1, r2
 800649c:	3f01      	subs	r7, #1
 800649e:	f47f ae5a 	bne.w	8006156 <arm_biquad_cascade_df2T_f32+0x22>
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	4613      	mov	r3, r2
 80064a8:	e7d4      	b.n	8006454 <arm_biquad_cascade_df2T_f32+0x320>
	...

080064ac <arm_biquad_cascade_df2T_init_f32>:
 80064ac:	b510      	push	{r4, lr}
 80064ae:	6082      	str	r2, [r0, #8]
 80064b0:	7001      	strb	r1, [r0, #0]
 80064b2:	4604      	mov	r4, r0
 80064b4:	00ca      	lsls	r2, r1, #3
 80064b6:	4618      	mov	r0, r3
 80064b8:	2100      	movs	r1, #0
 80064ba:	f000 f832 	bl	8006522 <memset>
 80064be:	6060      	str	r0, [r4, #4]
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	bf00      	nop

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4e0d      	ldr	r6, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1ba4      	subs	r4, r4, r6
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2500      	movs	r5, #0
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4e0b      	ldr	r6, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 f82c 	bl	8006534 <_init>
 80064dc:	1ba4      	subs	r4, r4, r6
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2500      	movs	r5, #0
 80064e2:	42a5      	cmp	r5, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ec:	4798      	blx	r3
 80064ee:	3501      	adds	r5, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064f6:	4798      	blx	r3
 80064f8:	3501      	adds	r5, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08006588 	.word	0x08006588
 8006500:	08006588 	.word	0x08006588
 8006504:	08006588 	.word	0x08006588
 8006508:	0800658c 	.word	0x0800658c

0800650c <memcpy>:
 800650c:	b510      	push	{r4, lr}
 800650e:	1e43      	subs	r3, r0, #1
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	d100      	bne.n	8006518 <memcpy+0xc>
 8006516:	bd10      	pop	{r4, pc}
 8006518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800651c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006520:	e7f7      	b.n	8006512 <memcpy+0x6>

08006522 <memset>:
 8006522:	4402      	add	r2, r0
 8006524:	4603      	mov	r3, r0
 8006526:	4293      	cmp	r3, r2
 8006528:	d100      	bne.n	800652c <memset+0xa>
 800652a:	4770      	bx	lr
 800652c:	f803 1b01 	strb.w	r1, [r3], #1
 8006530:	e7f9      	b.n	8006526 <memset+0x4>
	...

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
