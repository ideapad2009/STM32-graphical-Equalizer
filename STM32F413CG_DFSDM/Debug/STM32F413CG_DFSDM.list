
STM32F413CG_DFSDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000665c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e28  08006e28  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e30  08006e30  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000080b4  20000088  08006ec0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000813c  08006ec0  0002813c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ff2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c6  00000000  00000000  000320aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000233a4  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eeaa  00000000  00000000  0005979c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4a84  00000000  00000000  00068646  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  0013d0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  0013d1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000088 	.word	0x20000088
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800681c 	.word	0x0800681c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000008c 	.word	0x2000008c
 8000214:	0800681c 	.word	0x0800681c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Codec_Reset>:
	0x001	// Reg 09: Active Control
};


void Codec_Reset(I2C_HandleTypeDef *i2c_handle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t status =0;
 8000520:	2300      	movs	r3, #0
 8000522:	73bb      	strb	r3, [r7, #14]
	i2cx = *i2c_handle;
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <Codec_Reset+0x78>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4610      	mov	r0, r2
 800052a:	4619      	mov	r1, r3
 800052c:	2354      	movs	r3, #84	; 0x54
 800052e:	461a      	mov	r2, r3
 8000530:	f006 f8f4 	bl	800671c <memcpy>
	Codec_WriteRegister(0x0F, 0x00);
 8000534:	2100      	movs	r1, #0
 8000536:	200f      	movs	r0, #15
 8000538:	f000 f82e 	bl	8000598 <Codec_WriteRegister>

	/* Load default values */
	for(i=0;i<W8731_NUM_REGS;i++)
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e01f      	b.n	8000582 <Codec_Reset+0x6a>
	{
		HAL_Delay(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f001 f816 	bl	8001574 <HAL_Delay>

		status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <Codec_Reset+0x7c>)
 800054c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 f81f 	bl	8000598 <Codec_WriteRegister>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 800055e:	e00a      	b.n	8000576 <Codec_Reset+0x5e>
			status=Codec_WriteRegister(i, w8731_init_data[i]);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <Codec_Reset+0x7c>)
 8000564:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	4611      	mov	r1, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f813 	bl	8000598 <Codec_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
		while (status ==0){
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f1      	beq.n	8000560 <Codec_Reset+0x48>
	for(i=0;i<W8731_NUM_REGS;i++)
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	3301      	adds	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d9dc      	bls.n	8000542 <Codec_Reset+0x2a>
		}

	}
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000a4 	.word	0x200000a4
 8000594:	08006df4 	.word	0x08006df4

08000598 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint16_t RegisterValue)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
	uint32_t result = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
	// RegisterValue is 9-bit register
	/* Assemble 2-byte data in WM8731 format */
	uint8_t Byte1 = ((RegisterAddr<<1)&0xFE) | ((RegisterValue>>8)&0x1);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	72fb      	strb	r3, [r7, #11]
	uint8_t Byte2 = RegisterValue&0xFF;
 80005c6:	88bb      	ldrh	r3, [r7, #4]
 80005c8:	72bb      	strb	r3, [r7, #10]
	iData[0] = Byte1;
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <Codec_WriteRegister+0x80>)
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	7013      	strb	r3, [r2, #0]
	iData[1] = Byte2;
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <Codec_WriteRegister+0x80>)
 80005d2:	7abb      	ldrb	r3, [r7, #10]
 80005d4:	7053      	strb	r3, [r2, #1]
	/* Transmit the slave address and enable writing operation */
	// take the most significant 7 bit address in the address byte
	if (HAL_I2C_Master_Transmit(&i2cx, CODEC_ADDRESS, iData, 2, 1000) != HAL_OK)
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <Codec_WriteRegister+0x80>)
 80005e0:	2134      	movs	r1, #52	; 0x34
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <Codec_WriteRegister+0x84>)
 80005e4:	f002 fae4 	bl	8002bb0 <HAL_I2C_Master_Transmit>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <Codec_WriteRegister+0x66>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	480b      	ldr	r0, [pc, #44]	; (8000620 <Codec_WriteRegister+0x88>)
 80005f4:	f002 f98a 	bl	800290c <HAL_GPIO_WritePin>

		result = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e006      	b.n	800060c <Codec_WriteRegister+0x74>
		}
	else {

		result =1;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2120      	movs	r1, #32
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <Codec_WriteRegister+0x88>)
 8000608:	f002 f980 	bl	800290c <HAL_GPIO_WritePin>
	}

	return result;
 800060c:	68fb      	ldr	r3, [r7, #12]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000f8 	.word	0x200000f8
 800061c:	200000a4 	.word	0x200000a4
 8000620:	40020000 	.word	0x40020000

08000624 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800062a:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <MX_DFSDM1_Init+0xbc>)
 800062c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800063c:	2201      	movs	r2, #1
 800063e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000646:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000650:	2201      	movs	r2, #1
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000654:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 8000656:	f001 f9b1 	bl	80019bc <HAL_DFSDM_FilterInit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000660:	f000 fe30 	bl	80012c4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <MX_DFSDM1_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800066c:	2201      	movs	r2, #1
 800066e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 20;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800067a:	2214      	movs	r2, #20
 800067c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 8000698:	2204      	movs	r2, #4
 800069a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift =0;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_DFSDM1_Init+0xc0>)
 80006b6:	f001 f891 	bl	80017dc <HAL_DFSDM_ChannelInit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80006c0:	f000 fe00 	bl	80012c4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80006c4:	2201      	movs	r2, #1
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <MX_DFSDM1_Init+0xc8>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_DFSDM1_Init+0xb8>)
 80006ca:	f001 fa63 	bl	8001b94 <HAL_DFSDM_FilterConfigRegChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80006d4:	f000 fdf6 	bl	80012c4 <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20007f34 	.word	0x20007f34
 80006e0:	40016100 	.word	0x40016100
 80006e4:	20007efc 	.word	0x20007efc
 80006e8:	40016020 	.word	0x40016020
 80006ec:	00010002 	.word	0x00010002

080006f0 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(dfsdm_filterHandle->Instance))&&(DFSDM1_Init == 0))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a53      	ldr	r2, [pc, #332]	; (800085c <HAL_DFSDM_FilterMspInit+0x16c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <HAL_DFSDM_FilterMspInit+0x2c>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a52      	ldr	r2, [pc, #328]	; (8000860 <HAL_DFSDM_FilterMspInit+0x170>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d15d      	bne.n	80007d8 <HAL_DFSDM_FilterMspInit+0xe8>
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d159      	bne.n	80007d8 <HAL_DFSDM_FilterMspInit+0xe8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000724:	4b50      	ldr	r3, [pc, #320]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 800072c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800072e:	4b4e      	ldr	r3, [pc, #312]	; (8000868 <HAL_DFSDM_FilterMspInit+0x178>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10d      	bne.n	8000752 <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b4c      	ldr	r3, [pc, #304]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a4b      	ldr	r2, [pc, #300]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b45      	ldr	r3, [pc, #276]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a44      	ldr	r2, [pc, #272]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b42      	ldr	r3, [pc, #264]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a3d      	ldr	r2, [pc, #244]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800079c:	230a      	movs	r3, #10
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4832      	ldr	r0, [pc, #200]	; (8000870 <HAL_DFSDM_FilterMspInit+0x180>)
 80007a8:	f001 ff1e 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007be:	2306      	movs	r3, #6
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	482a      	ldr	r0, [pc, #168]	; (8000874 <HAL_DFSDM_FilterMspInit+0x184>)
 80007ca:	f001 ff0d 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a23      	ldr	r2, [pc, #140]	; (8000864 <HAL_DFSDM_FilterMspInit+0x174>)
 80007d6:	6013      	str	r3, [r2, #0]
  }
  
    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1f      	ldr	r2, [pc, #124]	; (800085c <HAL_DFSDM_FilterMspInit+0x16c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d137      	bne.n	8000852 <HAL_DFSDM_FilterMspInit+0x162>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007e4:	4a25      	ldr	r2, [pc, #148]	; (800087c <HAL_DFSDM_FilterMspInit+0x18c>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007ea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 80007fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000802:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800080e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000812:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800081e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000822:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800082a:	4813      	ldr	r0, [pc, #76]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800082c:	f001 fb6e 	bl	8001f0c <HAL_DMA_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <HAL_DFSDM_FilterMspInit+0x14a>
    {
      Error_Handler();
 8000836:	f000 fd45 	bl	80012c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_DFSDM_FilterMspInit+0x188>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40016100 	.word	0x40016100
 8000860:	40016180 	.word	0x40016180
 8000864:	20000100 	.word	0x20000100
 8000868:	200000fc 	.word	0x200000fc
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40020000 	.word	0x40020000
 8000878:	20007f88 	.word	0x20007f88
 800087c:	40026410 	.word	0x40026410

08000880 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(dfsdm_channelHandle->Instance))&&(DFSDM1_Init == 0))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a39      	ldr	r2, [pc, #228]	; (8000984 <HAL_DFSDM_ChannelMspInit+0x104>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d00e      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <HAL_DFSDM_ChannelMspInit+0x108>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d009      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a36      	ldr	r2, [pc, #216]	; (800098c <HAL_DFSDM_ChannelMspInit+0x10c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d004      	beq.n	80008c0 <HAL_DFSDM_ChannelMspInit+0x40>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <HAL_DFSDM_ChannelMspInit+0x110>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d15d      	bne.n	800097c <HAL_DFSDM_ChannelMspInit+0xfc>
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d159      	bne.n	800097c <HAL_DFSDM_ChannelMspInit+0xfc>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a32      	ldr	r2, [pc, #200]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <HAL_DFSDM_ChannelMspInit+0x118>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10d      	bne.n	80008f6 <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a2e      	ldr	r2, [pc, #184]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a27      	ldr	r2, [pc, #156]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a20      	ldr	r2, [pc, #128]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration    
    PB12     ------> DFSDM1_DATIN1
    PA8     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000940:	230a      	movs	r3, #10
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <HAL_DFSDM_ChannelMspInit+0x120>)
 800094c:	f001 fe4c 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000962:	2306      	movs	r3, #6
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_DFSDM_ChannelMspInit+0x124>)
 800096e:	f001 fe3b 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_DFSDM_ChannelMspInit+0x114>)
 800097a:	6013      	str	r3, [r2, #0]
  }
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40016000 	.word	0x40016000
 8000988:	40016020 	.word	0x40016020
 800098c:	40016040 	.word	0x40016040
 8000990:	40016060 	.word	0x40016060
 8000994:	20000100 	.word	0x20000100
 8000998:	200000fc 	.word	0x200000fc
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40020000 	.word	0x40020000

080009a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_DMA_Init+0x78>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <MX_DMA_Init+0x78>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_DMA_Init+0x78>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_DMA_Init+0x78>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <MX_DMA_Init+0x78>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_DMA_Init+0x78>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2010      	movs	r0, #16
 80009ec:	f000 febf 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009f0:	2010      	movs	r0, #16
 80009f2:	f000 fed8 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	202f      	movs	r0, #47	; 0x2f
 80009fc:	f000 feb7 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a00:	202f      	movs	r0, #47	; 0x2f
 8000a02:	f000 fed0 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2038      	movs	r0, #56	; 0x38
 8000a0c:	f000 feaf 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a10:	2038      	movs	r0, #56	; 0x38
 8000a12:	f000 fec8 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <Equalizer_Init>:
static int16_t GrEqEn = 1;

static int16_t UserGaindB[GREQ_NB_BANDS_10] = {-12,-12,-12,-12,-12,-12,-12,12,12,12};    /* Gain for each band*/

int8_t Equalizer_Init( uint16_t buffer_size)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]

	int32_t error = GREQ_ERROR_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
	/* Allocat mem for GrEq */
	pGreqPersistentMem = malloc(  greq_persistent_mem_size); /* greq_persistent_mem_size  0x224 */
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <Equalizer_Init+0xe0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fe68 	bl	800670c <malloc>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <Equalizer_Init+0xe4>)
 8000a42:	601a      	str	r2, [r3, #0]
	pGreqScratchMem = malloc(greq_scratch_mem_size);       /* greq_scratch_mem_size  0xF00 */
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <Equalizer_Init+0xe8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 fe5f 	bl	800670c <malloc>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <Equalizer_Init+0xec>)
 8000a54:	601a      	str	r2, [r3, #0]

	/* GREQ effect reset */
	error = greq_reset(pGreqPersistentMem, pGreqScratchMem);
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <Equalizer_Init+0xe4>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <Equalizer_Init+0xec>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f004 fa9f 	bl	8004fa4 <greq_reset>
 8000a66:	60b8      	str	r0, [r7, #8]
	if (error != GREQ_ERROR_NONE)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <Equalizer_Init+0x50>
	{
		return (error);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	e042      	b.n	8000afa <Equalizer_Init+0xd6>
	}
	/* GREQ effect static parameters setting */
	greq_static_param.nb_bands = GREQ_NB_BANDS_10;  /* 10-bands equalizer */
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <Equalizer_Init+0xf0>)
 8000a76:	220a      	movs	r2, #10
 8000a78:	801a      	strh	r2, [r3, #0]
	error = greq_setParam(&greq_static_param, pGreqPersistentMem);
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <Equalizer_Init+0xe4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4824      	ldr	r0, [pc, #144]	; (8000b14 <Equalizer_Init+0xf0>)
 8000a82:	f005 faa7 	bl	8005fd4 <greq_setParam>
 8000a86:	60b8      	str	r0, [r7, #8]
	if (error != GREQ_ERROR_NONE)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <Equalizer_Init+0x70>
	{
		return (error);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	e032      	b.n	8000afa <Equalizer_Init+0xd6>
	}
	/* GREQ dynamic parameters that can be updated here every frame if required */
	greq_dynamic_param.enable = 1;            /* Enables the effect */
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <Equalizer_Init+0xf4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	801a      	strh	r2, [r3, #0]
	for ( int i =0 ; i<GREQ_NB_BANDS_10 ;i++ ){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e00c      	b.n	8000aba <Equalizer_Init+0x96>
		greq_dynamic_param.user_gain_per_band_dB[i] = UserGaindB[i]; /* Gain for band 1 */
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <Equalizer_Init+0xf8>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <Equalizer_Init+0xf4>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	805a      	strh	r2, [r3, #2]
	for ( int i =0 ; i<GREQ_NB_BANDS_10 ;i++ ){
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b09      	cmp	r3, #9
 8000abe:	ddef      	ble.n	8000aa0 <Equalizer_Init+0x7c>
	}
	greq_dynamic_param.gain_preset_idx = GREQ_NO_PRESET;         /* User preset defined above */
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <Equalizer_Init+0xf4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	82da      	strh	r2, [r3, #22]

	error = greq_setConfig(&greq_dynamic_param, pGreqPersistentMem);
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <Equalizer_Init+0xe4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <Equalizer_Init+0xf4>)
 8000ace:	f004 fb3b 	bl	8005148 <greq_setConfig>
 8000ad2:	60b8      	str	r0, [r7, #8]
	if (error != GREQ_ERROR_NONE)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <Equalizer_Init+0xbc>
	{
		return (error);
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	e00c      	b.n	8000afa <Equalizer_Init+0xd6>
	}
	/* I/O buffers settings */
	    BufferHandler.nb_bytes_per_Sample = 4; /* 8 bits in 0ne byte */
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Equalizer_Init+0xfc>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	605a      	str	r2, [r3, #4]
	    BufferHandler.nb_channels = 2; /* stereo */
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <Equalizer_Init+0xfc>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
	    BufferHandler.buffer_size = buffer_size; /* just half buffer is process (size per channel) */
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <Equalizer_Init+0xfc>)
 8000af0:	60d3      	str	r3, [r2, #12]
	    BufferHandler.mode = INTERLEAVED;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <Equalizer_Init+0xfc>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	611a      	str	r2, [r3, #16]

	    return GREQ_ERROR_NONE;
 8000af8:	2300      	movs	r3, #0


}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08006afc 	.word	0x08006afc
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	08006af8 	.word	0x08006af8
 8000b10:	20000108 	.word	0x20000108
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	20000110 	.word	0x20000110
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	20000128 	.word	0x20000128

08000b24 <equalizerProcess>:
int8_t equalizerProcess(int32_t *In_Buffer){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	int32_t error = GREQ_ERROR_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
	BufferHandler.data_ptr = &In_Buffer[0];
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <equalizerProcess+0x34>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6093      	str	r3, [r2, #8]
	error = greq_process(pBufferHandler, pBufferHandler, pGreqPersistentMem);
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <equalizerProcess+0x38>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <equalizerProcess+0x38>)
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <equalizerProcess+0x3c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	f005 fb34 	bl	80061b0 <greq_process>
 8000b48:	60f8      	str	r0, [r7, #12]
		return error;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	b25b      	sxtb	r3, r3


}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000128 	.word	0x20000128
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000104 	.word	0x20000104

08000b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4816      	ldr	r0, [pc, #88]	; (8000c2c <MX_GPIO_Init+0xc8>)
 8000bd4:	f001 fe9a 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4814      	ldr	r0, [pc, #80]	; (8000c30 <MX_GPIO_Init+0xcc>)
 8000be0:	f001 fe94 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be4:	2320      	movs	r3, #32
 8000be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_GPIO_Init+0xc8>)
 8000bfc:	f001 fcf4 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0xcc>)
 8000c1a:	f001 fce5 	bl	80025e8 <HAL_GPIO_Init>

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400

08000c34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <MX_I2C1_Init+0x54>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_I2C1_Init+0x58>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_I2C1_Init+0x50>)
 8000c72:	f001 fe65 	bl	8002940 <HAL_I2C_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c7c:	f000 fb22 	bl	80012c4 <Error_Handler>
  }

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20007fe8 	.word	0x20007fe8
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	000186a0 	.word	0x000186a0

08000c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_I2C_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12b      	bne.n	8000d0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cce:	23c0      	movs	r3, #192	; 0xc0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd2:	2312      	movs	r3, #18
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <HAL_I2C_MspInit+0x8c>)
 8000cea:	f001 fc7d 	bl	80025e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_I2C_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <MX_I2S3_Init+0x58>)
 8000d28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d48:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d4c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_I2S3_Init+0x54>)
 8000d62:	f002 fb5b 	bl	800341c <HAL_I2S_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000d6c:	f000 faaa 	bl	80012c4 <Error_Handler>
  }

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000809c 	.word	0x2000809c
 8000d78:	40003c00 	.word	0x40003c00

08000d7c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a41      	ldr	r2, [pc, #260]	; (8000ea0 <HAL_I2S_MspInit+0x124>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d17b      	bne.n	8000e96 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_I2S_MspInit+0x128>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB5     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_5;
 8000df2:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e04:	2306      	movs	r3, #6
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <HAL_I2S_MspInit+0x12c>)
 8000e10:	f001 fbea 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e26:	2306      	movs	r3, #6
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <HAL_I2S_MspInit+0x130>)
 8000e32:	f001 fbd9 	bl	80025e8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_I2S_MspInit+0x138>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e44:	2240      	movs	r2, #64	; 0x40
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e72:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e7c:	f001 f846 	bl	8001f0c <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8000e86:	f000 fa1d 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_I2S_MspInit+0x134>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40003c00 	.word	0x40003c00
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	2000803c 	.word	0x2000803c
 8000eb4:	400260b8 	.word	0x400260b8

08000eb8 <main>:
	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC);
	DmaLeftRecBuffCplt  = 0;
	DmaRightRecBuffCplt = 0;
}
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_Init();
 8000ebc:	f000 fae8 	bl	8001490 <HAL_Init>
	SystemClock_Config();
 8000ec0:	f000 f968 	bl	8001194 <SystemClock_Config>
	MX_GPIO_Init();
 8000ec4:	f7ff fe4e 	bl	8000b64 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ec8:	f7ff fd6e 	bl	80009a8 <MX_DMA_Init>
	MX_I2C1_Init();
 8000ecc:	f7ff feb2 	bl	8000c34 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000ed0:	f7ff ff26 	bl	8000d20 <MX_I2S3_Init>
	MX_DFSDM1_Init();
 8000ed4:	f7ff fba6 	bl	8000624 <MX_DFSDM1_Init>
	HAL_TIM_Base_Start(&htim6);
	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);*/

	//__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
	//__HAL_I2S_ENABLE(&hi2s3);
	HAL_Delay(1000);
 8000ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000edc:	f000 fb4a 	bl	8001574 <HAL_Delay>
	if (HAL_I2C_IsDeviceReady(&hi2c1, CODEC_ADDRESS, 1, 10) == HAL_OK){
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2134      	movs	r1, #52	; 0x34
 8000ee6:	4882      	ldr	r0, [pc, #520]	; (80010f0 <main+0x238>)
 8000ee8:	f001 ff60 	bl	8002dac <HAL_I2C_IsDeviceReady>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <main+0x3e>
		TestBlinking();
 8000ef2:	f000 f937 	bl	8001164 <TestBlinking>
	}
	Codec_Reset(&hi2c1);
 8000ef6:	487e      	ldr	r0, [pc, #504]	; (80010f0 <main+0x238>)
 8000ef8:	f7ff fb0e 	bl	8000518 <Codec_Reset>

	error =Equalizer_Init(AUDIO_REC/4);
 8000efc:	20fa      	movs	r0, #250	; 0xfa
 8000efe:	f7ff fd91 	bl	8000a24 <Equalizer_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <main+0x23c>)
 8000f08:	701a      	strb	r2, [r3, #0]
	if (error != GREQ_ERROR_NONE)
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <main+0x23c>)
 8000f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <main+0x60>
	{
		Error_Handler();
 8000f14:	f000 f9d6 	bl	80012c4 <Error_Handler>
	}
	if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, AUDIO_REC))
 8000f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1c:	4976      	ldr	r1, [pc, #472]	; (80010f8 <main+0x240>)
 8000f1e:	4877      	ldr	r0, [pc, #476]	; (80010fc <main+0x244>)
 8000f20:	f000 fe7e 	bl	8001c20 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <main+0x76>
	{
		Error_Handler();
 8000f2a:	f000 f9cb 	bl	80012c4 <Error_Handler>
	//playSong();
	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC*2);
	while (1)
	{

		if((DmaRightRecHalfBuffCplt == 1))
 8000f2e:	4b74      	ldr	r3, [pc, #464]	; (8001100 <main+0x248>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d16b      	bne.n	800100e <main+0x156>
		{
			error=equalizerProcess(&RightRecBuff[0]);
 8000f36:	4870      	ldr	r0, [pc, #448]	; (80010f8 <main+0x240>)
 8000f38:	f7ff fdf4 	bl	8000b24 <equalizerProcess>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <main+0x23c>)
 8000f42:	701a      	strb	r2, [r3, #0]
			if (error != GREQ_ERROR_NONE)
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <main+0x23c>)
 8000f46:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <main+0x9a>
			{
				Error_Handler();
 8000f4e:	f000 f9b9 	bl	80012c4 <Error_Handler>
			}
			for(i = 0; i < AUDIO_REC/2; i++)
 8000f52:	4b6c      	ldr	r3, [pc, #432]	; (8001104 <main+0x24c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e048      	b.n	8000fec <main+0x134>
			{
				RightRecBuff[i]=RightRecBuff[i]*3;
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <main+0x24c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <main+0x240>)
 8000f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f64:	4b67      	ldr	r3, [pc, #412]	; (8001104 <main+0x24c>)
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a62      	ldr	r2, [pc, #392]	; (80010f8 <main+0x240>)
 8000f70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				txBuf[i*4] = RightRecBuff[i]>>16 ;
 8000f74:	4b63      	ldr	r3, [pc, #396]	; (8001104 <main+0x24c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a5f      	ldr	r2, [pc, #380]	; (80010f8 <main+0x240>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	141a      	asrs	r2, r3, #16
 8000f80:	4b60      	ldr	r3, [pc, #384]	; (8001104 <main+0x24c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	b291      	uxth	r1, r2
 8000f88:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <main+0x250>)
 8000f8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1] = (uint16_t)(RightRecBuff[i]<<1);//&0xFF00 //to emit the least 8 bit
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <main+0x24c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a59      	ldr	r2, [pc, #356]	; (80010f8 <main+0x240>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b5a      	ldr	r3, [pc, #360]	; (8001104 <main+0x24c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	0052      	lsls	r2, r2, #1
 8000fa4:	b291      	uxth	r1, r2
 8000fa6:	4a58      	ldr	r2, [pc, #352]	; (8001108 <main+0x250>)
 8000fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <main+0x24c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	009a      	lsls	r2, r3, #2
 8000fb2:	4b54      	ldr	r3, [pc, #336]	; (8001104 <main+0x24c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	4953      	ldr	r1, [pc, #332]	; (8001108 <main+0x250>)
 8000fbc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <main+0x250>)
 8000fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <main+0x24c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <main+0x24c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	494c      	ldr	r1, [pc, #304]	; (8001108 <main+0x250>)
 8000fd8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <main+0x250>)
 8000fde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = 0; i < AUDIO_REC/2; i++)
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <main+0x24c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a46      	ldr	r2, [pc, #280]	; (8001104 <main+0x24c>)
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b45      	ldr	r3, [pc, #276]	; (8001104 <main+0x24c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff4:	d3b1      	bcc.n	8000f5a <main+0xa2>
			}
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)txBuf, AUDIO_REC);
 8000ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffa:	4943      	ldr	r1, [pc, #268]	; (8001108 <main+0x250>)
 8000ffc:	4843      	ldr	r0, [pc, #268]	; (800110c <main+0x254>)
 8000ffe:	f002 fb6f 	bl	80036e0 <HAL_I2S_Transmit_DMA>
				{
					Error_Handler();
				}
				PlaybackStarted = 1;
			}*/
			DmaLeftRecHalfBuffCplt  = 0;
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <main+0x258>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
			DmaRightRecHalfBuffCplt = 0;
 8001008:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <main+0x248>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		}
		if( (DmaRightRecBuffCplt == 1))
 800100e:	4b41      	ldr	r3, [pc, #260]	; (8001114 <main+0x25c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d18b      	bne.n	8000f2e <main+0x76>
		{
			error=equalizerProcess(&RightRecBuff[AUDIO_REC/2]);
 8001016:	4840      	ldr	r0, [pc, #256]	; (8001118 <main+0x260>)
 8001018:	f7ff fd84 	bl	8000b24 <equalizerProcess>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <main+0x23c>)
 8001022:	701a      	strb	r2, [r3, #0]
			if (error != GREQ_ERROR_NONE)
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <main+0x23c>)
 8001026:	f993 3000 	ldrsb.w	r3, [r3]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <main+0x17a>
			{
				Error_Handler();
 800102e:	f000 f949 	bl	80012c4 <Error_Handler>
			}
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <main+0x24c>)
 8001034:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e046      	b.n	80010ca <main+0x212>
			{
				RightRecBuff[i]=RightRecBuff[i]*3;
 800103c:	4b31      	ldr	r3, [pc, #196]	; (8001104 <main+0x24c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <main+0x240>)
 8001042:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <main+0x24c>)
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <main+0x240>)
 8001052:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				txBuf[i*4] = RightRecBuff[i]>>16 ;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <main+0x24c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <main+0x240>)
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	141a      	asrs	r2, r3, #16
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <main+0x24c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	b291      	uxth	r1, r2
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <main+0x250>)
 800106c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+1] = (uint16_t)(RightRecBuff[i]) ;//&0xFF00 //to emit the least 8 bit
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <main+0x24c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <main+0x240>)
 8001076:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <main+0x24c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	3301      	adds	r3, #1
 8001082:	b291      	uxth	r1, r2
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <main+0x250>)
 8001086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+2] = txBuf[i*4];
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <main+0x24c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	009a      	lsls	r2, r3, #2
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x24c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	491b      	ldr	r1, [pc, #108]	; (8001108 <main+0x250>)
 800109a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <main+0x250>)
 80010a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[(i*4)+3] = txBuf[(i*4)+1];
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <main+0x24c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <main+0x24c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	3303      	adds	r3, #3
 80010b4:	4914      	ldr	r1, [pc, #80]	; (8001108 <main+0x250>)
 80010b6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <main+0x250>)
 80010bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(i = AUDIO_REC/2; i < AUDIO_REC; i++)
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <main+0x24c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <main+0x24c>)
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <main+0x24c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d2:	d3b3      	bcc.n	800103c <main+0x184>
			}
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)&txBuf[AUDIO_REC], AUDIO_REC);
 80010d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <main+0x264>)
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <main+0x254>)
 80010dc:	f002 fb00 	bl	80036e0 <HAL_I2S_Transmit_DMA>
			DmaLeftRecBuffCplt  = 0;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <main+0x268>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
			DmaRightRecBuffCplt = 0;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <main+0x25c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
		if((DmaRightRecHalfBuffCplt == 1))
 80010ec:	e71f      	b.n	8000f2e <main+0x76>
 80010ee:	bf00      	nop
 80010f0:	20007fe8 	.word	0x20007fe8
 80010f4:	20007e40 	.word	0x20007e40
 80010f8:	2000013c 	.word	0x2000013c
 80010fc:	20007f34 	.word	0x20007f34
 8001100:	20007e3e 	.word	0x20007e3e
 8001104:	20008104 	.word	0x20008104
 8001108:	20003fbc 	.word	0x20003fbc
 800110c:	2000809c 	.word	0x2000809c
 8001110:	20007e3c 	.word	0x20007e3c
 8001114:	20007e3f 	.word	0x20007e3f
 8001118:	2000090c 	.word	0x2000090c
 800111c:	2000478c 	.word	0x2000478c
 8001120:	20007e3d 	.word	0x20007e3d

08001124 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
/*void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
	playSong();
}*/
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
		DmaRightRecHalfBuffCplt = 1;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]

	//DmaLeftRecHalfBuffCplt=1;
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20007e3e 	.word	0x20007e3e

08001144 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

	DmaRightRecBuffCplt = 1;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
	//DmaLeftRecHalfBuffCplt=1;
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
	//DAC_FLAG=1;
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20007e3f 	.word	0x20007e3f

08001164 <TestBlinking>:
void TestBlinking(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2120      	movs	r1, #32
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <TestBlinking+0x2c>)
 800116e:	f001 fbcd 	bl	800290c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001176:	f000 f9fd 	bl	8001574 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2120      	movs	r1, #32
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <TestBlinking+0x2c>)
 8001180:	f001 fbc4 	bl	800290c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001188:	f000 f9f4 	bl	8001574 <HAL_Delay>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020000 	.word	0x40020000

08001194 <SystemClock_Config>:
  * @retval int
  */

#include"body_DFSDM_I2S.h"
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0aa      	sub	sp, #168	; 0xa8
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800119e:	2234      	movs	r2, #52	; 0x34
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 fac5 	bl	8006732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2258      	movs	r2, #88	; 0x58
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fab6 	bl	8006732 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <SystemClock_Config+0x128>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a3b      	ldr	r2, [pc, #236]	; (80012bc <SystemClock_Config+0x128>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b39      	ldr	r3, [pc, #228]	; (80012bc <SystemClock_Config+0x128>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <SystemClock_Config+0x12c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a35      	ldr	r2, [pc, #212]	; (80012c0 <SystemClock_Config+0x12c>)
 80011ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <SystemClock_Config+0x12c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001220:	2350      	movs	r3, #80	; 0x50
 8001222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 5;
 8001232:	2305      	movs	r3, #5
 8001234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fc6f 	bl	8004b20 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001248:	f000 f83c 	bl	80012c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001262:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001266:	2103      	movs	r1, #3
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fe9f 	bl	8003fac <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001274:	f000 f826 	bl	80012c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8001278:	f240 3301 	movw	r3, #769	; 0x301
 800127c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_DFSDM1_AUDIO;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800127e:	23c0      	movs	r3, #192	; 0xc0
 8001280:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 8001282:	230a      	movs	r3, #10
 8001284:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001286:	2305      	movs	r3, #5
 8001288:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 800128e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1;
 8001294:	2300      	movs	r3, #0
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001298:	2300      	movs	r3, #0
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 f85f 	bl	8004368 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80012b0:	f000 f808 	bl	80012c4 <Error_Handler>
  }
}
 80012b4:	bf00      	nop
 80012b6:	37a8      	adds	r7, #168	; 0xa8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  while(1){
	  TestBlinking();
 80012c8:	f7ff ff4c 	bl	8001164 <TestBlinking>
 80012cc:	e7fc      	b.n	80012c8 <Error_Handler+0x4>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_MspInit+0x4c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_MspInit+0x4c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_MspInit+0x4c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f8de 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA1_Stream5_IRQHandler+0x10>)
 8001382:	f000 fec9 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20007e88 	.word	0x20007e88

08001390 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Stream7_IRQHandler+0x10>)
 8001396:	f000 febf 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000803c 	.word	0x2000803c

080013a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA2_Stream0_IRQHandler+0x10>)
 80013aa:	f000 feb5 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20007f88 	.word	0x20007f88

080013b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x50>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x16>
		heap_end = &end;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <_sbrk+0x50>)
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <_sbrk+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <_sbrk+0x50>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <_sbrk+0x50>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	466a      	mov	r2, sp
 80013de:	4293      	cmp	r3, r2
 80013e0:	d907      	bls.n	80013f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013e2:	f005 f969 	bl	80066b8 <__errno>
 80013e6:	4602      	mov	r2, r0
 80013e8:	230c      	movs	r3, #12
 80013ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	e006      	b.n	8001400 <_sbrk+0x48>
	}

	heap_end += incr;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <_sbrk+0x50>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <_sbrk+0x50>)
 80013fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20007e44 	.word	0x20007e44
 800140c:	20008140 	.word	0x20008140

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <SystemInit+0x28>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <SystemInit+0x28>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SystemInit+0x28>)
 8001426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800142a:	609a      	str	r2, [r3, #8]
#endif
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001442:	e003      	b.n	800144c <LoopCopyDataInit>

08001444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800144a:	3104      	adds	r1, #4

0800144c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001454:	d3f6      	bcc.n	8001444 <CopyDataInit>
  ldr  r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001458:	e002      	b.n	8001460 <LoopFillZerobss>

0800145a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800145a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800145c:	f842 3b04 	str.w	r3, [r2], #4

08001460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001464:	d3f9      	bcc.n	800145a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd3 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f005 f92b 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fd23 	bl	8000eb8 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001474:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001478:	08006e38 	.word	0x08006e38
  ldr  r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001480:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001484:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001488:	2000813c 	.word	0x2000813c

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94d 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff ff04 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f965 	bl	80017c2 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f92d 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000018 	.word	0x20000018
 800152c:	20000020 	.word	0x20000020
 8001530:	2000001c 	.word	0x2000001c

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000020 	.word	0x20000020
 8001558:	20008134 	.word	0x20008134

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20008134 	.word	0x20008134

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_Delay+0x40>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000020 	.word	0x20000020

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff3e 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff31 	bl	800161c <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa2 	bl	8001714 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0cf      	b.n	800198e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <HAL_DFSDM_ChannelInit+0x1bc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DFSDM_ChannelInit+0x3a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_DFSDM_ChannelInit+0x1c0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DFSDM_ChannelInit+0x3a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DFSDM_ChannelInit+0x3a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a64      	ldr	r2, [pc, #400]	; (80019a4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d106      	bne.n	8001824 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8001816:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8001818:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800181a:	4b64      	ldr	r3, [pc, #400]	; (80019ac <HAL_DFSDM_ChannelInit+0x1d0>)
 800181c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800181e:	4b5e      	ldr	r3, [pc, #376]	; (8001998 <HAL_DFSDM_ChannelInit+0x1bc>)
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	e005      	b.n	8001830 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8001824:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_DFSDM_ChannelInit+0x1d4>)
 8001826:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8001828:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_DFSDM_ChannelInit+0x1d8>)
 800182a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_DFSDM_ChannelInit+0x1dc>)
 800182e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 faaf 	bl	8001d98 <DFSDM_GetChannelFromInstance>
 800183a:	4603      	mov	r3, r0
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0a0      	b.n	800198e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff f817 	bl	8000880 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d125      	bne.n	80018b0 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	431a      	orrs	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	431a      	orrs	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018be:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018ce:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80018d4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 020f 	bic.w	r2, r2, #15
 80018ec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001914:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	3b01      	subs	r3, #1
 8001926:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f002 0207 	and.w	r2, r2, #7
 8001940:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fa0c 	bl	8001d98 <DFSDM_GetChannelFromInstance>
 8001980:	4603      	mov	r3, r0
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40016000 	.word	0x40016000
 800199c:	40016020 	.word	0x40016020
 80019a0:	40016040 	.word	0x40016040
 80019a4:	40016060 	.word	0x40016060
 80019a8:	20007e48 	.word	0x20007e48
 80019ac:	20007e4c 	.word	0x20007e4c
 80019b0:	20007e5c 	.word	0x20007e5c
 80019b4:	20007e60 	.word	0x20007e60
 80019b8:	40016400 	.word	0x40016400

080019bc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0d9      	b.n	8001b82 <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_DFSDM_FilterInit+0x1d0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d109      	bne.n	80019ec <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d003      	beq.n	80019e8 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0ca      	b.n	8001b82 <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a67      	ldr	r2, [pc, #412]	; (8001b90 <HAL_DFSDM_FilterInit+0x1d4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d109      	bne.n	8001a0a <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0bb      	b.n	8001b82 <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fe64 	bl	80006f0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001a36:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a60:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7a5b      	ldrb	r3, [r3, #9]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e007      	b.n	8001a8c <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001a9a:	f023 0308 	bic.w	r3, r3, #8
 8001a9e:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d108      	bne.n	8001aba <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0210 	orr.w	r2, r2, #16
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e007      	b.n	8001ae4 <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7c5b      	ldrb	r3, [r3, #17]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d108      	bne.n	8001afe <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e007      	b.n	8001b0e <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0220 	bic.w	r2, r2, #32
 8001b0c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001b1c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001b20:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6959      	ldr	r1, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b34:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001b3c:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7c1a      	ldrb	r2, [r3, #16]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40016100 	.word	0x40016100
 8001b90:	40016500 	.word	0x40016500

08001b94 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d02e      	beq.n	8001c0c <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8001bb4:	2bff      	cmp	r3, #255	; 0xff
 8001bb6:	d029      	beq.n	8001c0c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d10d      	bne.n	8001bee <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e00a      	b.n	8001c04 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0a:	e001      	b.n	8001c10 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e066      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c50:	d002      	beq.n	8001c58 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
 8001c56:	e05b      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10e      	bne.n	8001c7e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10a      	bne.n	8001c7e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d002      	beq.n	8001c7e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1U))
  {
    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	75fb      	strb	r3, [r7, #23]
 8001c7c:	e048      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d108      	bne.n	8001ca0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c98:	d102      	bne.n	8001ca0 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
 8001c9e:	e037      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d12b      	bne.n	8001d0c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cce:	d101      	bne.n	8001cd4 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8001cd2:	e000      	b.n	8001cd6 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8001cd4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	331c      	adds	r3, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f000 f9bc 	bl	8002068 <HAL_DMA_Start_IT>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	22ff      	movs	r2, #255	; 0xff
 8001cfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001d02:	e005      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f8ab 	bl	8001e60 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001d0a:	e001      	b.n	8001d10 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08001d59 	.word	0x08001d59
 8001d20:	08001d75 	.word	0x08001d75
 8001d24:	08001d3d 	.word	0x08001d3d

08001d28 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdfsdm_filter);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff f9ea 	bl	8001124 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff f9ec 	bl	8001144 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2203      	movs	r2, #3
 8001d86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ffcd 	bl	8001d28 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <DFSDM_GetChannelFromInstance+0x9c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d003      	beq.n	8001db0 <DFSDM_GetChannelFromInstance+0x18>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <DFSDM_GetChannelFromInstance+0xa0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d102      	bne.n	8001db6 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e037      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <DFSDM_GetChannelFromInstance+0xa4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <DFSDM_GetChannelFromInstance+0x2e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <DFSDM_GetChannelFromInstance+0xa8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d102      	bne.n	8001dcc <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e02c      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <DFSDM_GetChannelFromInstance+0xac>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <DFSDM_GetChannelFromInstance+0x44>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <DFSDM_GetChannelFromInstance+0xb0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e021      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <DFSDM_GetChannelFromInstance+0xb4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <DFSDM_GetChannelFromInstance+0x5a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <DFSDM_GetChannelFromInstance+0xb8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d102      	bne.n	8001df8 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8001df2:	2303      	movs	r3, #3
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e016      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <DFSDM_GetChannelFromInstance+0xbc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d102      	bne.n	8001e06 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8001e00:	2304      	movs	r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e00f      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <DFSDM_GetChannelFromInstance+0xc0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d102      	bne.n	8001e14 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e008      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <DFSDM_GetChannelFromInstance+0xc4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e001      	b.n	8001e26 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8001e22:	2307      	movs	r3, #7
 8001e24:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40016000 	.word	0x40016000
 8001e38:	40016400 	.word	0x40016400
 8001e3c:	40016020 	.word	0x40016020
 8001e40:	40016420 	.word	0x40016420
 8001e44:	40016040 	.word	0x40016040
 8001e48:	40016440 	.word	0x40016440
 8001e4c:	40016060 	.word	0x40016060
 8001e50:	40016460 	.word	0x40016460
 8001e54:	40016480 	.word	0x40016480
 8001e58:	400164a0 	.word	0x400164a0
 8001e5c:	400164c0 	.word	0x400164c0

08001e60 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d108      	bne.n	8001e82 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e033      	b.n	8001eea <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d116      	bne.n	8001eea <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0202 	orr.w	r2, r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <DFSDM_RegConvStart+0x84>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	e000      	b.n	8001ee6 <DFSDM_RegConvStart+0x86>
 8001ee4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <DFSDM_RegConvStart+0x98>
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	e000      	b.n	8001efa <DFSDM_RegConvStart+0x9a>
 8001ef8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fb20 	bl	800155c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e099      	b.n	800205c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	e00f      	b.n	8001f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4a:	f7ff fb07 	bl	800155c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d908      	bls.n	8001f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e078      	b.n	800205c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e8      	bne.n	8001f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4b38      	ldr	r3, [pc, #224]	; (8002064 <HAL_DMA_Init+0x158>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d107      	bne.n	8001fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d117      	bne.n	800202e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fa6f 	bl	80024f4 <DMA_CheckFifoParam>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202a:	2301      	movs	r3, #1
 800202c:	e016      	b.n	800205c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa26 	bl	8002488 <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	e010803f 	.word	0xe010803f

08002068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_DMA_Start_IT+0x26>
 800208a:	2302      	movs	r3, #2
 800208c:	e040      	b.n	8002110 <HAL_DMA_Start_IT+0xa8>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12f      	bne.n	8002102 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f9b8 	bl	800242c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	223f      	movs	r2, #63	; 0x3f
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0216 	orr.w	r2, r2, #22
 80020d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0208 	orr.w	r2, r2, #8
 80020ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e005      	b.n	800210e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_DMA_IRQHandler+0x258>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a92      	ldr	r2, [pc, #584]	; (8002374 <HAL_DMA_IRQHandler+0x25c>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0a9b      	lsrs	r3, r3, #10
 8002130:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2208      	movs	r2, #8
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2208      	movs	r2, #8
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0201 	orr.w	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2201      	movs	r2, #1
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d012      	beq.n	80021ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2201      	movs	r2, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2204      	movs	r2, #4
 80021c0:	409a      	lsls	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2204      	movs	r2, #4
 80021de:	409a      	lsls	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f043 0204 	orr.w	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2210      	movs	r2, #16
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d043      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03c      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2210      	movs	r2, #16
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d018      	beq.n	800225a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d024      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
 8002246:	e01f      	b.n	8002288 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01b      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	4798      	blx	r3
 8002258:	e016      	b.n	8002288 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0208 	bic.w	r2, r2, #8
 8002276:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228c:	2220      	movs	r2, #32
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 808e 	beq.w	80023b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8086 	beq.w	80023b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2220      	movs	r2, #32
 80022b0:	409a      	lsls	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d136      	bne.n	8002330 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0216 	bic.w	r2, r2, #22
 80022d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_DMA_IRQHandler+0x1da>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0208 	bic.w	r2, r2, #8
 8002300:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	223f      	movs	r2, #63	; 0x3f
 8002308:	409a      	lsls	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	2b00      	cmp	r3, #0
 8002324:	d07d      	beq.n	8002422 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
        }
        return;
 800232e:	e078      	b.n	8002422 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01c      	beq.n	8002378 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	2b00      	cmp	r3, #0
 8002352:	d030      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e02b      	b.n	80023b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
 800236e:	e022      	b.n	80023b6 <HAL_DMA_IRQHandler+0x29e>
 8002370:	20000018 	.word	0x20000018
 8002374:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0210 	bic.w	r2, r2, #16
 8002394:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d032      	beq.n	8002424 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d022      	beq.n	8002410 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2205      	movs	r2, #5
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d307      	bcc.n	80023fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f2      	bne.n	80023e2 <HAL_DMA_IRQHandler+0x2ca>
 80023fc:	e000      	b.n	8002400 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e000      	b.n	8002424 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002422:	bf00      	nop
    }
  }
}
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop

0800242c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002448:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d108      	bne.n	800246c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800246a:	e007      	b.n	800247c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3b10      	subs	r3, #16
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <DMA_CalcBaseAndBitshift+0x64>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <DMA_CalcBaseAndBitshift+0x68>)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d909      	bls.n	80024ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024be:	f023 0303 	bic.w	r3, r3, #3
 80024c2:	1d1a      	adds	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	; 0x58
 80024c8:	e007      	b.n	80024da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	aaaaaaab 	.word	0xaaaaaaab
 80024f0:	08006e20 	.word	0x08006e20

080024f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11f      	bne.n	800254e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d855      	bhi.n	80025c0 <DMA_CheckFifoParam+0xcc>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <DMA_CheckFifoParam+0x28>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	0800252d 	.word	0x0800252d
 8002520:	0800253f 	.word	0x0800253f
 8002524:	0800252d 	.word	0x0800252d
 8002528:	080025c1 	.word	0x080025c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d045      	beq.n	80025c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253c:	e042      	b.n	80025c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002546:	d13f      	bne.n	80025c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800254c:	e03c      	b.n	80025c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002556:	d121      	bne.n	800259c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d836      	bhi.n	80025cc <DMA_CheckFifoParam+0xd8>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <DMA_CheckFifoParam+0x70>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	08002575 	.word	0x08002575
 8002568:	0800257b 	.word	0x0800257b
 800256c:	08002575 	.word	0x08002575
 8002570:	0800258d 	.word	0x0800258d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e02f      	b.n	80025da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d024      	beq.n	80025d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258a:	e021      	b.n	80025d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002594:	d11e      	bne.n	80025d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800259a:	e01b      	b.n	80025d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d902      	bls.n	80025a8 <DMA_CheckFifoParam+0xb4>
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d003      	beq.n	80025ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025a6:	e018      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e015      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      break;
 80025be:	e00b      	b.n	80025d8 <DMA_CheckFifoParam+0xe4>
      break;
 80025c0:	bf00      	nop
 80025c2:	e00a      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;
 80025c4:	bf00      	nop
 80025c6:	e008      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;
 80025c8:	bf00      	nop
 80025ca:	e006      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;
 80025cc:	bf00      	nop
 80025ce:	e004      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;
 80025d0:	bf00      	nop
 80025d2:	e002      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;   
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <DMA_CheckFifoParam+0xe6>
      break;
 80025d8:	bf00      	nop
    }
  } 
  
  return status; 
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e165      	b.n	80028d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 8154 	bne.w	80028ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d00b      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002636:	2b11      	cmp	r3, #17
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b12      	cmp	r3, #18
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0xfc>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d123      	bne.n	800272c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80ae 	beq.w	80028ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <HAL_GPIO_Init+0x2fc>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_GPIO_Init+0x2fc>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_GPIO_Init+0x2fc>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x300>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4e      	ldr	r2, [pc, #312]	; (80028ec <HAL_GPIO_Init+0x304>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d025      	beq.n	8002802 <HAL_GPIO_Init+0x21a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4d      	ldr	r2, [pc, #308]	; (80028f0 <HAL_GPIO_Init+0x308>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <HAL_GPIO_Init+0x216>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4c      	ldr	r2, [pc, #304]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d019      	beq.n	80027fa <HAL_GPIO_Init+0x212>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4b      	ldr	r2, [pc, #300]	; (80028f8 <HAL_GPIO_Init+0x310>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d013      	beq.n	80027f6 <HAL_GPIO_Init+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <HAL_GPIO_Init+0x314>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00d      	beq.n	80027f2 <HAL_GPIO_Init+0x20a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	; (8002900 <HAL_GPIO_Init+0x318>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x206>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a48      	ldr	r2, [pc, #288]	; (8002904 <HAL_GPIO_Init+0x31c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d101      	bne.n	80027ea <HAL_GPIO_Init+0x202>
 80027e6:	2306      	movs	r3, #6
 80027e8:	e00c      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e00a      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x21c>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4934      	ldr	r1, [pc, #208]	; (80028e8 <HAL_GPIO_Init+0x300>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002846:	4a30      	ldr	r2, [pc, #192]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284c:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_GPIO_Init+0x320>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x320>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_GPIO_Init+0x320>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a10      	ldr	r2, [pc, #64]	; (8002908 <HAL_GPIO_Init+0x320>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f ae96 	bls.w	8002604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e11f      	b.n	8002b92 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe f992 	bl	8000c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a4:	f001 fccc 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a7b      	ldr	r2, [pc, #492]	; (8002b9c <HAL_I2C_Init+0x25c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d807      	bhi.n	80029c4 <HAL_I2C_Init+0x84>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_I2C_Init+0x260>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e006      	b.n	80029d2 <HAL_I2C_Init+0x92>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a77      	ldr	r2, [pc, #476]	; (8002ba4 <HAL_I2C_Init+0x264>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	bf94      	ite	ls
 80029cc:	2301      	movls	r3, #1
 80029ce:	2300      	movhi	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0db      	b.n	8002b92 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a72      	ldr	r2, [pc, #456]	; (8002ba8 <HAL_I2C_Init+0x268>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a64      	ldr	r2, [pc, #400]	; (8002b9c <HAL_I2C_Init+0x25c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d802      	bhi.n	8002a14 <HAL_I2C_Init+0xd4>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3301      	adds	r3, #1
 8002a12:	e009      	b.n	8002a28 <HAL_I2C_Init+0xe8>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_I2C_Init+0x26c>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	3301      	adds	r3, #1
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4956      	ldr	r1, [pc, #344]	; (8002b9c <HAL_I2C_Init+0x25c>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d80d      	bhi.n	8002a64 <HAL_I2C_Init+0x124>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e59      	subs	r1, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	bf38      	it	cc
 8002a60:	2304      	movcc	r3, #4
 8002a62:	e04f      	b.n	8002b04 <HAL_I2C_Init+0x1c4>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <HAL_I2C_Init+0x150>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e012      	b.n	8002ab6 <HAL_I2C_Init+0x176>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x17e>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_I2C_Init+0x1c4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_I2C_Init+0x1a4>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e58      	subs	r0, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	440b      	add	r3, r1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Init+0x1c4>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6809      	ldr	r1, [r1, #0]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6911      	ldr	r1, [r2, #16]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000186a0 	.word	0x000186a0
 8002ba0:	001e847f 	.word	0x001e847f
 8002ba4:	003d08ff 	.word	0x003d08ff
 8002ba8:	431bde83 	.word	0x431bde83
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	817b      	strh	r3, [r7, #10]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7fe fcca 	bl	800155c <HAL_GetTick>
 8002bc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	f040 80e0 	bne.w	8002d98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2319      	movs	r3, #25
 8002bde:	2201      	movs	r2, #1
 8002be0:	4970      	ldr	r1, [pc, #448]	; (8002da4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa92 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0d3      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_I2C_Master_Transmit+0x50>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0cc      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d007      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2210      	movs	r2, #16
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6a3a      	ldr	r2, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f9ca 	bl	8003008 <I2C_MasterRequestWrite>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e08d      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c94:	e066      	b.n	8002d64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fb0c 	bl	80032b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x188>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6a39      	ldr	r1, [r7, #32]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fafc 	bl	800333a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e01a      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d194      	bne.n	8002c96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	00100002 	.word	0x00100002
 8002da8:	ffff0000 	.word	0xffff0000

08002dac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7fe fbce 	bl	800155c <HAL_GetTick>
 8002dc0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 8110 	bne.w	8002ff4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4988      	ldr	r1, [pc, #544]	; (8003000 <HAL_I2C_IsDeviceReady+0x254>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f994 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e103      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_IsDeviceReady+0x50>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e0fc      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d007      	beq.n	8002e22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2224      	movs	r2, #36	; 0x24
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a70      	ldr	r2, [pc, #448]	; (8003004 <HAL_I2C_IsDeviceReady+0x258>)
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f952 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0b6      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e88:	897b      	ldrh	r3, [r7, #10]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e96:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe fb60 	bl	800155c <HAL_GetTick>
 8002e9c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ecc:	e025      	b.n	8002f1a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ece:	f7fe fb45 	bl	800155c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <HAL_I2C_IsDeviceReady+0x138>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d103      	bne.n	8002eec <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	22a0      	movs	r2, #160	; 0xa0
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2ba0      	cmp	r3, #160	; 0xa0
 8002f24:	d005      	beq.n	8002f32 <HAL_I2C_IsDeviceReady+0x186>
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_I2C_IsDeviceReady+0x186>
 8002f2c:	7dbb      	ldrb	r3, [r7, #22]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0cd      	beq.n	8002ece <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d129      	bne.n	8002f9c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2319      	movs	r3, #25
 8002f74:	2201      	movs	r2, #1
 8002f76:	4922      	ldr	r1, [pc, #136]	; (8003000 <HAL_I2C_IsDeviceReady+0x254>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8c7 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e036      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e02c      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002faa:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2319      	movs	r3, #25
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4910      	ldr	r1, [pc, #64]	; (8003000 <HAL_I2C_IsDeviceReady+0x254>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8a3 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e012      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f4ff af33 	bcc.w	8002e46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000

08003008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	460b      	mov	r3, r1
 8003016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d006      	beq.n	8003032 <I2C_MasterRequestWrite+0x2a>
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d003      	beq.n	8003032 <I2C_MasterRequestWrite+0x2a>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003030:	d108      	bne.n	8003044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e00b      	b.n	800305c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	2b12      	cmp	r3, #18
 800304a:	d107      	bne.n	800305c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f84f 	bl	800310c <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00c      	beq.n	800308e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e035      	b.n	80030fa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003096:	d108      	bne.n	80030aa <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003098:	897b      	ldrh	r3, [r7, #10]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a6:	611a      	str	r2, [r3, #16]
 80030a8:	e01b      	b.n	80030e2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	11db      	asrs	r3, r3, #7
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0306 	and.w	r3, r3, #6
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f063 030f 	orn	r3, r3, #15
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	490f      	ldr	r1, [pc, #60]	; (8003104 <I2C_MasterRequestWrite+0xfc>)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f876 	bl	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e010      	b.n	80030fa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030d8:	897b      	ldrh	r3, [r7, #10]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4908      	ldr	r1, [pc, #32]	; (8003108 <I2C_MasterRequestWrite+0x100>)
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f866 	bl	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	00010008 	.word	0x00010008
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800311c:	e025      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d021      	beq.n	800316a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe fa19 	bl	800155c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e023      	b.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d10d      	bne.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	e00c      	b.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d0b6      	beq.n	800311e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c8:	e051      	b.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d8:	d123      	bne.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e046      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe f997 	bl	800155c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e020      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e00b      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d18d      	bne.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c4:	e02d      	b.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f878 	bl	80033bc <I2C_IsAcknowledgeFailed>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d021      	beq.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe f93d 	bl	800155c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d1ca      	bne.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003346:	e02d      	b.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f837 	bl	80033bc <I2C_IsAcknowledgeFailed>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d021      	beq.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7fe f8fc 	bl	800155c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d116      	bne.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e007      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d1ca      	bne.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d11b      	bne.n	800340c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e154      	b.n	80036d8 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a98      	ldr	r2, [pc, #608]	; (80036a8 <HAL_I2S_Init+0x28c>)
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd fc97 	bl	8000d7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003464:	f023 030f 	bic.w	r3, r3, #15
 8003468:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d06f      	beq.n	800355a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003482:	2310      	movs	r3, #16
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e001      	b.n	800348c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b20      	cmp	r3, #32
 8003492:	d802      	bhi.n	800349a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a83      	ldr	r2, [pc, #524]	; (80036ac <HAL_I2S_Init+0x290>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_I2S_Init+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a81      	ldr	r2, [pc, #516]	; (80036b0 <HAL_I2S_Init+0x294>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d104      	bne.n	80034b8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f001 f9e6 	bl	8004880 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	e003      	b.n	80034c0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80034b8:	2002      	movs	r0, #2
 80034ba:	f001 f9e1 	bl	8004880 <HAL_RCCEx_GetPeriphCLKFreq>
 80034be:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c8:	d125      	bne.n	8003516 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	461a      	mov	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	3305      	adds	r3, #5
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	e01f      	b.n	8003534 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	3305      	adds	r3, #5
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e00e      	b.n	8003534 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fbb2 f2f3 	udiv	r2, r2, r3
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	3305      	adds	r3, #5
 8003532:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4a5f      	ldr	r2, [pc, #380]	; (80036b4 <HAL_I2S_Init+0x298>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e003      	b.n	8003562 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800355a:	2302      	movs	r3, #2
 800355c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d902      	bls.n	800356e <HAL_I2S_Init+0x152>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d907      	bls.n	800357e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0ac      	b.n	80036d8 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	430a      	orrs	r2, r1
 8003590:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800359c:	f023 030f 	bic.w	r3, r3, #15
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6851      	ldr	r1, [r2, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6992      	ldr	r2, [r2, #24]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b30      	cmp	r3, #48	; 0x30
 80035c8:	d003      	beq.n	80035d2 <HAL_I2S_Init+0x1b6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2bb0      	cmp	r3, #176	; 0xb0
 80035d0:	d107      	bne.n	80035e2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035e0:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d16e      	bne.n	80036c8 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <HAL_I2S_Init+0x29c>)
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <HAL_I2S_Init+0x290>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_I2S_Init+0x1e2>
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_I2S_Init+0x2a0>)
 80035fc:	e001      	b.n	8003602 <HAL_I2S_Init+0x1e6>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	4928      	ldr	r1, [pc, #160]	; (80036ac <HAL_I2S_Init+0x290>)
 800360a:	428a      	cmp	r2, r1
 800360c:	d101      	bne.n	8003612 <HAL_I2S_Init+0x1f6>
 800360e:	4a2b      	ldr	r2, [pc, #172]	; (80036bc <HAL_I2S_Init+0x2a0>)
 8003610:	e001      	b.n	8003616 <HAL_I2S_Init+0x1fa>
 8003612:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003616:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800361a:	f023 030f 	bic.w	r3, r3, #15
 800361e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <HAL_I2S_Init+0x290>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_I2S_Init+0x212>
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_I2S_Init+0x2a0>)
 800362c:	e001      	b.n	8003632 <HAL_I2S_Init+0x216>
 800362e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003632:	2202      	movs	r2, #2
 8003634:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_I2S_Init+0x290>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2S_Init+0x228>
 8003640:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_I2S_Init+0x2a0>)
 8003642:	e001      	b.n	8003648 <HAL_I2S_Init+0x22c>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d003      	beq.n	800365e <HAL_I2S_Init+0x242>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800365e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e001      	b.n	800366a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	b299      	uxth	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003680:	4303      	orrs	r3, r0
 8003682:	b29b      	uxth	r3, r3
 8003684:	430b      	orrs	r3, r1
 8003686:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003688:	4313      	orrs	r3, r2
 800368a:	b29a      	uxth	r2, r3
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	4313      	orrs	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003696:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a03      	ldr	r2, [pc, #12]	; (80036ac <HAL_I2S_Init+0x290>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10e      	bne.n	80036c0 <HAL_I2S_Init+0x2a4>
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_I2S_Init+0x2a0>)
 80036a4:	e00e      	b.n	80036c4 <HAL_I2S_Init+0x2a8>
 80036a6:	bf00      	nop
 80036a8:	080039e5 	.word	0x080039e5
 80036ac:	40003800 	.word	0x40003800
 80036b0:	40003c00 	.word	0x40003c00
 80036b4:	cccccccd 	.word	0xcccccccd
 80036b8:	08003af9 	.word	0x08003af9
 80036bc:	40003400 	.word	0x40003400
 80036c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c4:	897a      	ldrh	r2, [r7, #10]
 80036c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_I2S_Transmit_DMA+0x1a>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e08e      	b.n	800381c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_I2S_Transmit_DMA+0x2e>
 800370a:	2302      	movs	r3, #2
 800370c:	e086      	b.n	800381c <HAL_I2S_Transmit_DMA+0x13c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	e076      	b.n	800381c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d002      	beq.n	800375a <HAL_I2S_Transmit_DMA+0x7a>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10a      	bne.n	8003770 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376e:	e005      	b.n	800377c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_I2S_Transmit_DMA+0x144>)
 8003782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_I2S_Transmit_DMA+0x148>)
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	4a26      	ldr	r2, [pc, #152]	; (800382c <HAL_I2S_Transmit_DMA+0x14c>)
 8003792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800379c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80037a4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80037ac:	f7fe fc5c 	bl	8002068 <HAL_DMA_Start_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00f      	beq.n	80037d6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0202 	orr.w	r2, r2, #2
 8003810:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	080038c3 	.word	0x080038c3
 8003828:	08003881 	.word	0x08003881
 800382c:	080038df 	.word	0x080038df

08003830 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0202 	bic.w	r2, r2, #2
 80038a4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7ff ffc5 	bl	8003844 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff ffad 	bl	8003830 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0203 	bic.w	r2, r2, #3
 80038fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0208 	orr.w	r2, r3, #8
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ffa5 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff63 	bl	8003844 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	b292      	uxth	r2, r2
 800399a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ff3e 	bl	8003858 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d13a      	bne.n	8003a76 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d109      	bne.n	8003a1e <I2S_IRQHandler+0x3a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d102      	bne.n	8003a1e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ffb4 	bl	8003986 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d126      	bne.n	8003a76 <I2S_IRQHandler+0x92>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d11f      	bne.n	8003a76 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a44:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f043 0202 	orr.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fefb 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d136      	bne.n	8003af0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d109      	bne.n	8003aa0 <I2S_IRQHandler+0xbc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d102      	bne.n	8003aa0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff45 	bl	800392a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d122      	bne.n	8003af0 <I2S_IRQHandler+0x10c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d11b      	bne.n	8003af0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff febe 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4aa2      	ldr	r2, [pc, #648]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b12:	4ba2      	ldr	r3, [pc, #648]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b14:	e001      	b.n	8003b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a9b      	ldr	r2, [pc, #620]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b30:	4b9a      	ldr	r3, [pc, #616]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b32:	e001      	b.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b44:	d004      	beq.n	8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8099 	bne.w	8003c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f925 	bl	8003db4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9c8 	bl	8003f14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d13a      	bne.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d035      	beq.n	8003c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7e      	ldr	r2, [pc, #504]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ba2:	4b7e      	ldr	r3, [pc, #504]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ba4:	e001      	b.n	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4979      	ldr	r1, [pc, #484]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb2:	428b      	cmp	r3, r1
 8003bb4:	d101      	bne.n	8003bba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bb6:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bb8:	e001      	b.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fe34 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	f040 80be 	bne.w	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80b8 	beq.w	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a59      	ldr	r2, [pc, #356]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d101      	bne.n	8003c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c36:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c38:	e001      	b.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4954      	ldr	r1, [pc, #336]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c46:	428b      	cmp	r3, r1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c4a:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c4c:	e001      	b.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fdf6 	bl	800386c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c80:	e084      	b.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d107      	bne.n	8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8be 	bl	8003e18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8fd 	bl	8003eb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d12f      	bne.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02a      	beq.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2e      	ldr	r2, [pc, #184]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ce6:	e001      	b.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4929      	ldr	r1, [pc, #164]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cfa:	e001      	b.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fda6 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d131      	bne.n	8003d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d02c      	beq.n	8003d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d40:	e001      	b.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4912      	ldr	r1, [pc, #72]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d4e:	428b      	cmp	r3, r1
 8003d50:	d101      	bne.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d54:	e001      	b.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d6e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	f043 0204 	orr.w	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fd71 	bl	800386c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d8a:	e000      	b.n	8003d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d8c:	bf00      	nop
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40003800 	.word	0x40003800
 8003d9c:	40003400 	.word	0x40003400

08003da0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c99      	adds	r1, r3, #2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6251      	str	r1, [r2, #36]	; 0x24
 8003dc6:	881a      	ldrh	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d113      	bne.n	8003e0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ffc9 	bl	8003da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c99      	adds	r1, r3, #2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6251      	str	r1, [r2, #36]	; 0x24
 8003e2a:	8819      	ldrh	r1, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <I2SEx_TxISR_I2SExt+0x22>
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <I2SEx_TxISR_I2SExt+0x94>)
 8003e38:	e001      	b.n	8003e3e <I2SEx_TxISR_I2SExt+0x26>
 8003e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3e:	460a      	mov	r2, r1
 8003e40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d121      	bne.n	8003e9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d101      	bne.n	8003e68 <I2SEx_TxISR_I2SExt+0x50>
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <I2SEx_TxISR_I2SExt+0x94>)
 8003e66:	e001      	b.n	8003e6c <I2SEx_TxISR_I2SExt+0x54>
 8003e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	490d      	ldr	r1, [pc, #52]	; (8003ea8 <I2SEx_TxISR_I2SExt+0x90>)
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d101      	bne.n	8003e7c <I2SEx_TxISR_I2SExt+0x64>
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <I2SEx_TxISR_I2SExt+0x94>)
 8003e7a:	e001      	b.n	8003e80 <I2SEx_TxISR_I2SExt+0x68>
 8003e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff81 	bl	8003da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40003800 	.word	0x40003800
 8003eac:	40003400 	.word	0x40003400

08003eb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68d8      	ldr	r0, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	1c99      	adds	r1, r3, #2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ec8:	b282      	uxth	r2, r0
 8003eca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff4a 	bl	8003da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <I2SEx_RxISR_I2SExt+0x16>
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003f28:	e001      	b.n	8003f2e <I2SEx_RxISR_I2SExt+0x1a>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2e:	68d8      	ldr	r0, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	1c99      	adds	r1, r3, #2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f3a:	b282      	uxth	r2, r0
 8003f3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d121      	bne.n	8003f9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <I2SEx_RxISR_I2SExt+0x50>
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003f62:	e001      	b.n	8003f68 <I2SEx_RxISR_I2SExt+0x54>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	490d      	ldr	r1, [pc, #52]	; (8003fa4 <I2SEx_RxISR_I2SExt+0x90>)
 8003f70:	428b      	cmp	r3, r1
 8003f72:	d101      	bne.n	8003f78 <I2SEx_RxISR_I2SExt+0x64>
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x94>)
 8003f76:	e001      	b.n	8003f7c <I2SEx_RxISR_I2SExt+0x68>
 8003f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ff03 	bl	8003da0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40003800 	.word	0x40003800
 8003fa8:	40003400 	.word	0x40003400

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd fa5e 	bl	800155c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fd fa5a 	bl	800155c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	fa21 f303 	lsr.w	r3, r1, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd f9be 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	08006e08 	.word	0x08006e08
 8004170:	20000018 	.word	0x20000018
 8004174:	2000001c 	.word	0x2000001c

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b04      	cmp	r3, #4
 8004198:	d007      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x32>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d008      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x38>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 80b4 	bne.w	800430c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b5e      	ldr	r3, [pc, #376]	; (8004320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041a6:	60bb      	str	r3, [r7, #8]
       break;
 80041a8:	e0b3      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041ac:	60bb      	str	r3, [r7, #8]
      break;
 80041ae:	e0b0      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b5a      	ldr	r3, [pc, #360]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b58      	ldr	r3, [pc, #352]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04a      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b55      	ldr	r3, [pc, #340]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	f04f 0400 	mov.w	r4, #0
 80041d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	ea03 0501 	and.w	r5, r3, r1
 80041dc:	ea04 0602 	and.w	r6, r4, r2
 80041e0:	4629      	mov	r1, r5
 80041e2:	4632      	mov	r2, r6
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	0154      	lsls	r4, r2, #5
 80041ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041f2:	014b      	lsls	r3, r1, #5
 80041f4:	4619      	mov	r1, r3
 80041f6:	4622      	mov	r2, r4
 80041f8:	1b49      	subs	r1, r1, r5
 80041fa:	eb62 0206 	sbc.w	r2, r2, r6
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	f04f 0400 	mov.w	r4, #0
 8004206:	0194      	lsls	r4, r2, #6
 8004208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800420c:	018b      	lsls	r3, r1, #6
 800420e:	1a5b      	subs	r3, r3, r1
 8004210:	eb64 0402 	sbc.w	r4, r4, r2
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	00e2      	lsls	r2, r4, #3
 800421e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004222:	00d9      	lsls	r1, r3, #3
 8004224:	460b      	mov	r3, r1
 8004226:	4614      	mov	r4, r2
 8004228:	195b      	adds	r3, r3, r5
 800422a:	eb44 0406 	adc.w	r4, r4, r6
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	0262      	lsls	r2, r4, #9
 8004238:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800423c:	0259      	lsls	r1, r3, #9
 800423e:	460b      	mov	r3, r1
 8004240:	4614      	mov	r4, r2
 8004242:	4618      	mov	r0, r3
 8004244:	4621      	mov	r1, r4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	461a      	mov	r2, r3
 800424e:	4623      	mov	r3, r4
 8004250:	f7fb ffe2 	bl	8000218 <__aeabi_uldivmod>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e049      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4b2f      	ldr	r3, [pc, #188]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	f04f 0400 	mov.w	r4, #0
 8004266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	ea03 0501 	and.w	r5, r3, r1
 8004272:	ea04 0602 	and.w	r6, r4, r2
 8004276:	4629      	mov	r1, r5
 8004278:	4632      	mov	r2, r6
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f04f 0400 	mov.w	r4, #0
 8004282:	0154      	lsls	r4, r2, #5
 8004284:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004288:	014b      	lsls	r3, r1, #5
 800428a:	4619      	mov	r1, r3
 800428c:	4622      	mov	r2, r4
 800428e:	1b49      	subs	r1, r1, r5
 8004290:	eb62 0206 	sbc.w	r2, r2, r6
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	0194      	lsls	r4, r2, #6
 800429e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042a2:	018b      	lsls	r3, r1, #6
 80042a4:	1a5b      	subs	r3, r3, r1
 80042a6:	eb64 0402 	sbc.w	r4, r4, r2
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	00e2      	lsls	r2, r4, #3
 80042b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042b8:	00d9      	lsls	r1, r3, #3
 80042ba:	460b      	mov	r3, r1
 80042bc:	4614      	mov	r4, r2
 80042be:	195b      	adds	r3, r3, r5
 80042c0:	eb44 0406 	adc.w	r4, r4, r6
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	02a2      	lsls	r2, r4, #10
 80042ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042d2:	0299      	lsls	r1, r3, #10
 80042d4:	460b      	mov	r3, r1
 80042d6:	4614      	mov	r4, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	4621      	mov	r1, r4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f04f 0400 	mov.w	r4, #0
 80042e2:	461a      	mov	r2, r3
 80042e4:	4623      	mov	r3, r4
 80042e6:	f7fb ff97 	bl	8000218 <__aeabi_uldivmod>
 80042ea:	4603      	mov	r3, r0
 80042ec:	460c      	mov	r4, r1
 80042ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	3301      	adds	r3, #1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	60bb      	str	r3, [r7, #8]
      break;
 800430a:	e002      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800430e:	60bb      	str	r3, [r7, #8]
      break;
 8004310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200

08004328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000018 	.word	0x20000018

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4601      	mov	r1, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4a03      	ldr	r2, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	08006e18 	.word	0x08006e18

08004368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800438c:	4b7a      	ldr	r3, [pc, #488]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4977      	ldr	r1, [pc, #476]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	496b      	ldr	r1, [pc, #428]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80043e8:	4b63      	ldr	r3, [pc, #396]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	4960      	ldr	r1, [pc, #384]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004412:	d10c      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004414:	4b58      	ldr	r3, [pc, #352]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	3b01      	subs	r3, #1
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	4954      	ldr	r1, [pc, #336]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d022      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800443a:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	494b      	ldr	r1, [pc, #300]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004458:	2301      	movs	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004466:	4b44      	ldr	r3, [pc, #272]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	3b01      	subs	r3, #1
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	493f      	ldr	r1, [pc, #252]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 808a 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b39      	ldr	r3, [pc, #228]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a38      	ldr	r2, [pc, #224]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044aa:	4b34      	ldr	r3, [pc, #208]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a33      	ldr	r2, [pc, #204]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044b6:	f7fd f851 	bl	800155c <HAL_GetTick>
 80044ba:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fd f84d 	bl	800155c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1d1      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044dc:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d028      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d114      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004522:	f7fd f81b 	bl	800155c <HAL_GetTick>
 8004526:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd f817 	bl	800155c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e199      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004558:	d114      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800456a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456e:	4902      	ldr	r1, [pc, #8]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
 8004574:	e00c      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800
 800457c:	40007000 	.word	0x40007000
 8004580:	42470e40 	.word	0x42470e40
 8004584:	4b89      	ldr	r3, [pc, #548]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a88      	ldr	r2, [pc, #544]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800458a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800458e:	6093      	str	r3, [r2, #8]
 8004590:	4b86      	ldr	r3, [pc, #536]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	4983      	ldr	r1, [pc, #524]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80045b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045c4:	4b79      	ldr	r3, [pc, #484]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	4976      	ldr	r1, [pc, #472]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045e6:	4b71      	ldr	r3, [pc, #452]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	496d      	ldr	r1, [pc, #436]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004604:	d101      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004606:	2301      	movs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	4961      	ldr	r1, [pc, #388]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d004      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	f040 80c6 	bne.w	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800463c:	4b5d      	ldr	r3, [pc, #372]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004642:	f7fc ff8b 	bl	800155c <HAL_GetTick>
 8004646:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464a:	f7fc ff87 	bl	800155c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e10b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800465c:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004668:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d023      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d019      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ac:	d00e      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d019      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x386>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ca:	d110      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	4931      	ldr	r1, [pc, #196]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d026      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d122      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	0e1b      	lsrs	r3, r3, #24
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	061b      	lsls	r3, r3, #24
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	071b      	lsls	r3, r3, #28
 800473c:	491b      	ldr	r1, [pc, #108]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800474a:	f023 021f 	bic.w	r2, r3, #31
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	3b01      	subs	r3, #1
 8004754:	4915      	ldr	r1, [pc, #84]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	019b      	lsls	r3, r3, #6
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	490a      	ldr	r1, [pc, #40]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004790:	f7fc fee4 	bl	800155c <HAL_GetTick>
 8004794:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004798:	f7fc fee0 	bl	800155c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d90a      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e064      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800
 80047b0:	424711e0 	.word	0x424711e0
 80047b4:	42470068 	.word	0x42470068
 80047b8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047bc:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0e7      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d4:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	4926      	ldr	r1, [pc, #152]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	491d      	ldr	r1, [pc, #116]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004818:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800481a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	4915      	ldr	r1, [pc, #84]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800485c:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004862:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800489e:	2b02      	cmp	r3, #2
 80048a0:	f000 8098 	beq.w	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80048a4:	e12d      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80048a6:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80048b0:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b8:	d00c      	beq.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048be:	d802      	bhi.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80048c4:	e082      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80048c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ca:	d047      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80048cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80048d0:	d06f      	beq.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 80048d2:	e07b      	b.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048d4:	4b8f      	ldr	r3, [pc, #572]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048d6:	617b      	str	r3, [r7, #20]
          break;
 80048d8:	e07b      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e8:	d109      	bne.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80048ea:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80048ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	4a87      	ldr	r2, [pc, #540]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e019      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048fe:	4b84      	ldr	r3, [pc, #528]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d109      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800490c:	4b80      	ldr	r3, [pc, #512]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004916:	4a80      	ldr	r2, [pc, #512]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e008      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004920:	4b7b      	ldr	r3, [pc, #492]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492a:	4a7c      	ldr	r2, [pc, #496]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004946:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	0f1b      	lsrs	r3, r3, #28
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
          break;
 800495a:	e03a      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800495c:	4b6c      	ldr	r3, [pc, #432]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004968:	d108      	bne.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800496a:	4b69      	ldr	r3, [pc, #420]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004972:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e007      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004984:	4a65      	ldr	r2, [pc, #404]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800498c:	4b60      	ldr	r3, [pc, #384]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	0f1b      	lsrs	r3, r3, #28
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	617b      	str	r3, [r7, #20]
          break;
 80049b0:	e00f      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049b2:	4b57      	ldr	r3, [pc, #348]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049be:	d102      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80049c0:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80049c2:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80049c4:	e005      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80049c6:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80049c8:	617b      	str	r3, [r7, #20]
          break;
 80049ca:	e002      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
          break;
 80049d0:	bf00      	nop
        }
      }
      break;
 80049d2:	e096      	b.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80049d4:	4b4e      	ldr	r3, [pc, #312]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80049d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049da:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80049de:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e6:	d00c      	beq.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ec:	d802      	bhi.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80049f2:	e082      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80049f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f8:	d047      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80049fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80049fe:	d06f      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8004a00:	e07b      	b.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a04:	617b      	str	r3, [r7, #20]
          break;
 8004a06:	e07b      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8004a08:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a22:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e019      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a2c:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a38:	d109      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004a3a:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a44:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	4a30      	ldr	r2, [pc, #192]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7a:	0f1b      	lsrs	r3, r3, #28
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a86:	617b      	str	r3, [r7, #20]
          break;
 8004a88:	e03a      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a96:	d108      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e007      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	0f1b      	lsrs	r3, r3, #28
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
          break;
 8004ade:	e00f      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aec:	d102      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004af0:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004af2:	e005      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004af6:	617b      	str	r3, [r7, #20]
          break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
          break;
 8004afe:	bf00      	nop
        }
      }
      break;
 8004b00:	bf00      	nop
    }
  }
  return frequency;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00bb8000 	.word	0x00bb8000
 8004b18:	007a1200 	.word	0x007a1200
 8004b1c:	00f42400 	.word	0x00f42400

08004b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d075      	beq.n	8004c24 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b38:	4ba2      	ldr	r3, [pc, #648]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d00c      	beq.n	8004b5e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b44:	4b9f      	ldr	r3, [pc, #636]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d112      	bne.n	8004b76 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b50:	4b9c      	ldr	r3, [pc, #624]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b5c:	d10b      	bne.n	8004b76 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5e:	4b99      	ldr	r3, [pc, #612]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d05b      	beq.n	8004c22 <HAL_RCC_OscConfig+0x102>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d157      	bne.n	8004c22 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e20b      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x6e>
 8004b80:	4b90      	ldr	r3, [pc, #576]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a8f      	ldr	r2, [pc, #572]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e01d      	b.n	8004bca <HAL_RCC_OscConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x92>
 8004b98:	4b8a      	ldr	r3, [pc, #552]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a89      	ldr	r2, [pc, #548]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a86      	ldr	r2, [pc, #536]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e00b      	b.n	8004bca <HAL_RCC_OscConfig+0xaa>
 8004bb2:	4b84      	ldr	r3, [pc, #528]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a83      	ldr	r2, [pc, #524]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b81      	ldr	r3, [pc, #516]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a80      	ldr	r2, [pc, #512]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d013      	beq.n	8004bfa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fc fcc3 	bl	800155c <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bda:	f7fc fcbf 	bl	800155c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e1d0      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bec:	4b75      	ldr	r3, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0xba>
 8004bf8:	e014      	b.n	8004c24 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fc fcaf 	bl	800155c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c02:	f7fc fcab 	bl	800155c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	; 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1bc      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c14:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0xe2>
 8004c20:	e000      	b.n	8004c24 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d063      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c30:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d11c      	bne.n	8004c82 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c48:	4b5e      	ldr	r3, [pc, #376]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c54:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_OscConfig+0x14c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e190      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4952      	ldr	r1, [pc, #328]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c80:	e03a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <HAL_RCC_OscConfig+0x2a8>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc fc64 	bl	800155c <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c98:	f7fc fc60 	bl	800155c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e171      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	4b46      	ldr	r3, [pc, #280]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b43      	ldr	r3, [pc, #268]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	493f      	ldr	r1, [pc, #252]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	e015      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ccc:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <HAL_RCC_OscConfig+0x2a8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fc fc43 	bl	800155c <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cda:	f7fc fc3f 	bl	800155c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e150      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cec:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d030      	beq.n	8004d66 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d016      	beq.n	8004d3a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fc fc23 	bl	800155c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fc fc1f 	bl	800155c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e130      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1fa>
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fc fc0c 	bl	800155c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fc fc08 	bl	800155c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e119      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 809f 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d78:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x2a4>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_OscConfig+0x2b0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d120      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_RCC_OscConfig+0x2b0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <HAL_RCC_OscConfig+0x2b0>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbc:	f7fc fbce 	bl	800155c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc2:	e010      	b.n	8004de6 <HAL_RCC_OscConfig+0x2c6>
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	42470000 	.word	0x42470000
 8004dcc:	42470e80 	.word	0x42470e80
 8004dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fc fbc2 	bl	800155c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0d3      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <HAL_RCC_OscConfig+0x478>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d106      	bne.n	8004e08 <HAL_RCC_OscConfig+0x2e8>
 8004dfa:	4b68      	ldr	r3, [pc, #416]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a67      	ldr	r2, [pc, #412]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	e01c      	b.n	8004e42 <HAL_RCC_OscConfig+0x322>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d10c      	bne.n	8004e2a <HAL_RCC_OscConfig+0x30a>
 8004e10:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a61      	ldr	r2, [pc, #388]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e16:	f043 0304 	orr.w	r3, r3, #4
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	4b5f      	ldr	r3, [pc, #380]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4a5e      	ldr	r2, [pc, #376]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6713      	str	r3, [r2, #112]	; 0x70
 8004e28:	e00b      	b.n	8004e42 <HAL_RCC_OscConfig+0x322>
 8004e2a:	4b5c      	ldr	r3, [pc, #368]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	4a5b      	ldr	r2, [pc, #364]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6713      	str	r3, [r2, #112]	; 0x70
 8004e36:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	4a58      	ldr	r2, [pc, #352]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d015      	beq.n	8004e76 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fc fb87 	bl	800155c <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fc fb83 	bl	800155c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e092      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ee      	beq.n	8004e52 <HAL_RCC_OscConfig+0x332>
 8004e74:	e014      	b.n	8004ea0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fb71 	bl	800155c <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fc fb6d 	bl	800155c <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e07c      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b3d      	ldr	r3, [pc, #244]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a3c      	ldr	r2, [pc, #240]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d068      	beq.n	8004f8c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eba:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d060      	beq.n	8004f88 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d145      	bne.n	8004f5a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCC_OscConfig+0x480>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fc fb42 	bl	800155c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fc fb3e 	bl	800155c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e04f      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	071b      	lsls	r3, r3, #28
 8004f26:	491d      	ldr	r1, [pc, #116]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2c:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <HAL_RCC_OscConfig+0x480>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fc fb13 	bl	800155c <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fc fb0f 	bl	800155c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e020      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x41a>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x480>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fc fafc 	bl	800155c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fc faf8 	bl	800155c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e009      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_RCC_OscConfig+0x47c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x448>
 8004f86:	e001      	b.n	8004f8c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470060 	.word	0x42470060

08004fa4 <greq_reset>:
 8004fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	2500      	movs	r5, #0
 8004fac:	2201      	movs	r2, #1
 8004fae:	2608      	movs	r6, #8
 8004fb0:	6021      	str	r1, [r4, #0]
 8004fb2:	f8a4 2204 	strh.w	r2, [r4, #516]	; 0x204
 8004fb6:	f8a4 521a 	strh.w	r5, [r4, #538]	; 0x21a
 8004fba:	f8c4 5206 	str.w	r5, [r4, #518]	; 0x206
 8004fbe:	f8a4 621c 	strh.w	r6, [r4, #540]	; 0x21c
 8004fc2:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <greq_reset+0x154>)
 8004fc4:	f8c4 520a 	str.w	r5, [r4, #522]	; 0x20a
 8004fc8:	f8c4 520e 	str.w	r5, [r4, #526]	; 0x20e
 8004fcc:	f8c4 5212 	str.w	r5, [r4, #530]	; 0x212
 8004fd0:	6062      	str	r2, [r4, #4]
 8004fd2:	fb33 f305 	smulwb	r3, r3, r5
 8004fd6:	4849      	ldr	r0, [pc, #292]	; (80050fc <greq_reset+0x158>)
 8004fd8:	4949      	ldr	r1, [pc, #292]	; (8005100 <greq_reset+0x15c>)
 8004fda:	f303 031e 	ssat	r3, #31, r3
 8004fde:	4093      	lsls	r3, r2
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	6162      	str	r2, [r4, #20]
 8004fe4:	60e0      	str	r0, [r4, #12]
 8004fe6:	6121      	str	r1, [r4, #16]
 8004fe8:	4b46      	ldr	r3, [pc, #280]	; (8005104 <greq_reset+0x160>)
 8004fea:	fb33 f305 	smulwb	r3, r3, r5
 8004fee:	4846      	ldr	r0, [pc, #280]	; (8005108 <greq_reset+0x164>)
 8004ff0:	4946      	ldr	r1, [pc, #280]	; (800510c <greq_reset+0x168>)
 8004ff2:	f303 031e 	ssat	r3, #31, r3
 8004ff6:	4093      	lsls	r3, r2
 8004ff8:	61a3      	str	r3, [r4, #24]
 8004ffa:	6262      	str	r2, [r4, #36]	; 0x24
 8004ffc:	61e0      	str	r0, [r4, #28]
 8004ffe:	6221      	str	r1, [r4, #32]
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <greq_reset+0x16c>)
 8005002:	fb33 f305 	smulwb	r3, r3, r5
 8005006:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
 800500a:	f5a0 30ae 	sub.w	r0, r0, #89088	; 0x15c00
 800500e:	383b      	subs	r0, #59	; 0x3b
 8005010:	4940      	ldr	r1, [pc, #256]	; (8005114 <greq_reset+0x170>)
 8005012:	f303 031e 	ssat	r3, #31, r3
 8005016:	4093      	lsls	r3, r2
 8005018:	62a3      	str	r3, [r4, #40]	; 0x28
 800501a:	6362      	str	r2, [r4, #52]	; 0x34
 800501c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800501e:	6321      	str	r1, [r4, #48]	; 0x30
 8005020:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <greq_reset+0x174>)
 8005022:	fb33 f305 	smulwb	r3, r3, r5
 8005026:	f1a0 7074 	sub.w	r0, r0, #63963136	; 0x3d00000
 800502a:	f5a0 3022 	sub.w	r0, r0, #165888	; 0x28800
 800502e:	3872      	subs	r0, #114	; 0x72
 8005030:	493a      	ldr	r1, [pc, #232]	; (800511c <greq_reset+0x178>)
 8005032:	f303 031e 	ssat	r3, #31, r3
 8005036:	4093      	lsls	r3, r2
 8005038:	63a3      	str	r3, [r4, #56]	; 0x38
 800503a:	6462      	str	r2, [r4, #68]	; 0x44
 800503c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800503e:	6421      	str	r1, [r4, #64]	; 0x40
 8005040:	4b37      	ldr	r3, [pc, #220]	; (8005120 <greq_reset+0x17c>)
 8005042:	fb33 f305 	smulwb	r3, r3, r5
 8005046:	f1a0 6002 	sub.w	r0, r0, #136314880	; 0x8200000
 800504a:	f5a0 2064 	sub.w	r0, r0, #933888	; 0xe4000
 800504e:	f6a0 5077 	subw	r0, r0, #3447	; 0xd77
 8005052:	4934      	ldr	r1, [pc, #208]	; (8005124 <greq_reset+0x180>)
 8005054:	f303 031e 	ssat	r3, #31, r3
 8005058:	4093      	lsls	r3, r2
 800505a:	64a3      	str	r3, [r4, #72]	; 0x48
 800505c:	6562      	str	r2, [r4, #84]	; 0x54
 800505e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005060:	6521      	str	r1, [r4, #80]	; 0x50
 8005062:	4b31      	ldr	r3, [pc, #196]	; (8005128 <greq_reset+0x184>)
 8005064:	fb33 f305 	smulwb	r3, r3, r5
 8005068:	4930      	ldr	r1, [pc, #192]	; (800512c <greq_reset+0x188>)
 800506a:	4a31      	ldr	r2, [pc, #196]	; (8005130 <greq_reset+0x18c>)
 800506c:	f303 031e 	ssat	r3, #31, r3
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	65a3      	str	r3, [r4, #88]	; 0x58
 8005074:	6665      	str	r5, [r4, #100]	; 0x64
 8005076:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005078:	6622      	str	r2, [r4, #96]	; 0x60
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <greq_reset+0x190>)
 800507c:	fb33 f305 	smulwb	r3, r3, r5
 8005080:	f101 5188 	add.w	r1, r1, #285212672	; 0x11000000
 8005084:	f501 2161 	add.w	r1, r1, #921600	; 0xe1000
 8005088:	f501 61be 	add.w	r1, r1, #1520	; 0x5f0
 800508c:	4a2a      	ldr	r2, [pc, #168]	; (8005138 <greq_reset+0x194>)
 800508e:	f303 031e 	ssat	r3, #31, r3
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	66a3      	str	r3, [r4, #104]	; 0x68
 8005096:	6765      	str	r5, [r4, #116]	; 0x74
 8005098:	66e1      	str	r1, [r4, #108]	; 0x6c
 800509a:	6722      	str	r2, [r4, #112]	; 0x70
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <greq_reset+0x198>)
 800509e:	fb33 f305 	smulwb	r3, r3, r5
 80050a2:	f04f 0880 	mov.w	r8, #128	; 0x80
 80050a6:	f104 0aa4 	add.w	sl, r4, #164	; 0xa4
 80050aa:	f104 0904 	add.w	r9, r4, #4
 80050ae:	4924      	ldr	r1, [pc, #144]	; (8005140 <greq_reset+0x19c>)
 80050b0:	4a24      	ldr	r2, [pc, #144]	; (8005144 <greq_reset+0x1a0>)
 80050b2:	f303 031e 	ssat	r3, #31, r3
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	67a3      	str	r3, [r4, #120]	; 0x78
 80050ba:	67e1      	str	r1, [r4, #124]	; 0x7c
 80050bc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 80050c0:	4629      	mov	r1, r5
 80050c2:	4642      	mov	r2, r8
 80050c4:	f504 77a2 	add.w	r7, r4, #324	; 0x144
 80050c8:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
 80050cc:	4650      	mov	r0, sl
 80050ce:	f8c4 91ec 	str.w	r9, [r4, #492]	; 0x1ec
 80050d2:	f001 fb2e 	bl	8006732 <memset>
 80050d6:	f8c4 a1e8 	str.w	sl, [r4, #488]	; 0x1e8
 80050da:	f8c4 91fc 	str.w	r9, [r4, #508]	; 0x1fc
 80050de:	f8c4 61f4 	str.w	r6, [r4, #500]	; 0x1f4
 80050e2:	4642      	mov	r2, r8
 80050e4:	4638      	mov	r0, r7
 80050e6:	4629      	mov	r1, r5
 80050e8:	f001 fb23 	bl	8006732 <memset>
 80050ec:	f8c4 71f8 	str.w	r7, [r4, #504]	; 0x1f8
 80050f0:	4628      	mov	r0, r5
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	bf00      	nop
 80050f8:	006a8861 	.word	0x006a8861
 80050fc:	7f28253e 	.word	0x7f28253e
 8005100:	c0d510c2 	.word	0xc0d510c2
 8005104:	00d6cdc7 	.word	0x00d6cdc7
 8005108:	7e46f9d4 	.word	0x7e46f9d4
 800510c:	c1ad9b8e 	.word	0xc1ad9b8e
 8005110:	01adff1f 	.word	0x01adff1f
 8005114:	c35bfe3e 	.word	0xc35bfe3e
 8005118:	03514ff0 	.word	0x03514ff0
 800511c:	c6a29fe0 	.word	0xc6a29fe0
 8005120:	065a9411 	.word	0x065a9411
 8005124:	ccb52822 	.word	0xccb52822
 8005128:	0b74bfa5 	.word	0x0b74bfa5
 800512c:	5e9216de 	.word	0x5e9216de
 8005130:	d6e97f4a 	.word	0xd6e97f4a
 8005134:	24594105 	.word	0x24594105
 8005138:	c8b28209 	.word	0xc8b28209
 800513c:	2978f49a 	.word	0x2978f49a
 8005140:	ceb82b3b 	.word	0xceb82b3b
 8005144:	d2f1e935 	.word	0xd2f1e935

08005148 <greq_setConfig>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	f9b1 b21c 	ldrsh.w	fp, [r1, #540]	; 0x21c
 8005150:	8802      	ldrh	r2, [r0, #0]
 8005152:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8005156:	f8a1 321a 	strh.w	r3, [r1, #538]	; 0x21a
 800515a:	f1bb 0f05 	cmp.w	fp, #5
 800515e:	b08d      	sub	sp, #52	; 0x34
 8005160:	f8a1 2204 	strh.w	r2, [r1, #516]	; 0x204
 8005164:	d012      	beq.n	800518c <greq_setConfig+0x44>
 8005166:	f1bb 0f08 	cmp.w	fp, #8
 800516a:	d01b      	beq.n	80051a4 <greq_setConfig+0x5c>
 800516c:	f1bb 0f0a 	cmp.w	fp, #10
 8005170:	f040 8395 	bne.w	800589e <greq_setConfig+0x756>
 8005174:	2b06      	cmp	r3, #6
 8005176:	f200 871c 	bhi.w	8005fb2 <greq_setConfig+0xe6a>
 800517a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800517e:	0386      	.short	0x0386
 8005180:	001f0384 	.word	0x001f0384
 8005184:	038c038e 	.word	0x038c038e
 8005188:	0388038a 	.word	0x0388038a
 800518c:	2b06      	cmp	r3, #6
 800518e:	f200 8710 	bhi.w	8005fb2 <greq_setConfig+0xe6a>
 8005192:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005196:	04b4      	.short	0x04b4
 8005198:	03db04b2 	.word	0x03db04b2
 800519c:	04ac04aa 	.word	0x04ac04aa
 80051a0:	04b004ae 	.word	0x04b004ae
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	f200 8704 	bhi.w	8005fb2 <greq_setConfig+0xe6a>
 80051aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80051ae:	06fc      	.short	0x06fc
 80051b0:	04d506ff 	.word	0x04d506ff
 80051b4:	06f306f0 	.word	0x06f306f0
 80051b8:	06f906f6 	.word	0x06f906f6
 80051bc:	4bd7      	ldr	r3, [pc, #860]	; (800551c <greq_setConfig+0x3d4>)
 80051be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051c2:	f102 000c 	add.w	r0, r2, #12
 80051c6:	2818      	cmp	r0, #24
 80051c8:	f200 8372 	bhi.w	80058b0 <greq_setConfig+0x768>
 80051cc:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8005574 <greq_setConfig+0x42c>
 80051d6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80051da:	320c      	adds	r2, #12
 80051dc:	b212      	sxth	r2, r2
 80051de:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80051e2:	f100 040c 	add.w	r4, r0, #12
 80051e6:	f8b2 2290 	ldrh.w	r2, [r2, #656]	; 0x290
 80051ea:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 80051ee:	3a1f      	subs	r2, #31
 80051f0:	2c18      	cmp	r4, #24
 80051f2:	b212      	sxth	r2, r2
 80051f4:	f200 835c 	bhi.w	80058b0 <greq_setConfig+0x768>
 80051f8:	f8a1 0208 	strh.w	r0, [r1, #520]	; 0x208
 80051fc:	8858      	ldrh	r0, [r3, #2]
 80051fe:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8005202:	300c      	adds	r0, #12
 8005204:	b200      	sxth	r0, r0
 8005206:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800520a:	f104 050c 	add.w	r5, r4, #12
 800520e:	f8b0 0290 	ldrh.w	r0, [r0, #656]	; 0x290
 8005212:	f5a0 50ff 	sub.w	r0, r0, #8160	; 0x1fe0
 8005216:	381f      	subs	r0, #31
 8005218:	2d18      	cmp	r5, #24
 800521a:	b200      	sxth	r0, r0
 800521c:	f200 8348 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005220:	f8a1 420a 	strh.w	r4, [r1, #522]	; 0x20a
 8005224:	889c      	ldrh	r4, [r3, #4]
 8005226:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800522a:	340c      	adds	r4, #12
 800522c:	b224      	sxth	r4, r4
 800522e:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
 8005232:	f105 060c 	add.w	r6, r5, #12
 8005236:	f8b4 4290 	ldrh.w	r4, [r4, #656]	; 0x290
 800523a:	f5a4 54ff 	sub.w	r4, r4, #8160	; 0x1fe0
 800523e:	3c1f      	subs	r4, #31
 8005240:	2e18      	cmp	r6, #24
 8005242:	b224      	sxth	r4, r4
 8005244:	f200 8334 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005248:	f8a1 520c 	strh.w	r5, [r1, #524]	; 0x20c
 800524c:	88dd      	ldrh	r5, [r3, #6]
 800524e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8005252:	350c      	adds	r5, #12
 8005254:	b22d      	sxth	r5, r5
 8005256:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 800525a:	f106 070c 	add.w	r7, r6, #12
 800525e:	f8b5 5290 	ldrh.w	r5, [r5, #656]	; 0x290
 8005262:	f5a5 55ff 	sub.w	r5, r5, #8160	; 0x1fe0
 8005266:	3d1f      	subs	r5, #31
 8005268:	b22d      	sxth	r5, r5
 800526a:	2f18      	cmp	r7, #24
 800526c:	9500      	str	r5, [sp, #0]
 800526e:	f200 831f 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005272:	f8a1 620e 	strh.w	r6, [r1, #526]	; 0x20e
 8005276:	891e      	ldrh	r6, [r3, #8]
 8005278:	f9b3 700a 	ldrsh.w	r7, [r3, #10]
 800527c:	360c      	adds	r6, #12
 800527e:	b236      	sxth	r6, r6
 8005280:	eb0c 0646 	add.w	r6, ip, r6, lsl #1
 8005284:	f107 0e0c 	add.w	lr, r7, #12
 8005288:	f8b6 6290 	ldrh.w	r6, [r6, #656]	; 0x290
 800528c:	f5a6 56ff 	sub.w	r6, r6, #8160	; 0x1fe0
 8005290:	3e1f      	subs	r6, #31
 8005292:	b235      	sxth	r5, r6
 8005294:	f1be 0f18 	cmp.w	lr, #24
 8005298:	9501      	str	r5, [sp, #4]
 800529a:	f200 8309 	bhi.w	80058b0 <greq_setConfig+0x768>
 800529e:	f8a1 7210 	strh.w	r7, [r1, #528]	; 0x210
 80052a2:	895f      	ldrh	r7, [r3, #10]
 80052a4:	f9b3 e00c 	ldrsh.w	lr, [r3, #12]
 80052a8:	370c      	adds	r7, #12
 80052aa:	b23f      	sxth	r7, r7
 80052ac:	eb0c 0747 	add.w	r7, ip, r7, lsl #1
 80052b0:	f10e 080c 	add.w	r8, lr, #12
 80052b4:	f8b7 7290 	ldrh.w	r7, [r7, #656]	; 0x290
 80052b8:	f5a7 57ff 	sub.w	r7, r7, #8160	; 0x1fe0
 80052bc:	3f1f      	subs	r7, #31
 80052be:	b23d      	sxth	r5, r7
 80052c0:	f1b8 0f18 	cmp.w	r8, #24
 80052c4:	9502      	str	r5, [sp, #8]
 80052c6:	f200 82f3 	bhi.w	80058b0 <greq_setConfig+0x768>
 80052ca:	f8a1 e212 	strh.w	lr, [r1, #530]	; 0x212
 80052ce:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80052d2:	f9b3 800e 	ldrsh.w	r8, [r3, #14]
 80052d6:	f10e 0e0c 	add.w	lr, lr, #12
 80052da:	fa0f fe8e 	sxth.w	lr, lr
 80052de:	eb0c 0e4e 	add.w	lr, ip, lr, lsl #1
 80052e2:	f108 090c 	add.w	r9, r8, #12
 80052e6:	f8be e290 	ldrh.w	lr, [lr, #656]	; 0x290
 80052ea:	f5ae 5eff 	sub.w	lr, lr, #8160	; 0x1fe0
 80052ee:	f1ae 0e1f 	sub.w	lr, lr, #31
 80052f2:	f1b9 0f18 	cmp.w	r9, #24
 80052f6:	fa0f fe8e 	sxth.w	lr, lr
 80052fa:	f200 82d9 	bhi.w	80058b0 <greq_setConfig+0x768>
 80052fe:	f8a1 8214 	strh.w	r8, [r1, #532]	; 0x214
 8005302:	f8b3 800e 	ldrh.w	r8, [r3, #14]
 8005306:	f9b3 9010 	ldrsh.w	r9, [r3, #16]
 800530a:	f108 080c 	add.w	r8, r8, #12
 800530e:	fa0f f888 	sxth.w	r8, r8
 8005312:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8005316:	f109 0a0c 	add.w	sl, r9, #12
 800531a:	f8b8 8290 	ldrh.w	r8, [r8, #656]	; 0x290
 800531e:	f5a8 58ff 	sub.w	r8, r8, #8160	; 0x1fe0
 8005322:	f1a8 081f 	sub.w	r8, r8, #31
 8005326:	fa0f f688 	sxth.w	r6, r8
 800532a:	f1ba 0f18 	cmp.w	sl, #24
 800532e:	9603      	str	r6, [sp, #12]
 8005330:	f200 82be 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005334:	f8a1 9216 	strh.w	r9, [r1, #534]	; 0x216
 8005338:	f8b3 8010 	ldrh.w	r8, [r3, #16]
 800533c:	f9b3 9012 	ldrsh.w	r9, [r3, #18]
 8005340:	f108 080c 	add.w	r8, r8, #12
 8005344:	fa0f f888 	sxth.w	r8, r8
 8005348:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 800534c:	f109 0a0c 	add.w	sl, r9, #12
 8005350:	f8b8 8290 	ldrh.w	r8, [r8, #656]	; 0x290
 8005354:	f5a8 58ff 	sub.w	r8, r8, #8160	; 0x1fe0
 8005358:	f1a8 081f 	sub.w	r8, r8, #31
 800535c:	fa0f f588 	sxth.w	r5, r8
 8005360:	f1ba 0f18 	cmp.w	sl, #24
 8005364:	9504      	str	r5, [sp, #16]
 8005366:	f200 82a3 	bhi.w	80058b0 <greq_setConfig+0x768>
 800536a:	f8a1 9218 	strh.w	r9, [r1, #536]	; 0x218
 800536e:	f8b3 8012 	ldrh.w	r8, [r3, #18]
 8005372:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <greq_setConfig+0x3d8>)
 8005374:	f108 080c 	add.w	r8, r8, #12
 8005378:	fa0f f888 	sxth.w	r8, r8
 800537c:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 8005380:	f8bc c290 	ldrh.w	ip, [ip, #656]	; 0x290
 8005384:	f5ac 5cff 	sub.w	ip, ip, #8160	; 0x1fe0
 8005388:	f1ac 0c1f 	sub.w	ip, ip, #31
 800538c:	fa0f f78c 	sxth.w	r7, ip
 8005390:	fb33 f302 	smulwb	r3, r3, r2
 8005394:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8005578 <greq_setConfig+0x430>
 8005398:	fb3c 3300 	smlawb	r3, ip, r0, r3
 800539c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800557c <greq_setConfig+0x434>
 80053a0:	fb38 3304 	smlawb	r3, r8, r4, r3
 80053a4:	4e5f      	ldr	r6, [pc, #380]	; (8005524 <greq_setConfig+0x3dc>)
 80053a6:	9d00      	ldr	r5, [sp, #0]
 80053a8:	fb36 3305 	smlawb	r3, r6, r5, r3
 80053ac:	4e5e      	ldr	r6, [pc, #376]	; (8005528 <greq_setConfig+0x3e0>)
 80053ae:	9d01      	ldr	r5, [sp, #4]
 80053b0:	fb36 3305 	smlawb	r3, r6, r5, r3
 80053b4:	4e5d      	ldr	r6, [pc, #372]	; (800552c <greq_setConfig+0x3e4>)
 80053b6:	9d02      	ldr	r5, [sp, #8]
 80053b8:	fb36 3305 	smlawb	r3, r6, r5, r3
 80053bc:	4e5c      	ldr	r6, [pc, #368]	; (8005530 <greq_setConfig+0x3e8>)
 80053be:	fb36 330e 	smlawb	r3, r6, lr, r3
 80053c2:	f46f 653c 	mvn.w	r5, #3008	; 0xbc0
 80053c6:	9e03      	ldr	r6, [sp, #12]
 80053c8:	fb35 3306 	smlawb	r3, r5, r6, r3
 80053cc:	f605 15a7 	addw	r5, r5, #2471	; 0x9a7
 80053d0:	9e04      	ldr	r6, [sp, #16]
 80053d2:	fb35 3306 	smlawb	r3, r5, r6, r3
 80053d6:	f06f 0534 	mvn.w	r5, #52	; 0x34
 80053da:	9705      	str	r7, [sp, #20]
 80053dc:	fb35 3307 	smlawb	r3, r5, r7, r3
 80053e0:	139b      	asrs	r3, r3, #14
 80053e2:	f303 030f 	ssat	r3, #16, r3
 80053e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80053ea:	fb3c fc02 	smulwb	ip, ip, r2
 80053ee:	4b51      	ldr	r3, [pc, #324]	; (8005534 <greq_setConfig+0x3ec>)
 80053f0:	fb33 c300 	smlawb	r3, r3, r0, ip
 80053f4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8005580 <greq_setConfig+0x438>
 80053f8:	fb39 3304 	smlawb	r3, r9, r4, r3
 80053fc:	f8df c184 	ldr.w	ip, [pc, #388]	; 8005584 <greq_setConfig+0x43c>
 8005400:	9f00      	ldr	r7, [sp, #0]
 8005402:	fb3c 3307 	smlawb	r3, ip, r7, r3
 8005406:	4d4c      	ldr	r5, [pc, #304]	; (8005538 <greq_setConfig+0x3f0>)
 8005408:	9f01      	ldr	r7, [sp, #4]
 800540a:	fb35 3307 	smlawb	r3, r5, r7, r3
 800540e:	4d4b      	ldr	r5, [pc, #300]	; (800553c <greq_setConfig+0x3f4>)
 8005410:	9e02      	ldr	r6, [sp, #8]
 8005412:	fb35 3306 	smlawb	r3, r5, r6, r3
 8005416:	4d4a      	ldr	r5, [pc, #296]	; (8005540 <greq_setConfig+0x3f8>)
 8005418:	fb35 330e 	smlawb	r3, r5, lr, r3
 800541c:	4d49      	ldr	r5, [pc, #292]	; (8005544 <greq_setConfig+0x3fc>)
 800541e:	9e03      	ldr	r6, [sp, #12]
 8005420:	fb35 3306 	smlawb	r3, r5, r6, r3
 8005424:	4d48      	ldr	r5, [pc, #288]	; (8005548 <greq_setConfig+0x400>)
 8005426:	9e04      	ldr	r6, [sp, #16]
 8005428:	fb35 3306 	smlawb	r3, r5, r6, r3
 800542c:	f06f 05fb 	mvn.w	r5, #251	; 0xfb
 8005430:	9f05      	ldr	r7, [sp, #20]
 8005432:	fb35 3307 	smlawb	r3, r5, r7, r3
 8005436:	139b      	asrs	r3, r3, #14
 8005438:	f303 030f 	ssat	r3, #16, r3
 800543c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005440:	fb38 f802 	smulwb	r8, r8, r2
 8005444:	fb39 8900 	smlawb	r9, r9, r0, r8
 8005448:	4b40      	ldr	r3, [pc, #256]	; (800554c <greq_setConfig+0x404>)
 800544a:	fb33 9304 	smlawb	r3, r3, r4, r9
 800544e:	f8df a138 	ldr.w	sl, [pc, #312]	; 8005588 <greq_setConfig+0x440>
 8005452:	9d00      	ldr	r5, [sp, #0]
 8005454:	fb3a 3305 	smlawb	r3, sl, r5, r3
 8005458:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800558c <greq_setConfig+0x444>
 800545c:	9d01      	ldr	r5, [sp, #4]
 800545e:	fb38 3305 	smlawb	r3, r8, r5, r3
 8005462:	4d3b      	ldr	r5, [pc, #236]	; (8005550 <greq_setConfig+0x408>)
 8005464:	9f02      	ldr	r7, [sp, #8]
 8005466:	fb35 3307 	smlawb	r3, r5, r7, r3
 800546a:	4d3a      	ldr	r5, [pc, #232]	; (8005554 <greq_setConfig+0x40c>)
 800546c:	fb35 330e 	smlawb	r3, r5, lr, r3
 8005470:	4d39      	ldr	r5, [pc, #228]	; (8005558 <greq_setConfig+0x410>)
 8005472:	9e03      	ldr	r6, [sp, #12]
 8005474:	fb35 3306 	smlawb	r3, r5, r6, r3
 8005478:	4d38      	ldr	r5, [pc, #224]	; (800555c <greq_setConfig+0x414>)
 800547a:	9e04      	ldr	r6, [sp, #16]
 800547c:	fb35 3306 	smlawb	r3, r5, r6, r3
 8005480:	4d37      	ldr	r5, [pc, #220]	; (8005560 <greq_setConfig+0x418>)
 8005482:	9f05      	ldr	r7, [sp, #20]
 8005484:	fb35 3307 	smlawb	r3, r5, r7, r3
 8005488:	139b      	asrs	r3, r3, #14
 800548a:	f303 030f 	ssat	r3, #16, r3
 800548e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005492:	4b24      	ldr	r3, [pc, #144]	; (8005524 <greq_setConfig+0x3dc>)
 8005494:	fb33 f302 	smulwb	r3, r3, r2
 8005498:	fb3c 3300 	smlawb	r3, ip, r0, r3
 800549c:	fb3a 3a04 	smlawb	sl, sl, r4, r3
 80054a0:	4b30      	ldr	r3, [pc, #192]	; (8005564 <greq_setConfig+0x41c>)
 80054a2:	9e00      	ldr	r6, [sp, #0]
 80054a4:	fb33 a306 	smlawb	r3, r3, r6, sl
 80054a8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005590 <greq_setConfig+0x448>
 80054ac:	9d01      	ldr	r5, [sp, #4]
 80054ae:	fb39 3305 	smlawb	r3, r9, r5, r3
 80054b2:	f60c 4cfc 	addw	ip, ip, #3324	; 0xcfc
 80054b6:	9e02      	ldr	r6, [sp, #8]
 80054b8:	fb3c 3306 	smlawb	r3, ip, r6, r3
 80054bc:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005594 <greq_setConfig+0x44c>
 80054c0:	fb3a 330e 	smlawb	r3, sl, lr, r3
 80054c4:	4d28      	ldr	r5, [pc, #160]	; (8005568 <greq_setConfig+0x420>)
 80054c6:	9e03      	ldr	r6, [sp, #12]
 80054c8:	fb35 3306 	smlawb	r3, r5, r6, r3
 80054cc:	4d27      	ldr	r5, [pc, #156]	; (800556c <greq_setConfig+0x424>)
 80054ce:	9f04      	ldr	r7, [sp, #16]
 80054d0:	fb35 3307 	smlawb	r3, r5, r7, r3
 80054d4:	f46f 55c4 	mvn.w	r5, #6272	; 0x1880
 80054d8:	9f05      	ldr	r7, [sp, #20]
 80054da:	fb35 3307 	smlawb	r3, r5, r7, r3
 80054de:	139b      	asrs	r3, r3, #14
 80054e0:	f303 030f 	ssat	r3, #16, r3
 80054e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <greq_setConfig+0x3e0>)
 80054ea:	fb33 f302 	smulwb	r3, r3, r2
 80054ee:	4d12      	ldr	r5, [pc, #72]	; (8005538 <greq_setConfig+0x3f0>)
 80054f0:	fb35 3300 	smlawb	r3, r5, r0, r3
 80054f4:	fb38 3304 	smlawb	r3, r8, r4, r3
 80054f8:	9f00      	ldr	r7, [sp, #0]
 80054fa:	fb39 3907 	smlawb	r9, r9, r7, r3
 80054fe:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <greq_setConfig+0x428>)
 8005500:	9f01      	ldr	r7, [sp, #4]
 8005502:	fb33 9307 	smlawb	r3, r3, r7, r9
 8005506:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005598 <greq_setConfig+0x450>
 800550a:	9d02      	ldr	r5, [sp, #8]
 800550c:	fb38 3305 	smlawb	r3, r8, r5, r3
 8005510:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800559c <greq_setConfig+0x454>
 8005514:	fb39 330e 	smlawb	r3, r9, lr, r3
 8005518:	e042      	b.n	80055a0 <greq_setConfig+0x458>
 800551a:	bf00      	nop
 800551c:	080068dc 	.word	0x080068dc
 8005520:	437f9a53 	.word	0x437f9a53
 8005524:	ffd4231b 	.word	0xffd4231b
 8005528:	fffb31ce 	.word	0xfffb31ce
 800552c:	fffec38a 	.word	0xfffec38a
 8005530:	ffffc5a0 	.word	0xffffc5a0
 8005534:	46f2fd24 	.word	0x46f2fd24
 8005538:	ffd5ad3d 	.word	0xffd5ad3d
 800553c:	fffb7949 	.word	0xfffb7949
 8005540:	fffed4a0 	.word	0xfffed4a0
 8005544:	ffffc9cb 	.word	0xffffc9cb
 8005548:	fffff5fd 	.word	0xfffff5fd
 800554c:	46d6f35d 	.word	0x46d6f35d
 8005550:	ffd58a7c 	.word	0xffd58a7c
 8005554:	fffb728a 	.word	0xfffb728a
 8005558:	fffedb15 	.word	0xfffedb15
 800555c:	ffffced6 	.word	0xffffced6
 8005560:	fffffb0c 	.word	0xfffffb0c
 8005564:	46d7cb88 	.word	0x46d7cb88
 8005568:	fffb7b86 	.word	0xfffb7b86
 800556c:	fffefbce 	.word	0xfffefbce
 8005570:	46db82d7 	.word	0x46db82d7
 8005574:	08006834 	.word	0x08006834
 8005578:	f09712df 	.word	0xf09712df
 800557c:	003cefc6 	.word	0x003cefc6
 8005580:	f0b1f215 	.word	0xf0b1f215
 8005584:	00437c98 	.word	0x00437c98
 8005588:	f0cb65ad 	.word	0xf0cb65ad
 800558c:	004359bc 	.word	0x004359bc
 8005590:	f0b0e9e9 	.word	0xf0b0e9e9
 8005594:	ffd5f133 	.word	0xffd5f133
 8005598:	f0c3bb91 	.word	0xf0c3bb91
 800559c:	003e8db9 	.word	0x003e8db9
 80055a0:	4dc6      	ldr	r5, [pc, #792]	; (80058bc <greq_setConfig+0x774>)
 80055a2:	fb35 3306 	smlawb	r3, r5, r6, r3
 80055a6:	4dc6      	ldr	r5, [pc, #792]	; (80058c0 <greq_setConfig+0x778>)
 80055a8:	9e04      	ldr	r6, [sp, #16]
 80055aa:	fb35 3306 	smlawb	r3, r5, r6, r3
 80055ae:	4dc5      	ldr	r5, [pc, #788]	; (80058c4 <greq_setConfig+0x77c>)
 80055b0:	9f05      	ldr	r7, [sp, #20]
 80055b2:	fb35 3307 	smlawb	r3, r5, r7, r3
 80055b6:	139b      	asrs	r3, r3, #14
 80055b8:	f303 030f 	ssat	r3, #16, r3
 80055bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80055c0:	4bc1      	ldr	r3, [pc, #772]	; (80058c8 <greq_setConfig+0x780>)
 80055c2:	fb33 f302 	smulwb	r3, r3, r2
 80055c6:	4dc1      	ldr	r5, [pc, #772]	; (80058cc <greq_setConfig+0x784>)
 80055c8:	fb35 3300 	smlawb	r3, r5, r0, r3
 80055cc:	4dc0      	ldr	r5, [pc, #768]	; (80058d0 <greq_setConfig+0x788>)
 80055ce:	fb35 3304 	smlawb	r3, r5, r4, r3
 80055d2:	9e00      	ldr	r6, [sp, #0]
 80055d4:	fb3c 3306 	smlawb	r3, ip, r6, r3
 80055d8:	9e01      	ldr	r6, [sp, #4]
 80055da:	fb38 3806 	smlawb	r8, r8, r6, r3
 80055de:	4bbd      	ldr	r3, [pc, #756]	; (80058d4 <greq_setConfig+0x78c>)
 80055e0:	9f02      	ldr	r7, [sp, #8]
 80055e2:	fb33 8307 	smlawb	r3, r3, r7, r8
 80055e6:	f8df c348 	ldr.w	ip, [pc, #840]	; 8005930 <greq_setConfig+0x7e8>
 80055ea:	fb3c 330e 	smlawb	r3, ip, lr, r3
 80055ee:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8005934 <greq_setConfig+0x7ec>
 80055f2:	9e03      	ldr	r6, [sp, #12]
 80055f4:	fb38 3306 	smlawb	r3, r8, r6, r3
 80055f8:	4db7      	ldr	r5, [pc, #732]	; (80058d8 <greq_setConfig+0x790>)
 80055fa:	9f04      	ldr	r7, [sp, #16]
 80055fc:	fb35 3307 	smlawb	r3, r5, r7, r3
 8005600:	4db6      	ldr	r5, [pc, #728]	; (80058dc <greq_setConfig+0x794>)
 8005602:	9f05      	ldr	r7, [sp, #20]
 8005604:	fb35 3307 	smlawb	r3, r5, r7, r3
 8005608:	139b      	asrs	r3, r3, #14
 800560a:	f303 030f 	ssat	r3, #16, r3
 800560e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8005612:	4bb3      	ldr	r3, [pc, #716]	; (80058e0 <greq_setConfig+0x798>)
 8005614:	fb33 f302 	smulwb	r3, r3, r2
 8005618:	4db2      	ldr	r5, [pc, #712]	; (80058e4 <greq_setConfig+0x79c>)
 800561a:	fb35 3300 	smlawb	r3, r5, r0, r3
 800561e:	4db2      	ldr	r5, [pc, #712]	; (80058e8 <greq_setConfig+0x7a0>)
 8005620:	fb35 3304 	smlawb	r3, r5, r4, r3
 8005624:	9d00      	ldr	r5, [sp, #0]
 8005626:	fb3a 3305 	smlawb	r3, sl, r5, r3
 800562a:	9d01      	ldr	r5, [sp, #4]
 800562c:	fb39 3305 	smlawb	r3, r9, r5, r3
 8005630:	9e02      	ldr	r6, [sp, #8]
 8005632:	fb3c 3c06 	smlawb	ip, ip, r6, r3
 8005636:	4bad      	ldr	r3, [pc, #692]	; (80058ec <greq_setConfig+0x7a4>)
 8005638:	fb33 c30e 	smlawb	r3, r3, lr, ip
 800563c:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8005938 <greq_setConfig+0x7f0>
 8005640:	9e03      	ldr	r6, [sp, #12]
 8005642:	fb3a 3306 	smlawb	r3, sl, r6, r3
 8005646:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 800593c <greq_setConfig+0x7f4>
 800564a:	9e04      	ldr	r6, [sp, #16]
 800564c:	fb3c 3306 	smlawb	r3, ip, r6, r3
 8005650:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 8005940 <greq_setConfig+0x7f8>
 8005654:	fb39 3307 	smlawb	r3, r9, r7, r3
 8005658:	139b      	asrs	r3, r3, #14
 800565a:	f303 030f 	ssat	r3, #16, r3
 800565e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8005662:	f46f 633c 	mvn.w	r3, #3008	; 0xbc0
 8005666:	fb33 f302 	smulwb	r3, r3, r2
 800566a:	4da1      	ldr	r5, [pc, #644]	; (80058f0 <greq_setConfig+0x7a8>)
 800566c:	fb35 3300 	smlawb	r3, r5, r0, r3
 8005670:	4da0      	ldr	r5, [pc, #640]	; (80058f4 <greq_setConfig+0x7ac>)
 8005672:	fb35 3304 	smlawb	r3, r5, r4, r3
 8005676:	4da0      	ldr	r5, [pc, #640]	; (80058f8 <greq_setConfig+0x7b0>)
 8005678:	9f00      	ldr	r7, [sp, #0]
 800567a:	fb35 3307 	smlawb	r3, r5, r7, r3
 800567e:	f5a5 150e 	sub.w	r5, r5, #2326528	; 0x238000
 8005682:	f5a5 654b 	sub.w	r5, r5, #3248	; 0xcb0
 8005686:	9f01      	ldr	r7, [sp, #4]
 8005688:	fb35 3307 	smlawb	r3, r5, r7, r3
 800568c:	9d02      	ldr	r5, [sp, #8]
 800568e:	fb38 3305 	smlawb	r3, r8, r5, r3
 8005692:	fb3a 3a0e 	smlawb	sl, sl, lr, r3
 8005696:	4b99      	ldr	r3, [pc, #612]	; (80058fc <greq_setConfig+0x7b4>)
 8005698:	9e03      	ldr	r6, [sp, #12]
 800569a:	fb33 a306 	smlawb	r3, r3, r6, sl
 800569e:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8005944 <greq_setConfig+0x7fc>
 80056a2:	9f04      	ldr	r7, [sp, #16]
 80056a4:	fb3a 3307 	smlawb	r3, sl, r7, r3
 80056a8:	f5a8 08ad 	sub.w	r8, r8, #5668864	; 0x568000
 80056ac:	f6a8 687f 	subw	r8, r8, #3711	; 0xe7f
 80056b0:	9f05      	ldr	r7, [sp, #20]
 80056b2:	fb38 3307 	smlawb	r3, r8, r7, r3
 80056b6:	139b      	asrs	r3, r3, #14
 80056b8:	f303 030f 	ssat	r3, #16, r3
 80056bc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80056c0:	4b8f      	ldr	r3, [pc, #572]	; (8005900 <greq_setConfig+0x7b8>)
 80056c2:	fb33 f302 	smulwb	r3, r3, r2
 80056c6:	4d8f      	ldr	r5, [pc, #572]	; (8005904 <greq_setConfig+0x7bc>)
 80056c8:	fb35 3300 	smlawb	r3, r5, r0, r3
 80056cc:	4d8e      	ldr	r5, [pc, #568]	; (8005908 <greq_setConfig+0x7c0>)
 80056ce:	fb35 3304 	smlawb	r3, r5, r4, r3
 80056d2:	4d8e      	ldr	r5, [pc, #568]	; (800590c <greq_setConfig+0x7c4>)
 80056d4:	9e00      	ldr	r6, [sp, #0]
 80056d6:	fb35 3306 	smlawb	r3, r5, r6, r3
 80056da:	4d79      	ldr	r5, [pc, #484]	; (80058c0 <greq_setConfig+0x778>)
 80056dc:	9e01      	ldr	r6, [sp, #4]
 80056de:	fb35 3306 	smlawb	r3, r5, r6, r3
 80056e2:	f5a5 15ea 	sub.w	r5, r5, #1916928	; 0x1d4000
 80056e6:	f5a5 55e2 	sub.w	r5, r5, #7232	; 0x1c40
 80056ea:	9e02      	ldr	r6, [sp, #8]
 80056ec:	fb35 3306 	smlawb	r3, r5, r6, r3
 80056f0:	fb3c 330e 	smlawb	r3, ip, lr, r3
 80056f4:	9e03      	ldr	r6, [sp, #12]
 80056f6:	fb3a 3a06 	smlawb	sl, sl, r6, r3
 80056fa:	4b85      	ldr	r3, [pc, #532]	; (8005910 <greq_setConfig+0x7c8>)
 80056fc:	9e04      	ldr	r6, [sp, #16]
 80056fe:	fb33 a306 	smlawb	r3, r3, r6, sl
 8005702:	f8df c244 	ldr.w	ip, [pc, #580]	; 8005948 <greq_setConfig+0x800>
 8005706:	463d      	mov	r5, r7
 8005708:	fb3c 3307 	smlawb	r3, ip, r7, r3
 800570c:	139b      	asrs	r3, r3, #14
 800570e:	f303 030f 	ssat	r3, #16, r3
 8005712:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005716:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800571a:	fb33 f202 	smulwb	r2, r3, r2
 800571e:	f06f 03fb 	mvn.w	r3, #251	; 0xfb
 8005722:	fb33 2200 	smlawb	r2, r3, r0, r2
 8005726:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800572a:	fb33 2204 	smlawb	r2, r3, r4, r2
 800572e:	f46f 53c4 	mvn.w	r3, #6272	; 0x1880
 8005732:	9f00      	ldr	r7, [sp, #0]
 8005734:	fb33 2207 	smlawb	r2, r3, r7, r2
 8005738:	4b62      	ldr	r3, [pc, #392]	; (80058c4 <greq_setConfig+0x77c>)
 800573a:	9c01      	ldr	r4, [sp, #4]
 800573c:	fb33 2204 	smlawb	r2, r3, r4, r2
 8005740:	4b66      	ldr	r3, [pc, #408]	; (80058dc <greq_setConfig+0x794>)
 8005742:	9802      	ldr	r0, [sp, #8]
 8005744:	fb33 2200 	smlawb	r2, r3, r0, r2
 8005748:	fb39 220e 	smlawb	r2, r9, lr, r2
 800574c:	9e03      	ldr	r6, [sp, #12]
 800574e:	fb38 2206 	smlawb	r2, r8, r6, r2
 8005752:	9e04      	ldr	r6, [sp, #16]
 8005754:	fb3c 2206 	smlawb	r2, ip, r6, r2
 8005758:	4b6e      	ldr	r3, [pc, #440]	; (8005914 <greq_setConfig+0x7cc>)
 800575a:	fb33 2205 	smlawb	r2, r3, r5, r2
 800575e:	4b6e      	ldr	r3, [pc, #440]	; (8005918 <greq_setConfig+0x7d0>)
 8005760:	1392      	asrs	r2, r2, #14
 8005762:	f302 020f 	ssat	r2, #16, r2
 8005766:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8005770:	fb32 f200 	smulwb	r2, r2, r0
 8005774:	f302 021e 	ssat	r2, #31, r2
 8005778:	f1bb 0f01 	cmp.w	fp, #1
 800577c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005780:	608a      	str	r2, [r1, #8]
 8005782:	f340 8091 	ble.w	80058a8 <greq_setConfig+0x760>
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 800578c:	fb32 f200 	smulwb	r2, r2, r0
 8005790:	f302 021e 	ssat	r2, #31, r2
 8005794:	f1bb 0f02 	cmp.w	fp, #2
 8005798:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800579c:	618a      	str	r2, [r1, #24]
 800579e:	f000 8083 	beq.w	80058a8 <greq_setConfig+0x760>
 80057a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057a4:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80057a8:	fb32 f200 	smulwb	r2, r2, r0
 80057ac:	f302 021e 	ssat	r2, #31, r2
 80057b0:	f1bb 0f03 	cmp.w	fp, #3
 80057b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80057b8:	628a      	str	r2, [r1, #40]	; 0x28
 80057ba:	d075      	beq.n	80058a8 <greq_setConfig+0x760>
 80057bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057be:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
 80057c2:	fb32 f200 	smulwb	r2, r2, r0
 80057c6:	f302 021e 	ssat	r2, #31, r2
 80057ca:	f1bb 0f04 	cmp.w	fp, #4
 80057ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80057d2:	638a      	str	r2, [r1, #56]	; 0x38
 80057d4:	d068      	beq.n	80058a8 <greq_setConfig+0x760>
 80057d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d8:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80057dc:	fb32 f200 	smulwb	r2, r2, r0
 80057e0:	f302 021e 	ssat	r2, #31, r2
 80057e4:	f1bb 0f05 	cmp.w	fp, #5
 80057e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80057ec:	648a      	str	r2, [r1, #72]	; 0x48
 80057ee:	d05b      	beq.n	80058a8 <greq_setConfig+0x760>
 80057f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f2:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
 80057f6:	fb32 f200 	smulwb	r2, r2, r0
 80057fa:	f302 021e 	ssat	r2, #31, r2
 80057fe:	f1bb 0f06 	cmp.w	fp, #6
 8005802:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005806:	658a      	str	r2, [r1, #88]	; 0x58
 8005808:	d04e      	beq.n	80058a8 <greq_setConfig+0x760>
 800580a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800580c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8005810:	fb32 f200 	smulwb	r2, r2, r0
 8005814:	f302 021e 	ssat	r2, #31, r2
 8005818:	f1bb 0f07 	cmp.w	fp, #7
 800581c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005820:	668a      	str	r2, [r1, #104]	; 0x68
 8005822:	d041      	beq.n	80058a8 <greq_setConfig+0x760>
 8005824:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005826:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 800582a:	fb32 f200 	smulwb	r2, r2, r0
 800582e:	f302 021e 	ssat	r2, #31, r2
 8005832:	f1bb 0f08 	cmp.w	fp, #8
 8005836:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800583a:	678a      	str	r2, [r1, #120]	; 0x78
 800583c:	d034      	beq.n	80058a8 <greq_setConfig+0x760>
 800583e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005842:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 8005846:	fb32 f200 	smulwb	r2, r2, r0
 800584a:	f302 021e 	ssat	r2, #31, r2
 800584e:	f1bb 0f09 	cmp.w	fp, #9
 8005852:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005856:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800585a:	d025      	beq.n	80058a8 <greq_setConfig+0x760>
 800585c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005860:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
 8005864:	fb32 f200 	smulwb	r2, r2, r0
 8005868:	f302 021e 	ssat	r2, #31, r2
 800586c:	f1bb 0f0a 	cmp.w	fp, #10
 8005870:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005874:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
 8005878:	d016      	beq.n	80058a8 <greq_setConfig+0x760>
 800587a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800587e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8005882:	fb33 f302 	smulwb	r3, r3, r2
 8005886:	4b25      	ldr	r3, [pc, #148]	; (800591c <greq_setConfig+0x7d4>)
 8005888:	e499      	b.n	80051be <greq_setConfig+0x76>
 800588a:	1c83      	adds	r3, r0, #2
 800588c:	e497      	b.n	80051be <greq_setConfig+0x76>
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <greq_setConfig+0x7d8>)
 8005890:	e495      	b.n	80051be <greq_setConfig+0x76>
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <greq_setConfig+0x7dc>)
 8005894:	e493      	b.n	80051be <greq_setConfig+0x76>
 8005896:	4b24      	ldr	r3, [pc, #144]	; (8005928 <greq_setConfig+0x7e0>)
 8005898:	e491      	b.n	80051be <greq_setConfig+0x76>
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <greq_setConfig+0x7e4>)
 800589c:	e48f      	b.n	80051be <greq_setConfig+0x76>
 800589e:	f06f 0002 	mvn.w	r0, #2
 80058a2:	b00d      	add	sp, #52	; 0x34
 80058a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a8:	2000      	movs	r0, #0
 80058aa:	b00d      	add	sp, #52	; 0x34
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	f06f 0006 	mvn.w	r0, #6
 80058b4:	b00d      	add	sp, #52	; 0x34
 80058b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ba:	bf00      	nop
 80058bc:	ffd7eed6 	.word	0xffd7eed6
 80058c0:	fffbc3a6 	.word	0xfffbc3a6
 80058c4:	ffff82c9 	.word	0xffff82c9
 80058c8:	fffec38a 	.word	0xfffec38a
 80058cc:	fffb7949 	.word	0xfffb7949
 80058d0:	ffd58a7c 	.word	0xffd58a7c
 80058d4:	46ba1415 	.word	0x46ba1415
 80058d8:	ffde6766 	.word	0xffde6766
 80058dc:	fffdb683 	.word	0xfffdb683
 80058e0:	ffffc5a0 	.word	0xffffc5a0
 80058e4:	fffed4a0 	.word	0xfffed4a0
 80058e8:	fffb728a 	.word	0xfffb728a
 80058ec:	464eb3cc 	.word	0x464eb3cc
 80058f0:	ffffc9cb 	.word	0xffffc9cb
 80058f4:	fffedb15 	.word	0xfffedb15
 80058f8:	fffb7b86 	.word	0xfffb7b86
 80058fc:	450d8218 	.word	0x450d8218
 8005900:	fffffde6 	.word	0xfffffde6
 8005904:	fffff5fd 	.word	0xfffff5fd
 8005908:	ffffced6 	.word	0xffffced6
 800590c:	fffefbce 	.word	0xfffefbce
 8005910:	426bfd18 	.word	0x426bfd18
 8005914:	405d1eb8 	.word	0x405d1eb8
 8005918:	08006a24 	.word	0x08006a24
 800591c:	080068f0 	.word	0x080068f0
 8005920:	08006940 	.word	0x08006940
 8005924:	0800692c 	.word	0x0800692c
 8005928:	08006918 	.word	0x08006918
 800592c:	08006904 	.word	0x08006904
 8005930:	f1036186 	.word	0xf1036186
 8005934:	002ea293 	.word	0x002ea293
 8005938:	f1d127dc 	.word	0xf1d127dc
 800593c:	0004cb5a 	.word	0x0004cb5a
 8005940:	fff1aba5 	.word	0xfff1aba5
 8005944:	f4575a1b 	.word	0xf4575a1b
 8005948:	fb31bda4 	.word	0xfb31bda4
 800594c:	4a6d      	ldr	r2, [pc, #436]	; (8005b04 <greq_setConfig+0x9bc>)
 800594e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005952:	f103 000c 	add.w	r0, r3, #12
 8005956:	2818      	cmp	r0, #24
 8005958:	d8aa      	bhi.n	80058b0 <greq_setConfig+0x768>
 800595a:	f8a1 3206 	strh.w	r3, [r1, #518]	; 0x206
 800595e:	8810      	ldrh	r0, [r2, #0]
 8005960:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <greq_setConfig+0x9bc>)
 8005962:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8005966:	300c      	adds	r0, #12
 8005968:	b200      	sxth	r0, r0
 800596a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800596e:	f104 050c 	add.w	r5, r4, #12
 8005972:	f8b0 0290 	ldrh.w	r0, [r0, #656]	; 0x290
 8005976:	f5a0 50ff 	sub.w	r0, r0, #8160	; 0x1fe0
 800597a:	381f      	subs	r0, #31
 800597c:	2d18      	cmp	r5, #24
 800597e:	b200      	sxth	r0, r0
 8005980:	d896      	bhi.n	80058b0 <greq_setConfig+0x768>
 8005982:	f8a1 4208 	strh.w	r4, [r1, #520]	; 0x208
 8005986:	8854      	ldrh	r4, [r2, #2]
 8005988:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800598c:	340c      	adds	r4, #12
 800598e:	b224      	sxth	r4, r4
 8005990:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8005994:	f105 060c 	add.w	r6, r5, #12
 8005998:	f8b4 4290 	ldrh.w	r4, [r4, #656]	; 0x290
 800599c:	f5a4 54ff 	sub.w	r4, r4, #8160	; 0x1fe0
 80059a0:	3c1f      	subs	r4, #31
 80059a2:	2e18      	cmp	r6, #24
 80059a4:	b224      	sxth	r4, r4
 80059a6:	d883      	bhi.n	80058b0 <greq_setConfig+0x768>
 80059a8:	f8a1 520a 	strh.w	r5, [r1, #522]	; 0x20a
 80059ac:	8895      	ldrh	r5, [r2, #4]
 80059ae:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80059b2:	350c      	adds	r5, #12
 80059b4:	b22d      	sxth	r5, r5
 80059b6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80059ba:	f106 070c 	add.w	r7, r6, #12
 80059be:	f8b5 5290 	ldrh.w	r5, [r5, #656]	; 0x290
 80059c2:	f5a5 55ff 	sub.w	r5, r5, #8160	; 0x1fe0
 80059c6:	3d1f      	subs	r5, #31
 80059c8:	2f18      	cmp	r7, #24
 80059ca:	b22d      	sxth	r5, r5
 80059cc:	f63f af70 	bhi.w	80058b0 <greq_setConfig+0x768>
 80059d0:	f8a1 620c 	strh.w	r6, [r1, #524]	; 0x20c
 80059d4:	88d6      	ldrh	r6, [r2, #6]
 80059d6:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
 80059da:	360c      	adds	r6, #12
 80059dc:	b236      	sxth	r6, r6
 80059de:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80059e2:	f107 0e0c 	add.w	lr, r7, #12
 80059e6:	f8b6 6290 	ldrh.w	r6, [r6, #656]	; 0x290
 80059ea:	f5a6 56ff 	sub.w	r6, r6, #8160	; 0x1fe0
 80059ee:	3e1f      	subs	r6, #31
 80059f0:	f1be 0f18 	cmp.w	lr, #24
 80059f4:	b236      	sxth	r6, r6
 80059f6:	f63f af5b 	bhi.w	80058b0 <greq_setConfig+0x768>
 80059fa:	f8a1 720e 	strh.w	r7, [r1, #526]	; 0x20e
 80059fe:	8917      	ldrh	r7, [r2, #8]
 8005a00:	4a41      	ldr	r2, [pc, #260]	; (8005b08 <greq_setConfig+0x9c0>)
 8005a02:	370c      	adds	r7, #12
 8005a04:	b23f      	sxth	r7, r7
 8005a06:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8005a0a:	f8b7 7290 	ldrh.w	r7, [r7, #656]	; 0x290
 8005a0e:	f5a7 57ff 	sub.w	r7, r7, #8160	; 0x1fe0
 8005a12:	3f1f      	subs	r7, #31
 8005a14:	b23f      	sxth	r7, r7
 8005a16:	9700      	str	r7, [sp, #0]
 8005a18:	fb32 f200 	smulwb	r2, r2, r0
 8005a1c:	f8df e118 	ldr.w	lr, [pc, #280]	; 8005b38 <greq_setConfig+0x9f0>
 8005a20:	fb3e 2204 	smlawb	r2, lr, r4, r2
 8005a24:	4f39      	ldr	r7, [pc, #228]	; (8005b0c <greq_setConfig+0x9c4>)
 8005a26:	fb37 2205 	smlawb	r2, r7, r5, r2
 8005a2a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8005b3c <greq_setConfig+0x9f4>
 8005a2e:	fb39 2206 	smlawb	r2, r9, r6, r2
 8005a32:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8005b40 <greq_setConfig+0x9f8>
 8005a36:	9f00      	ldr	r7, [sp, #0]
 8005a38:	fb3c 2207 	smlawb	r2, ip, r7, r2
 8005a3c:	1392      	asrs	r2, r2, #14
 8005a3e:	f302 020f 	ssat	r2, #16, r2
 8005a42:	f8ad 201c 	strh.w	r2, [sp, #28]
 8005a46:	fb3e fe00 	smulwb	lr, lr, r0
 8005a4a:	4a31      	ldr	r2, [pc, #196]	; (8005b10 <greq_setConfig+0x9c8>)
 8005a4c:	fb32 e204 	smlawb	r2, r2, r4, lr
 8005a50:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8005b44 <greq_setConfig+0x9fc>
 8005a54:	fb3a 2205 	smlawb	r2, sl, r5, r2
 8005a58:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8005b48 <greq_setConfig+0xa00>
 8005a5c:	fb38 2206 	smlawb	r2, r8, r6, r2
 8005a60:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8005b4c <greq_setConfig+0xa04>
 8005a64:	fb3e 2207 	smlawb	r2, lr, r7, r2
 8005a68:	1392      	asrs	r2, r2, #14
 8005a6a:	f302 020f 	ssat	r2, #16, r2
 8005a6e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8005a72:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <greq_setConfig+0x9c4>)
 8005a74:	fb32 f200 	smulwb	r2, r2, r0
 8005a78:	fb3a 2a04 	smlawb	sl, sl, r4, r2
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <greq_setConfig+0x9cc>)
 8005a7e:	fb32 a205 	smlawb	r2, r2, r5, sl
 8005a82:	4f25      	ldr	r7, [pc, #148]	; (8005b18 <greq_setConfig+0x9d0>)
 8005a84:	fb37 2206 	smlawb	r2, r7, r6, r2
 8005a88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b50 <greq_setConfig+0xa08>
 8005a8c:	9f00      	ldr	r7, [sp, #0]
 8005a8e:	fb3a 2207 	smlawb	r2, sl, r7, r2
 8005a92:	1392      	asrs	r2, r2, #14
 8005a94:	f302 020f 	ssat	r2, #16, r2
 8005a98:	f8ad 2020 	strh.w	r2, [sp, #32]
 8005a9c:	fb39 f200 	smulwb	r2, r9, r0
 8005aa0:	fb38 2204 	smlawb	r2, r8, r4, r2
 8005aa4:	4f1c      	ldr	r7, [pc, #112]	; (8005b18 <greq_setConfig+0x9d0>)
 8005aa6:	fb37 2805 	smlawb	r8, r7, r5, r2
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <greq_setConfig+0x9d4>)
 8005aac:	fb32 8206 	smlawb	r2, r2, r6, r8
 8005ab0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005b54 <greq_setConfig+0xa0c>
 8005ab4:	9f00      	ldr	r7, [sp, #0]
 8005ab6:	fb38 2207 	smlawb	r2, r8, r7, r2
 8005aba:	1392      	asrs	r2, r2, #14
 8005abc:	f302 020f 	ssat	r2, #16, r2
 8005ac0:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8005ac4:	fb3c f200 	smulwb	r2, ip, r0
 8005ac8:	fb3e 2204 	smlawb	r2, lr, r4, r2
 8005acc:	fb3a 2205 	smlawb	r2, sl, r5, r2
 8005ad0:	fb38 2606 	smlawb	r6, r8, r6, r2
 8005ad4:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <greq_setConfig+0x9d8>)
 8005ad6:	fb32 6207 	smlawb	r2, r2, r7, r6
 8005ada:	1392      	asrs	r2, r2, #14
 8005adc:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005ae0:	f302 020f 	ssat	r2, #16, r2
 8005ae4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8005ae8:	e63f      	b.n	800576a <greq_setConfig+0x622>
 8005aea:	4a0e      	ldr	r2, [pc, #56]	; (8005b24 <greq_setConfig+0x9dc>)
 8005aec:	e72f      	b.n	800594e <greq_setConfig+0x806>
 8005aee:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <greq_setConfig+0x9e0>)
 8005af0:	e72d      	b.n	800594e <greq_setConfig+0x806>
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <greq_setConfig+0x9e4>)
 8005af4:	e72b      	b.n	800594e <greq_setConfig+0x806>
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <greq_setConfig+0x9e8>)
 8005af8:	e729      	b.n	800594e <greq_setConfig+0x806>
 8005afa:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <greq_setConfig+0x9ec>)
 8005afc:	e727      	b.n	800594e <greq_setConfig+0x806>
 8005afe:	1c82      	adds	r2, r0, #2
 8005b00:	e725      	b.n	800594e <greq_setConfig+0x806>
 8005b02:	bf00      	nop
 8005b04:	08006834 	.word	0x08006834
 8005b08:	445cfbe7 	.word	0x445cfbe7
 8005b0c:	02ba502b 	.word	0x02ba502b
 8005b10:	48f4f3d7 	.word	0x48f4f3d7
 8005b14:	48a24f34 	.word	0x48a24f34
 8005b18:	eec5cc42 	.word	0xeec5cc42
 8005b1c:	459bc20d 	.word	0x459bc20d
 8005b20:	41835efa 	.word	0x41835efa
 8005b24:	0800684c 	.word	0x0800684c
 8005b28:	08006858 	.word	0x08006858
 8005b2c:	08006864 	.word	0x08006864
 8005b30:	08006870 	.word	0x08006870
 8005b34:	08006840 	.word	0x08006840
 8005b38:	ee403792 	.word	0xee403792
 8005b3c:	ff9e0573 	.word	0xff9e0573
 8005b40:	00088ef1 	.word	0x00088ef1
 8005b44:	ed9dcf5e 	.word	0xed9dcf5e
 8005b48:	02a8d0af 	.word	0x02a8d0af
 8005b4c:	ffc47dda 	.word	0xffc47dda
 8005b50:	018cef2e 	.word	0x018cef2e
 8005b54:	f5c8f3bc 	.word	0xf5c8f3bc
 8005b58:	f8df e3bc 	ldr.w	lr, [pc, #956]	; 8005f18 <greq_setConfig+0xdd0>
 8005b5c:	f9be 3000 	ldrsh.w	r3, [lr]
 8005b60:	f103 020c 	add.w	r2, r3, #12
 8005b64:	2a18      	cmp	r2, #24
 8005b66:	f63f aea3 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005b6a:	f8a1 3206 	strh.w	r3, [r1, #518]	; 0x206
 8005b6e:	f8be 2000 	ldrh.w	r2, [lr]
 8005b72:	4bde      	ldr	r3, [pc, #888]	; (8005eec <greq_setConfig+0xda4>)
 8005b74:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8005b78:	320c      	adds	r2, #12
 8005b7a:	b212      	sxth	r2, r2
 8005b7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005b80:	f100 040c 	add.w	r4, r0, #12
 8005b84:	f8b2 2290 	ldrh.w	r2, [r2, #656]	; 0x290
 8005b88:	f5a2 52ff 	sub.w	r2, r2, #8160	; 0x1fe0
 8005b8c:	3a1f      	subs	r2, #31
 8005b8e:	2c18      	cmp	r4, #24
 8005b90:	b212      	sxth	r2, r2
 8005b92:	f63f ae8d 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005b96:	f8a1 0208 	strh.w	r0, [r1, #520]	; 0x208
 8005b9a:	f8be 0002 	ldrh.w	r0, [lr, #2]
 8005b9e:	f9be 4004 	ldrsh.w	r4, [lr, #4]
 8005ba2:	300c      	adds	r0, #12
 8005ba4:	b200      	sxth	r0, r0
 8005ba6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005baa:	f104 050c 	add.w	r5, r4, #12
 8005bae:	f8b0 0290 	ldrh.w	r0, [r0, #656]	; 0x290
 8005bb2:	f5a0 50ff 	sub.w	r0, r0, #8160	; 0x1fe0
 8005bb6:	381f      	subs	r0, #31
 8005bb8:	2d18      	cmp	r5, #24
 8005bba:	b200      	sxth	r0, r0
 8005bbc:	f63f ae78 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005bc0:	f8a1 420a 	strh.w	r4, [r1, #522]	; 0x20a
 8005bc4:	f8be 4004 	ldrh.w	r4, [lr, #4]
 8005bc8:	f9be 5006 	ldrsh.w	r5, [lr, #6]
 8005bcc:	340c      	adds	r4, #12
 8005bce:	b224      	sxth	r4, r4
 8005bd0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8005bd4:	f105 060c 	add.w	r6, r5, #12
 8005bd8:	f8b4 4290 	ldrh.w	r4, [r4, #656]	; 0x290
 8005bdc:	f5a4 54ff 	sub.w	r4, r4, #8160	; 0x1fe0
 8005be0:	3c1f      	subs	r4, #31
 8005be2:	2e18      	cmp	r6, #24
 8005be4:	b224      	sxth	r4, r4
 8005be6:	f63f ae63 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005bea:	f8a1 520c 	strh.w	r5, [r1, #524]	; 0x20c
 8005bee:	f8be 5006 	ldrh.w	r5, [lr, #6]
 8005bf2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8005bf6:	350c      	adds	r5, #12
 8005bf8:	b22d      	sxth	r5, r5
 8005bfa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005bfe:	f106 070c 	add.w	r7, r6, #12
 8005c02:	f8b5 5290 	ldrh.w	r5, [r5, #656]	; 0x290
 8005c06:	f5a5 55ff 	sub.w	r5, r5, #8160	; 0x1fe0
 8005c0a:	3d1f      	subs	r5, #31
 8005c0c:	2f18      	cmp	r7, #24
 8005c0e:	b22d      	sxth	r5, r5
 8005c10:	f63f ae4e 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005c14:	f8a1 620e 	strh.w	r6, [r1, #526]	; 0x20e
 8005c18:	f8be 6008 	ldrh.w	r6, [lr, #8]
 8005c1c:	f9be 700a 	ldrsh.w	r7, [lr, #10]
 8005c20:	360c      	adds	r6, #12
 8005c22:	b236      	sxth	r6, r6
 8005c24:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8005c28:	f107 0c0c 	add.w	ip, r7, #12
 8005c2c:	f8b6 6290 	ldrh.w	r6, [r6, #656]	; 0x290
 8005c30:	f5a6 56ff 	sub.w	r6, r6, #8160	; 0x1fe0
 8005c34:	3e1f      	subs	r6, #31
 8005c36:	b233      	sxth	r3, r6
 8005c38:	f1bc 0f18 	cmp.w	ip, #24
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	f63f ae37 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005c42:	f8a1 7210 	strh.w	r7, [r1, #528]	; 0x210
 8005c46:	f8be 700a 	ldrh.w	r7, [lr, #10]
 8005c4a:	4ba8      	ldr	r3, [pc, #672]	; (8005eec <greq_setConfig+0xda4>)
 8005c4c:	f9be c00c 	ldrsh.w	ip, [lr, #12]
 8005c50:	370c      	adds	r7, #12
 8005c52:	b23f      	sxth	r7, r7
 8005c54:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8005c58:	f10c 080c 	add.w	r8, ip, #12
 8005c5c:	f8b7 7290 	ldrh.w	r7, [r7, #656]	; 0x290
 8005c60:	f5a7 57ff 	sub.w	r7, r7, #8160	; 0x1fe0
 8005c64:	3f1f      	subs	r7, #31
 8005c66:	b23b      	sxth	r3, r7
 8005c68:	f1b8 0f18 	cmp.w	r8, #24
 8005c6c:	9303      	str	r3, [sp, #12]
 8005c6e:	f63f ae1f 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005c72:	f8a1 c212 	strh.w	ip, [r1, #530]	; 0x212
 8005c76:	f8be c00c 	ldrh.w	ip, [lr, #12]
 8005c7a:	4b9c      	ldr	r3, [pc, #624]	; (8005eec <greq_setConfig+0xda4>)
 8005c7c:	f9be 800e 	ldrsh.w	r8, [lr, #14]
 8005c80:	f10c 0c0c 	add.w	ip, ip, #12
 8005c84:	fa0f fc8c 	sxth.w	ip, ip
 8005c88:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8005c8c:	f108 090c 	add.w	r9, r8, #12
 8005c90:	f8bc c290 	ldrh.w	ip, [ip, #656]	; 0x290
 8005c94:	f5ac 5cff 	sub.w	ip, ip, #8160	; 0x1fe0
 8005c98:	f1ac 0c1f 	sub.w	ip, ip, #31
 8005c9c:	fa0f f38c 	sxth.w	r3, ip
 8005ca0:	f1b9 0f18 	cmp.w	r9, #24
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	f63f ae03 	bhi.w	80058b0 <greq_setConfig+0x768>
 8005caa:	f8a1 8214 	strh.w	r8, [r1, #532]	; 0x214
 8005cae:	f8be e00e 	ldrh.w	lr, [lr, #14]
 8005cb2:	4b8e      	ldr	r3, [pc, #568]	; (8005eec <greq_setConfig+0xda4>)
 8005cb4:	f8df c264 	ldr.w	ip, [pc, #612]	; 8005f1c <greq_setConfig+0xdd4>
 8005cb8:	f10e 0e0c 	add.w	lr, lr, #12
 8005cbc:	fa0f fe8e 	sxth.w	lr, lr
 8005cc0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8005cc4:	f8be e290 	ldrh.w	lr, [lr, #656]	; 0x290
 8005cc8:	f5ae 5eff 	sub.w	lr, lr, #8160	; 0x1fe0
 8005ccc:	f1ae 0e1f 	sub.w	lr, lr, #31
 8005cd0:	fa0f f78e 	sxth.w	r7, lr
 8005cd4:	fb3c fe02 	smulwb	lr, ip, r2
 8005cd8:	f8df c244 	ldr.w	ip, [pc, #580]	; 8005f20 <greq_setConfig+0xdd8>
 8005cdc:	fb3c ee00 	smlawb	lr, ip, r0, lr
 8005ce0:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8005f24 <greq_setConfig+0xddc>
 8005ce4:	fb38 ee04 	smlawb	lr, r8, r4, lr
 8005ce8:	4b81      	ldr	r3, [pc, #516]	; (8005ef0 <greq_setConfig+0xda8>)
 8005cea:	fb33 ee05 	smlawb	lr, r3, r5, lr
 8005cee:	4b81      	ldr	r3, [pc, #516]	; (8005ef4 <greq_setConfig+0xdac>)
 8005cf0:	9e00      	ldr	r6, [sp, #0]
 8005cf2:	fb33 ee06 	smlawb	lr, r3, r6, lr
 8005cf6:	4b80      	ldr	r3, [pc, #512]	; (8005ef8 <greq_setConfig+0xdb0>)
 8005cf8:	9e03      	ldr	r6, [sp, #12]
 8005cfa:	fb33 ee06 	smlawb	lr, r3, r6, lr
 8005cfe:	f241 5992 	movw	r9, #5522	; 0x1592
 8005d02:	9b01      	ldr	r3, [sp, #4]
 8005d04:	fb39 ee03 	smlawb	lr, r9, r3, lr
 8005d08:	f46f 79c4 	mvn.w	r9, #392	; 0x188
 8005d0c:	9702      	str	r7, [sp, #8]
 8005d0e:	fb39 ee07 	smlawb	lr, r9, r7, lr
 8005d12:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005d16:	f30e 0e0f 	ssat	lr, #16, lr
 8005d1a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8005d1e:	fb3c fc02 	smulwb	ip, ip, r2
 8005d22:	f8df e204 	ldr.w	lr, [pc, #516]	; 8005f28 <greq_setConfig+0xde0>
 8005d26:	fb3e ce00 	smlawb	lr, lr, r0, ip
 8005d2a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8005f2c <greq_setConfig+0xde4>
 8005d2e:	fb39 ee04 	smlawb	lr, r9, r4, lr
 8005d32:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8005f30 <greq_setConfig+0xde8>
 8005d36:	fb3c ee05 	smlawb	lr, ip, r5, lr
 8005d3a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8005f34 <greq_setConfig+0xdec>
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	fb3a ee03 	smlawb	lr, sl, r3, lr
 8005d44:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <greq_setConfig+0xdb4>)
 8005d46:	fb33 ee06 	smlawb	lr, r3, r6, lr
 8005d4a:	4f6d      	ldr	r7, [pc, #436]	; (8005f00 <greq_setConfig+0xdb8>)
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	fb37 ee03 	smlawb	lr, r7, r3, lr
 8005d52:	f640 1361 	movw	r3, #2401	; 0x961
 8005d56:	9f02      	ldr	r7, [sp, #8]
 8005d58:	fb33 ee07 	smlawb	lr, r3, r7, lr
 8005d5c:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005d60:	f30e 0e0f 	ssat	lr, #16, lr
 8005d64:	f8ad e01e 	strh.w	lr, [sp, #30]
 8005d68:	fb38 f802 	smulwb	r8, r8, r2
 8005d6c:	fb39 8900 	smlawb	r9, r9, r0, r8
 8005d70:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8005f38 <greq_setConfig+0xdf0>
 8005d74:	fb3e 9e04 	smlawb	lr, lr, r4, r9
 8005d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f3c <greq_setConfig+0xdf4>
 8005d7c:	fb38 ee05 	smlawb	lr, r8, r5, lr
 8005d80:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005f40 <greq_setConfig+0xdf8>
 8005d84:	9b00      	ldr	r3, [sp, #0]
 8005d86:	fb39 ee03 	smlawb	lr, r9, r3, lr
 8005d8a:	4b5e      	ldr	r3, [pc, #376]	; (8005f04 <greq_setConfig+0xdbc>)
 8005d8c:	fb33 ee06 	smlawb	lr, r3, r6, lr
 8005d90:	4f5d      	ldr	r7, [pc, #372]	; (8005f08 <greq_setConfig+0xdc0>)
 8005d92:	9b01      	ldr	r3, [sp, #4]
 8005d94:	fb37 ee03 	smlawb	lr, r7, r3, lr
 8005d98:	4b5c      	ldr	r3, [pc, #368]	; (8005f0c <greq_setConfig+0xdc4>)
 8005d9a:	9f02      	ldr	r7, [sp, #8]
 8005d9c:	fb33 ee07 	smlawb	lr, r3, r7, lr
 8005da0:	f5a3 039e 	sub.w	r3, r3, #5177344	; 0x4f0000
 8005da4:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005da8:	3b20      	subs	r3, #32
 8005daa:	f30e 0e0f 	ssat	lr, #16, lr
 8005dae:	f8ad e020 	strh.w	lr, [sp, #32]
 8005db2:	fb33 fe02 	smulwb	lr, r3, r2
 8005db6:	fb3c ee00 	smlawb	lr, ip, r0, lr
 8005dba:	fb38 e804 	smlawb	r8, r8, r4, lr
 8005dbe:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005f44 <greq_setConfig+0xdfc>
 8005dc2:	fb3e 8e05 	smlawb	lr, lr, r5, r8
 8005dc6:	f8df c180 	ldr.w	ip, [pc, #384]	; 8005f48 <greq_setConfig+0xe00>
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	fb3c ee03 	smlawb	lr, ip, r3, lr
 8005dd0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8005f4c <greq_setConfig+0xe04>
 8005dd4:	fb38 ee06 	smlawb	lr, r8, r6, lr
 8005dd8:	4f4d      	ldr	r7, [pc, #308]	; (8005f10 <greq_setConfig+0xdc8>)
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	fb37 ee03 	smlawb	lr, r7, r3, lr
 8005de0:	4b4c      	ldr	r3, [pc, #304]	; (8005f14 <greq_setConfig+0xdcc>)
 8005de2:	9f02      	ldr	r7, [sp, #8]
 8005de4:	fb33 ee07 	smlawb	lr, r3, r7, lr
 8005de8:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <greq_setConfig+0xdac>)
 8005dea:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005dee:	f30e 0e0f 	ssat	lr, #16, lr
 8005df2:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8005df6:	fb33 fe02 	smulwb	lr, r3, r2
 8005dfa:	fb3a ee00 	smlawb	lr, sl, r0, lr
 8005dfe:	fb39 ee04 	smlawb	lr, r9, r4, lr
 8005e02:	fb3c ec05 	smlawb	ip, ip, r5, lr
 8005e06:	f8df e148 	ldr.w	lr, [pc, #328]	; 8005f50 <greq_setConfig+0xe08>
 8005e0a:	9b00      	ldr	r3, [sp, #0]
 8005e0c:	fb3e ce03 	smlawb	lr, lr, r3, ip
 8005e10:	f8df a140 	ldr.w	sl, [pc, #320]	; 8005f54 <greq_setConfig+0xe0c>
 8005e14:	fb3a ee06 	smlawb	lr, sl, r6, lr
 8005e18:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8005f58 <greq_setConfig+0xe10>
 8005e1c:	9b01      	ldr	r3, [sp, #4]
 8005e1e:	fb3c ee03 	smlawb	lr, ip, r3, lr
 8005e22:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8005f5c <greq_setConfig+0xe14>
 8005e26:	9f02      	ldr	r7, [sp, #8]
 8005e28:	fb39 ee07 	smlawb	lr, r9, r7, lr
 8005e2c:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <greq_setConfig+0xdb0>)
 8005e2e:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005e32:	f30e 0e0f 	ssat	lr, #16, lr
 8005e36:	f8ad e024 	strh.w	lr, [sp, #36]	; 0x24
 8005e3a:	fb33 fe02 	smulwb	lr, r3, r2
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <greq_setConfig+0xdb4>)
 8005e40:	fb33 ee00 	smlawb	lr, r3, r0, lr
 8005e44:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <greq_setConfig+0xdbc>)
 8005e46:	fb33 ee04 	smlawb	lr, r3, r4, lr
 8005e4a:	fb38 ee05 	smlawb	lr, r8, r5, lr
 8005e4e:	9b00      	ldr	r3, [sp, #0]
 8005e50:	fb3a ea03 	smlawb	sl, sl, r3, lr
 8005e54:	f8df e108 	ldr.w	lr, [pc, #264]	; 8005f60 <greq_setConfig+0xe18>
 8005e58:	fb3e ae06 	smlawb	lr, lr, r6, sl
 8005e5c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8005f64 <greq_setConfig+0xe1c>
 8005e60:	9b01      	ldr	r3, [sp, #4]
 8005e62:	fb3a ee03 	smlawb	lr, sl, r3, lr
 8005e66:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8005f68 <greq_setConfig+0xe20>
 8005e6a:	fb38 ee07 	smlawb	lr, r8, r7, lr
 8005e6e:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005e72:	f30e 0e0f 	ssat	lr, #16, lr
 8005e76:	f8ad e026 	strh.w	lr, [sp, #38]	; 0x26
 8005e7a:	f241 5e92 	movw	lr, #5522	; 0x1592
 8005e7e:	fb3e fe02 	smulwb	lr, lr, r2
 8005e82:	4b1f      	ldr	r3, [pc, #124]	; (8005f00 <greq_setConfig+0xdb8>)
 8005e84:	fb33 ee00 	smlawb	lr, r3, r0, lr
 8005e88:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <greq_setConfig+0xdc0>)
 8005e8a:	fb33 ee04 	smlawb	lr, r3, r4, lr
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <greq_setConfig+0xdc8>)
 8005e90:	fb33 ee05 	smlawb	lr, r3, r5, lr
 8005e94:	9b00      	ldr	r3, [sp, #0]
 8005e96:	fb3c ee03 	smlawb	lr, ip, r3, lr
 8005e9a:	fb3a ee06 	smlawb	lr, sl, r6, lr
 8005e9e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8005f6c <greq_setConfig+0xe24>
 8005ea2:	9b01      	ldr	r3, [sp, #4]
 8005ea4:	fb3a ee03 	smlawb	lr, sl, r3, lr
 8005ea8:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8005f70 <greq_setConfig+0xe28>
 8005eac:	9f02      	ldr	r7, [sp, #8]
 8005eae:	fb3c ee07 	smlawb	lr, ip, r7, lr
 8005eb2:	ea4f 3eae 	mov.w	lr, lr, asr #14
 8005eb6:	f30e 0e0f 	ssat	lr, #16, lr
 8005eba:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8005ebe:	f46f 7ec4 	mvn.w	lr, #392	; 0x188
 8005ec2:	fb3e f202 	smulwb	r2, lr, r2
 8005ec6:	f640 1e61 	movw	lr, #2401	; 0x961
 8005eca:	fb3e 2200 	smlawb	r2, lr, r0, r2
 8005ece:	480f      	ldr	r0, [pc, #60]	; (8005f0c <greq_setConfig+0xdc4>)
 8005ed0:	fb30 2204 	smlawb	r2, r0, r4, r2
 8005ed4:	480f      	ldr	r0, [pc, #60]	; (8005f14 <greq_setConfig+0xdcc>)
 8005ed6:	fb30 2205 	smlawb	r2, r0, r5, r2
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	fb39 2203 	smlawb	r2, r9, r3, r2
 8005ee0:	fb38 2206 	smlawb	r2, r8, r6, r2
 8005ee4:	9b01      	ldr	r3, [sp, #4]
 8005ee6:	fb3c 2c03 	smlawb	ip, ip, r3, r2
 8005eea:	e043      	b.n	8005f74 <greq_setConfig+0xe2c>
 8005eec:	08006834 	.word	0x08006834
 8005ef0:	ffb091c9 	.word	0xffb091c9
 8005ef4:	000791ce 	.word	0x000791ce
 8005ef8:	fffeebd6 	.word	0xfffeebd6
 8005efc:	0007885e 	.word	0x0007885e
 8005f00:	ffff113b 	.word	0xffff113b
 8005f04:	ffb24a72 	.word	0xffb24a72
 8005f08:	00062cbf 	.word	0x00062cbf
 8005f0c:	ffff91e9 	.word	0xffff91e9
 8005f10:	ffbe677c 	.word	0xffbe677c
 8005f14:	000292ce 	.word	0x000292ce
 8005f18:	0800687c 	.word	0x0800687c
 8005f1c:	46433f4b 	.word	0x46433f4b
 8005f20:	ea81d601 	.word	0xea81d601
 8005f24:	0219b23d 	.word	0x0219b23d
 8005f28:	4cd6d25f 	.word	0x4cd6d25f
 8005f2c:	e9dd89d2 	.word	0xe9dd89d2
 8005f30:	022f4abf 	.word	0x022f4abf
 8005f34:	ffaefff5 	.word	0xffaefff5
 8005f38:	4cda03f6 	.word	0x4cda03f6
 8005f3c:	e9f4a7eb 	.word	0xe9f4a7eb
 8005f40:	0229bd79 	.word	0x0229bd79
 8005f44:	4cc3bcdf 	.word	0x4cc3bcdf
 8005f48:	ea0eaaac 	.word	0xea0eaaac
 8005f4c:	0211216f 	.word	0x0211216f
 8005f50:	4c6064de 	.word	0x4c6064de
 8005f54:	ead1ef26 	.word	0xead1ef26
 8005f58:	01b3dc44 	.word	0x01b3dc44
 8005f5c:	ffe196d4 	.word	0xffe196d4
 8005f60:	4acdc089 	.word	0x4acdc089
 8005f64:	ed79d790 	.word	0xed79d790
 8005f68:	00b99400 	.word	0x00b99400
 8005f6c:	4650753d 	.word	0x4650753d
 8005f70:	f5c62463 	.word	0xf5c62463
 8005f74:	4a10      	ldr	r2, [pc, #64]	; (8005fb8 <greq_setConfig+0xe70>)
 8005f76:	fb32 c207 	smlawb	r2, r2, r7, ip
 8005f7a:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <greq_setConfig+0xe74>)
 8005f7c:	1392      	asrs	r2, r2, #14
 8005f7e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005f82:	f302 020f 	ssat	r2, #16, r2
 8005f86:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8005f8a:	f7ff bbee 	b.w	800576a <greq_setConfig+0x622>
 8005f8e:	f8df e030 	ldr.w	lr, [pc, #48]	; 8005fc0 <greq_setConfig+0xe78>
 8005f92:	e5e3      	b.n	8005b5c <greq_setConfig+0xa14>
 8005f94:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005fc4 <greq_setConfig+0xe7c>
 8005f98:	e5e0      	b.n	8005b5c <greq_setConfig+0xa14>
 8005f9a:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8005fc8 <greq_setConfig+0xe80>
 8005f9e:	e5dd      	b.n	8005b5c <greq_setConfig+0xa14>
 8005fa0:	f8df e028 	ldr.w	lr, [pc, #40]	; 8005fcc <greq_setConfig+0xe84>
 8005fa4:	e5da      	b.n	8005b5c <greq_setConfig+0xa14>
 8005fa6:	f100 0e02 	add.w	lr, r0, #2
 8005faa:	e5d7      	b.n	8005b5c <greq_setConfig+0xa14>
 8005fac:	f8df e020 	ldr.w	lr, [pc, #32]	; 8005fd0 <greq_setConfig+0xe88>
 8005fb0:	e5d4      	b.n	8005b5c <greq_setConfig+0xa14>
 8005fb2:	f06f 0003 	mvn.w	r0, #3
 8005fb6:	e474      	b.n	80058a2 <greq_setConfig+0x75a>
 8005fb8:	418bb81d 	.word	0x418bb81d
 8005fbc:	08006834 	.word	0x08006834
 8005fc0:	0800689c 	.word	0x0800689c
 8005fc4:	080068ac 	.word	0x080068ac
 8005fc8:	080068bc 	.word	0x080068bc
 8005fcc:	080068cc 	.word	0x080068cc
 8005fd0:	0800688c 	.word	0x0800688c

08005fd4 <greq_setParam>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	f9b0 6000 	ldrsh.w	r6, [r0]
 8005fda:	f8a1 621c 	strh.w	r6, [r1, #540]	; 0x21c
 8005fde:	2e08      	cmp	r6, #8
 8005fe0:	f000 80de 	beq.w	80061a0 <greq_setParam+0x1cc>
 8005fe4:	2e0a      	cmp	r6, #10
 8005fe6:	f000 80d9 	beq.w	800619c <greq_setParam+0x1c8>
 8005fea:	2e05      	cmp	r6, #5
 8005fec:	d002      	beq.n	8005ff4 <greq_setParam+0x20>
 8005fee:	f06f 0002 	mvn.w	r0, #2
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff4:	4d6b      	ldr	r5, [pc, #428]	; (80061a4 <greq_setParam+0x1d0>)
 8005ff6:	2e01      	cmp	r6, #1
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	bfb8      	it	lt
 8005ffe:	2201      	movlt	r2, #1
 8006000:	0052      	lsls	r2, r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	f204 2006 	addw	r0, r4, #518	; 0x206
 8006008:	f000 fb93 	bl	8006732 <memset>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	686a      	ldr	r2, [r5, #4]
 8006012:	2300      	movs	r3, #0
 8006014:	fb32 f203 	smulwb	r2, r2, r3
 8006018:	f302 021e 	ssat	r2, #31, r2
 800601c:	0052      	lsls	r2, r2, #1
 800601e:	60a2      	str	r2, [r4, #8]
 8006020:	68aa      	ldr	r2, [r5, #8]
 8006022:	60e2      	str	r2, [r4, #12]
 8006024:	68ea      	ldr	r2, [r5, #12]
 8006026:	6122      	str	r2, [r4, #16]
 8006028:	2e01      	cmp	r6, #1
 800602a:	f340 8097 	ble.w	800615c <greq_setParam+0x188>
 800602e:	692a      	ldr	r2, [r5, #16]
 8006030:	6162      	str	r2, [r4, #20]
 8006032:	696a      	ldr	r2, [r5, #20]
 8006034:	fb32 f203 	smulwb	r2, r2, r3
 8006038:	f302 021e 	ssat	r2, #31, r2
 800603c:	0052      	lsls	r2, r2, #1
 800603e:	61a2      	str	r2, [r4, #24]
 8006040:	69aa      	ldr	r2, [r5, #24]
 8006042:	61e2      	str	r2, [r4, #28]
 8006044:	69ea      	ldr	r2, [r5, #28]
 8006046:	6222      	str	r2, [r4, #32]
 8006048:	2e02      	cmp	r6, #2
 800604a:	f000 8087 	beq.w	800615c <greq_setParam+0x188>
 800604e:	6a2a      	ldr	r2, [r5, #32]
 8006050:	6262      	str	r2, [r4, #36]	; 0x24
 8006052:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006054:	fb32 f203 	smulwb	r2, r2, r3
 8006058:	f302 021e 	ssat	r2, #31, r2
 800605c:	0052      	lsls	r2, r2, #1
 800605e:	62a2      	str	r2, [r4, #40]	; 0x28
 8006060:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006062:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006064:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006066:	6322      	str	r2, [r4, #48]	; 0x30
 8006068:	2e03      	cmp	r6, #3
 800606a:	d077      	beq.n	800615c <greq_setParam+0x188>
 800606c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800606e:	6362      	str	r2, [r4, #52]	; 0x34
 8006070:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006072:	fb32 f203 	smulwb	r2, r2, r3
 8006076:	f302 021e 	ssat	r2, #31, r2
 800607a:	0052      	lsls	r2, r2, #1
 800607c:	63a2      	str	r2, [r4, #56]	; 0x38
 800607e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006080:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006082:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006084:	6422      	str	r2, [r4, #64]	; 0x40
 8006086:	2e04      	cmp	r6, #4
 8006088:	d068      	beq.n	800615c <greq_setParam+0x188>
 800608a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800608c:	6462      	str	r2, [r4, #68]	; 0x44
 800608e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8006090:	fb32 f203 	smulwb	r2, r2, r3
 8006094:	f302 021e 	ssat	r2, #31, r2
 8006098:	0052      	lsls	r2, r2, #1
 800609a:	64a2      	str	r2, [r4, #72]	; 0x48
 800609c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800609e:	64e2      	str	r2, [r4, #76]	; 0x4c
 80060a0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80060a2:	6522      	str	r2, [r4, #80]	; 0x50
 80060a4:	2e05      	cmp	r6, #5
 80060a6:	d059      	beq.n	800615c <greq_setParam+0x188>
 80060a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80060aa:	6562      	str	r2, [r4, #84]	; 0x54
 80060ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80060ae:	fb32 f203 	smulwb	r2, r2, r3
 80060b2:	f302 021e 	ssat	r2, #31, r2
 80060b6:	0052      	lsls	r2, r2, #1
 80060b8:	65a2      	str	r2, [r4, #88]	; 0x58
 80060ba:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80060bc:	65e2      	str	r2, [r4, #92]	; 0x5c
 80060be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80060c0:	6622      	str	r2, [r4, #96]	; 0x60
 80060c2:	2e06      	cmp	r6, #6
 80060c4:	d04a      	beq.n	800615c <greq_setParam+0x188>
 80060c6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80060c8:	6662      	str	r2, [r4, #100]	; 0x64
 80060ca:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80060cc:	fb32 f203 	smulwb	r2, r2, r3
 80060d0:	f302 021e 	ssat	r2, #31, r2
 80060d4:	0052      	lsls	r2, r2, #1
 80060d6:	66a2      	str	r2, [r4, #104]	; 0x68
 80060d8:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80060da:	66e2      	str	r2, [r4, #108]	; 0x6c
 80060dc:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 80060de:	6722      	str	r2, [r4, #112]	; 0x70
 80060e0:	2e07      	cmp	r6, #7
 80060e2:	d03b      	beq.n	800615c <greq_setParam+0x188>
 80060e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80060e6:	6762      	str	r2, [r4, #116]	; 0x74
 80060e8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80060ea:	fb32 f203 	smulwb	r2, r2, r3
 80060ee:	f302 021e 	ssat	r2, #31, r2
 80060f2:	0052      	lsls	r2, r2, #1
 80060f4:	67a2      	str	r2, [r4, #120]	; 0x78
 80060f6:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80060f8:	67e2      	str	r2, [r4, #124]	; 0x7c
 80060fa:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80060fc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8006100:	2e08      	cmp	r6, #8
 8006102:	d02b      	beq.n	800615c <greq_setParam+0x188>
 8006104:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 8006108:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 800610c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 8006110:	fb32 f203 	smulwb	r2, r2, r3
 8006114:	f302 021e 	ssat	r2, #31, r2
 8006118:	0052      	lsls	r2, r2, #1
 800611a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 800611e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006122:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8006126:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
 800612a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800612e:	2e09      	cmp	r6, #9
 8006130:	d014      	beq.n	800615c <greq_setParam+0x188>
 8006132:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8006136:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 800613a:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800613e:	fb32 f303 	smulwb	r3, r2, r3
 8006142:	f303 031e 	ssat	r3, #31, r3
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800614c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006150:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8006154:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006158:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800615c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8006160:	b2f2      	uxtb	r2, r6
 8006162:	1d27      	adds	r7, r4, #4
 8006164:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
 8006168:	f8c4 71ec 	str.w	r7, [r4, #492]	; 0x1ec
 800616c:	0112      	lsls	r2, r2, #4
 800616e:	4628      	mov	r0, r5
 8006170:	2100      	movs	r1, #0
 8006172:	f000 fade 	bl	8006732 <memset>
 8006176:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 800617a:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
 800617e:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 8006182:	f8c4 21f4 	str.w	r2, [r4, #500]	; 0x1f4
 8006186:	f8c4 71fc 	str.w	r7, [r4, #508]	; 0x1fc
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	4628      	mov	r0, r5
 800618e:	2100      	movs	r1, #0
 8006190:	f000 facf 	bl	8006732 <memset>
 8006194:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8006198:	2000      	movs	r0, #0
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619c:	4d02      	ldr	r5, [pc, #8]	; (80061a8 <greq_setParam+0x1d4>)
 800619e:	e72a      	b.n	8005ff6 <greq_setParam+0x22>
 80061a0:	4d02      	ldr	r5, [pc, #8]	; (80061ac <greq_setParam+0x1d8>)
 80061a2:	e728      	b.n	8005ff6 <greq_setParam+0x22>
 80061a4:	080069d4 	.word	0x080069d4
 80061a8:	08006a24 	.word	0x08006a24
 80061ac:	08006954 	.word	0x08006954

080061b0 <greq_process>:
 80061b0:	6843      	ldr	r3, [r0, #4]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	f040 8273 	bne.w	800669e <greq_process+0x4ee>
 80061b8:	6803      	ldr	r3, [r0, #0]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	f040 8272 	bne.w	80066a4 <greq_process+0x4f4>
 80061c0:	6903      	ldr	r3, [r0, #16]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	f040 8271 	bne.w	80066aa <greq_process+0x4fa>
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	68c3      	ldr	r3, [r0, #12]
 80061ce:	b097      	sub	sp, #92	; 0x5c
 80061d0:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 80061d4:	461d      	mov	r5, r3
 80061d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80061d8:	f300 826a 	bgt.w	80066b0 <greq_process+0x500>
 80061dc:	f9b2 3204 	ldrsh.w	r3, [r2, #516]	; 0x204
 80061e0:	6880      	ldr	r0, [r0, #8]
 80061e2:	6889      	ldr	r1, [r1, #8]
 80061e4:	900a      	str	r0, [sp, #40]	; 0x28
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	9114      	str	r1, [sp, #80]	; 0x50
 80061ea:	d01d      	beq.n	8006228 <greq_process+0x78>
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	dd17      	ble.n	8006220 <greq_process+0x70>
 80061f0:	460a      	mov	r2, r1
 80061f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80061f4:	4628      	mov	r0, r5
 80061f6:	3001      	adds	r0, #1
 80061f8:	460b      	mov	r3, r1
 80061fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80061fe:	3208      	adds	r2, #8
 8006200:	3308      	adds	r3, #8
 8006202:	f853 1c08 	ldr.w	r1, [r3, #-8]
 8006206:	1089      	asrs	r1, r1, #2
 8006208:	f842 1c08 	str.w	r1, [r2, #-8]
 800620c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006210:	3308      	adds	r3, #8
 8006212:	1089      	asrs	r1, r1, #2
 8006214:	4283      	cmp	r3, r0
 8006216:	f842 1c04 	str.w	r1, [r2, #-4]
 800621a:	f102 0208 	add.w	r2, r2, #8
 800621e:	d1f0      	bne.n	8006202 <greq_process+0x52>
 8006220:	2000      	movs	r0, #0
 8006222:	b017      	add	sp, #92	; 0x5c
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	6813      	ldr	r3, [r2, #0]
 800622a:	930b      	str	r3, [sp, #44]	; 0x2c
 800622c:	9315      	str	r3, [sp, #84]	; 0x54
 800622e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd16      	ble.n	8006262 <greq_process+0xb2>
 8006234:	1c5c      	adds	r4, r3, #1
 8006236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006238:	f103 0108 	add.w	r1, r3, #8
 800623c:	4603      	mov	r3, r0
 800623e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006242:	3308      	adds	r3, #8
 8006244:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8006248:	1080      	asrs	r0, r0, #2
 800624a:	f841 0c08 	str.w	r0, [r1, #-8]
 800624e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006252:	3308      	adds	r3, #8
 8006254:	1080      	asrs	r0, r0, #2
 8006256:	42a3      	cmp	r3, r4
 8006258:	f841 0c04 	str.w	r0, [r1, #-4]
 800625c:	f101 0108 	add.w	r1, r1, #8
 8006260:	d1f0      	bne.n	8006244 <greq_process+0x94>
 8006262:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8006264:	f8d2 41ec 	ldr.w	r4, [r2, #492]	; 0x1ec
 8006268:	f8d2 01e8 	ldr.w	r0, [r2, #488]	; 0x1e8
 800626c:	f8d2 11f8 	ldr.w	r1, [r2, #504]	; 0x1f8
 8006270:	f9b2 221c 	ldrsh.w	r2, [r2, #540]	; 0x21c
 8006274:	9207      	str	r2, [sp, #28]
 8006276:	10ab      	asrs	r3, r5, #2
 8006278:	9306      	str	r3, [sp, #24]
 800627a:	3301      	adds	r3, #1
 800627c:	015b      	lsls	r3, r3, #5
 800627e:	461e      	mov	r6, r3
 8006280:	9311      	str	r3, [sp, #68]	; 0x44
 8006282:	3b20      	subs	r3, #32
 8006284:	461f      	mov	r7, r3
 8006286:	9310      	str	r3, [sp, #64]	; 0x40
 8006288:	462b      	mov	r3, r5
 800628a:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
 800628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006290:	f005 0203 	and.w	r2, r5, #3
 8006294:	4615      	mov	r5, r2
 8006296:	9202      	str	r2, [sp, #8]
 8006298:	463a      	mov	r2, r7
 800629a:	19df      	adds	r7, r3, r7
 800629c:	4433      	add	r3, r6
 800629e:	9312      	str	r3, [sp, #72]	; 0x48
 80062a0:	f104 0310 	add.w	r3, r4, #16
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	f100 0310 	add.w	r3, r0, #16
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	f101 0310 	add.w	r3, r1, #16
 80062b0:	970e      	str	r7, [sp, #56]	; 0x38
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80062b6:	00eb      	lsls	r3, r5, #3
 80062b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ba:	1e6b      	subs	r3, r5, #1
 80062bc:	18ba      	adds	r2, r7, r2
 80062be:	9308      	str	r3, [sp, #32]
 80062c0:	f1ce 0304 	rsb	r3, lr, #4
 80062c4:	920d      	str	r2, [sp, #52]	; 0x34
 80062c6:	930c      	str	r3, [sp, #48]	; 0x30
 80062c8:	9904      	ldr	r1, [sp, #16]
 80062ca:	f851 2c10 	ldr.w	r2, [r1, #-16]
 80062ce:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 80062d2:	e911 0600 	ldmdb	r1, {r9, sl}
 80062d6:	f102 0801 	add.w	r8, r2, #1
 80062da:	9901      	ldr	r1, [sp, #4]
 80062dc:	9a06      	ldr	r2, [sp, #24]
 80062de:	f851 cc10 	ldr.w	ip, [r1, #-16]
 80062e2:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80062e6:	e911 000a 	ldmdb	r1, {r1, r3}
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	f000 81c0 	beq.w	8006670 <greq_process+0x4c0>
 80062f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80062f6:	f102 0e20 	add.w	lr, r2, #32
 80062fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062fc:	f102 0520 	add.w	r5, r2, #32
 8006300:	f85e 0c20 	ldr.w	r0, [lr, #-32]
 8006304:	1080      	asrs	r0, r0, #2
 8006306:	fb54 f210 	smmulr	r2, r4, r0
 800630a:	fb64 2717 	smmlsr	r7, r4, r7, r2
 800630e:	fb59 7711 	smmlar	r7, r9, r1, r7
 8006312:	fb5a 7313 	smmlar	r3, sl, r3, r7
 8006316:	f85e 2c18 	ldr.w	r2, [lr, #-24]
 800631a:	f855 7c20 	ldr.w	r7, [r5, #-32]
 800631e:	fa03 f308 	lsl.w	r3, r3, r8
 8006322:	005e      	lsls	r6, r3, #1
 8006324:	1092      	asrs	r2, r2, #2
 8006326:	f306 061e 	ssat	r6, #31, r6
 800632a:	0076      	lsls	r6, r6, #1
 800632c:	fa86 f687 	qadd	r6, r7, r6
 8006330:	f845 6c20 	str.w	r6, [r5, #-32]
 8006334:	fb54 f612 	smmulr	r6, r4, r2
 8006338:	fb64 661c 	smmlsr	r6, r4, ip, r6
 800633c:	fb59 6613 	smmlar	r6, r9, r3, r6
 8006340:	fb5a 6111 	smmlar	r1, sl, r1, r6
 8006344:	f85e 7c10 	ldr.w	r7, [lr, #-16]
 8006348:	f855 6c18 	ldr.w	r6, [r5, #-24]
 800634c:	fa01 f108 	lsl.w	r1, r1, r8
 8006350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006354:	10bf      	asrs	r7, r7, #2
 8006356:	f30c 0c1e 	ssat	ip, #31, ip
 800635a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800635e:	fa8c f686 	qadd	r6, r6, ip
 8006362:	f845 6c18 	str.w	r6, [r5, #-24]
 8006366:	fb54 f617 	smmulr	r6, r4, r7
 800636a:	fb64 6010 	smmlsr	r0, r4, r0, r6
 800636e:	fb59 0011 	smmlar	r0, r9, r1, r0
 8006372:	fb5a 0313 	smmlar	r3, sl, r3, r0
 8006376:	f85e 6c08 	ldr.w	r6, [lr, #-8]
 800637a:	fa03 f308 	lsl.w	r3, r3, r8
 800637e:	0058      	lsls	r0, r3, #1
 8006380:	ea4f 0ca6 	mov.w	ip, r6, asr #2
 8006384:	f300 001e 	ssat	r0, #31, r0
 8006388:	f855 6c10 	ldr.w	r6, [r5, #-16]
 800638c:	0040      	lsls	r0, r0, #1
 800638e:	fa80 f086 	qadd	r0, r6, r0
 8006392:	f845 0c10 	str.w	r0, [r5, #-16]
 8006396:	fb54 f01c 	smmulr	r0, r4, ip
 800639a:	fb64 0212 	smmlsr	r2, r4, r2, r0
 800639e:	fb59 2213 	smmlar	r2, r9, r3, r2
 80063a2:	fb5a 2111 	smmlar	r1, sl, r1, r2
 80063a6:	fa01 f108 	lsl.w	r1, r1, r8
 80063aa:	0048      	lsls	r0, r1, #1
 80063ac:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80063b0:	f300 001e 	ssat	r0, #31, r0
 80063b4:	0040      	lsls	r0, r0, #1
 80063b6:	fa80 f282 	qadd	r2, r2, r0
 80063ba:	f10e 0e20 	add.w	lr, lr, #32
 80063be:	45de      	cmp	lr, fp
 80063c0:	f845 2c08 	str.w	r2, [r5, #-8]
 80063c4:	f105 0520 	add.w	r5, r5, #32
 80063c8:	d19a      	bne.n	8006300 <greq_process+0x150>
 80063ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80063ce:	9a02      	ldr	r2, [sp, #8]
 80063d0:	2a00      	cmp	r2, #0
 80063d2:	d048      	beq.n	8006466 <greq_process+0x2b6>
 80063d4:	682a      	ldr	r2, [r5, #0]
 80063d6:	ea4f 0ea2 	mov.w	lr, r2, asr #2
 80063da:	fb54 f21e 	smmulr	r2, r4, lr
 80063de:	fb64 2717 	smmlsr	r7, r4, r7, r2
 80063e2:	fb59 7711 	smmlar	r7, r9, r1, r7
 80063e6:	fb5a 7313 	smmlar	r3, sl, r3, r7
 80063ea:	fa03 f608 	lsl.w	r6, r3, r8
 80063ee:	0072      	lsls	r2, r6, #1
 80063f0:	6803      	ldr	r3, [r0, #0]
 80063f2:	f302 021e 	ssat	r2, #31, r2
 80063f6:	0052      	lsls	r2, r2, #1
 80063f8:	fa82 f383 	qadd	r3, r3, r2
 80063fc:	6003      	str	r3, [r0, #0]
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 813d 	beq.w	8006680 <greq_process+0x4d0>
 8006406:	68af      	ldr	r7, [r5, #8]
 8006408:	10bf      	asrs	r7, r7, #2
 800640a:	fb54 f317 	smmulr	r3, r4, r7
 800640e:	fb64 331c 	smmlsr	r3, r4, ip, r3
 8006412:	fb59 3316 	smmlar	r3, r9, r6, r3
 8006416:	fb5a 3311 	smmlar	r3, sl, r1, r3
 800641a:	fa03 f308 	lsl.w	r3, r3, r8
 800641e:	0059      	lsls	r1, r3, #1
 8006420:	6882      	ldr	r2, [r0, #8]
 8006422:	f301 011e 	ssat	r1, #31, r1
 8006426:	0049      	lsls	r1, r1, #1
 8006428:	fa81 f282 	qadd	r2, r2, r1
 800642c:	6082      	str	r2, [r0, #8]
 800642e:	9a02      	ldr	r2, [sp, #8]
 8006430:	2a02      	cmp	r2, #2
 8006432:	f000 812f 	beq.w	8006694 <greq_process+0x4e4>
 8006436:	692a      	ldr	r2, [r5, #16]
 8006438:	ea4f 0ca2 	mov.w	ip, r2, asr #2
 800643c:	fb54 f21c 	smmulr	r2, r4, ip
 8006440:	fb64 221e 	smmlsr	r2, r4, lr, r2
 8006444:	fb59 2213 	smmlar	r2, r9, r3, r2
 8006448:	fb5a 2116 	smmlar	r1, sl, r6, r2
 800644c:	fa01 f108 	lsl.w	r1, r1, r8
 8006450:	004e      	lsls	r6, r1, #1
 8006452:	6902      	ldr	r2, [r0, #16]
 8006454:	f306 061e 	ssat	r6, #31, r6
 8006458:	0076      	lsls	r6, r6, #1
 800645a:	fa86 f282 	qadd	r2, r2, r6
 800645e:	6102      	str	r2, [r0, #16]
 8006460:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006462:	4435      	add	r5, r6
 8006464:	4430      	add	r0, r6
 8006466:	9e01      	ldr	r6, [sp, #4]
 8006468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800646a:	f846 cc10 	str.w	ip, [r6, #-16]
 800646e:	e906 000a 	stmdb	r6, {r1, r3}
 8006472:	eb00 0b02 	add.w	fp, r0, r2
 8006476:	18ab      	adds	r3, r5, r2
 8006478:	9a05      	ldr	r2, [sp, #20]
 800647a:	f846 7c0c 	str.w	r7, [r6, #-12]
 800647e:	461d      	mov	r5, r3
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	f852 cc10 	ldr.w	ip, [r2, #-16]
 8006486:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 800648a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800648e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8006492:	9a06      	ldr	r2, [sp, #24]
 8006494:	2a00      	cmp	r2, #0
 8006496:	d076      	beq.n	8006586 <greq_process+0x3d6>
 8006498:	9811      	ldr	r0, [sp, #68]	; 0x44
 800649a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800649e:	462a      	mov	r2, r5
 80064a0:	4402      	add	r2, r0
 80064a2:	f105 0e20 	add.w	lr, r5, #32
 80064a6:	f10b 0520 	add.w	r5, fp, #32
 80064aa:	4693      	mov	fp, r2
 80064ac:	f85e 0c20 	ldr.w	r0, [lr, #-32]
 80064b0:	1080      	asrs	r0, r0, #2
 80064b2:	fb54 f210 	smmulr	r2, r4, r0
 80064b6:	fb64 2717 	smmlsr	r7, r4, r7, r2
 80064ba:	fb59 7711 	smmlar	r7, r9, r1, r7
 80064be:	fb5a 7313 	smmlar	r3, sl, r3, r7
 80064c2:	f85e 2c18 	ldr.w	r2, [lr, #-24]
 80064c6:	f855 7c20 	ldr.w	r7, [r5, #-32]
 80064ca:	fa03 f308 	lsl.w	r3, r3, r8
 80064ce:	005e      	lsls	r6, r3, #1
 80064d0:	1092      	asrs	r2, r2, #2
 80064d2:	f306 061e 	ssat	r6, #31, r6
 80064d6:	0076      	lsls	r6, r6, #1
 80064d8:	fa86 f687 	qadd	r6, r7, r6
 80064dc:	f845 6c20 	str.w	r6, [r5, #-32]
 80064e0:	fb54 f612 	smmulr	r6, r4, r2
 80064e4:	fb64 661c 	smmlsr	r6, r4, ip, r6
 80064e8:	fb59 6613 	smmlar	r6, r9, r3, r6
 80064ec:	fb5a 6111 	smmlar	r1, sl, r1, r6
 80064f0:	f85e 7c10 	ldr.w	r7, [lr, #-16]
 80064f4:	f855 6c18 	ldr.w	r6, [r5, #-24]
 80064f8:	fa01 f108 	lsl.w	r1, r1, r8
 80064fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006500:	10bf      	asrs	r7, r7, #2
 8006502:	f30c 0c1e 	ssat	ip, #31, ip
 8006506:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800650a:	fa8c f686 	qadd	r6, r6, ip
 800650e:	f845 6c18 	str.w	r6, [r5, #-24]
 8006512:	fb54 f617 	smmulr	r6, r4, r7
 8006516:	fb64 6010 	smmlsr	r0, r4, r0, r6
 800651a:	fb59 0011 	smmlar	r0, r9, r1, r0
 800651e:	fb5a 0313 	smmlar	r3, sl, r3, r0
 8006522:	f85e 6c08 	ldr.w	r6, [lr, #-8]
 8006526:	fa03 f308 	lsl.w	r3, r3, r8
 800652a:	0058      	lsls	r0, r3, #1
 800652c:	ea4f 0ca6 	mov.w	ip, r6, asr #2
 8006530:	f300 001e 	ssat	r0, #31, r0
 8006534:	f855 6c10 	ldr.w	r6, [r5, #-16]
 8006538:	0040      	lsls	r0, r0, #1
 800653a:	fa80 f086 	qadd	r0, r6, r0
 800653e:	f845 0c10 	str.w	r0, [r5, #-16]
 8006542:	fb54 f01c 	smmulr	r0, r4, ip
 8006546:	fb64 0212 	smmlsr	r2, r4, r2, r0
 800654a:	fb59 2213 	smmlar	r2, r9, r3, r2
 800654e:	fb5a 2111 	smmlar	r1, sl, r1, r2
 8006552:	fa01 f108 	lsl.w	r1, r1, r8
 8006556:	0048      	lsls	r0, r1, #1
 8006558:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800655c:	f300 001e 	ssat	r0, #31, r0
 8006560:	0040      	lsls	r0, r0, #1
 8006562:	fa80 f282 	qadd	r2, r2, r0
 8006566:	f10e 0e20 	add.w	lr, lr, #32
 800656a:	45de      	cmp	lr, fp
 800656c:	f845 2c08 	str.w	r2, [r5, #-8]
 8006570:	f105 0520 	add.w	r5, r5, #32
 8006574:	d19a      	bne.n	80064ac <greq_process+0x2fc>
 8006576:	9a03      	ldr	r2, [sp, #12]
 8006578:	9810      	ldr	r0, [sp, #64]	; 0x40
 800657a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800657e:	4615      	mov	r5, r2
 8006580:	4405      	add	r5, r0
 8006582:	9503      	str	r5, [sp, #12]
 8006584:	4483      	add	fp, r0
 8006586:	9a02      	ldr	r2, [sp, #8]
 8006588:	2a00      	cmp	r2, #0
 800658a:	d049      	beq.n	8006620 <greq_process+0x470>
 800658c:	9e03      	ldr	r6, [sp, #12]
 800658e:	6832      	ldr	r2, [r6, #0]
 8006590:	1095      	asrs	r5, r2, #2
 8006592:	fb54 f215 	smmulr	r2, r4, r5
 8006596:	fb64 2717 	smmlsr	r7, r4, r7, r2
 800659a:	fb59 7711 	smmlar	r7, r9, r1, r7
 800659e:	fb5a 7313 	smmlar	r3, sl, r3, r7
 80065a2:	fa03 f008 	lsl.w	r0, r3, r8
 80065a6:	0043      	lsls	r3, r0, #1
 80065a8:	f8db 2000 	ldr.w	r2, [fp]
 80065ac:	f303 031e 	ssat	r3, #31, r3
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	fa83 f282 	qadd	r2, r2, r3
 80065b6:	9b08      	ldr	r3, [sp, #32]
 80065b8:	f8cb 2000 	str.w	r2, [fp]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d064      	beq.n	800668a <greq_process+0x4da>
 80065c0:	68b7      	ldr	r7, [r6, #8]
 80065c2:	10bf      	asrs	r7, r7, #2
 80065c4:	fb54 f317 	smmulr	r3, r4, r7
 80065c8:	fb64 331c 	smmlsr	r3, r4, ip, r3
 80065cc:	fb59 3310 	smmlar	r3, r9, r0, r3
 80065d0:	fb5a 3311 	smmlar	r3, sl, r1, r3
 80065d4:	fa03 f308 	lsl.w	r3, r3, r8
 80065d8:	0059      	lsls	r1, r3, #1
 80065da:	f8db 2008 	ldr.w	r2, [fp, #8]
 80065de:	f301 011e 	ssat	r1, #31, r1
 80065e2:	0049      	lsls	r1, r1, #1
 80065e4:	fa81 f282 	qadd	r2, r2, r1
 80065e8:	f8cb 2008 	str.w	r2, [fp, #8]
 80065ec:	9a02      	ldr	r2, [sp, #8]
 80065ee:	2a02      	cmp	r2, #2
 80065f0:	d041      	beq.n	8006676 <greq_process+0x4c6>
 80065f2:	6932      	ldr	r2, [r6, #16]
 80065f4:	ea4f 0ca2 	mov.w	ip, r2, asr #2
 80065f8:	fb54 f21c 	smmulr	r2, r4, ip
 80065fc:	fb64 2215 	smmlsr	r2, r4, r5, r2
 8006600:	fb59 2213 	smmlar	r2, r9, r3, r2
 8006604:	fb5a 2210 	smmlar	r2, sl, r0, r2
 8006608:	fa02 f108 	lsl.w	r1, r2, r8
 800660c:	0048      	lsls	r0, r1, #1
 800660e:	f8db 2010 	ldr.w	r2, [fp, #16]
 8006612:	f300 001e 	ssat	r0, #31, r0
 8006616:	0040      	lsls	r0, r0, #1
 8006618:	fa80 f282 	qadd	r2, r2, r0
 800661c:	f8cb 2010 	str.w	r2, [fp, #16]
 8006620:	9805      	ldr	r0, [sp, #20]
 8006622:	f840 3c04 	str.w	r3, [r0, #-4]
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	f840 cc10 	str.w	ip, [r0, #-16]
 800662c:	3310      	adds	r3, #16
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	f840 7c0c 	str.w	r7, [r0, #-12]
 8006636:	3310      	adds	r3, #16
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	f100 0310 	add.w	r3, r0, #16
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	9b07      	ldr	r3, [sp, #28]
 8006642:	f840 1c08 	str.w	r1, [r0, #-8]
 8006646:	3b01      	subs	r3, #1
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	f47f ae3d 	bne.w	80062c8 <greq_process+0x118>
 800664e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006650:	2b00      	cmp	r3, #0
 8006652:	f77f ade5 	ble.w	8006220 <greq_process+0x70>
 8006656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006658:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800665a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800665e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006660:	3a08      	subs	r2, #8
 8006662:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 8006666:	4299      	cmp	r1, r3
 8006668:	e9e2 4502 	strd	r4, r5, [r2, #8]!
 800666c:	d1f9      	bne.n	8006662 <greq_process+0x4b2>
 800666e:	e5d7      	b.n	8006220 <greq_process+0x70>
 8006670:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006672:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006674:	e6ab      	b.n	80063ce <greq_process+0x21e>
 8006676:	4619      	mov	r1, r3
 8006678:	46bc      	mov	ip, r7
 800667a:	4603      	mov	r3, r0
 800667c:	462f      	mov	r7, r5
 800667e:	e7cf      	b.n	8006620 <greq_process+0x470>
 8006680:	4667      	mov	r7, ip
 8006682:	460b      	mov	r3, r1
 8006684:	46f4      	mov	ip, lr
 8006686:	4631      	mov	r1, r6
 8006688:	e6ea      	b.n	8006460 <greq_process+0x2b0>
 800668a:	4667      	mov	r7, ip
 800668c:	460b      	mov	r3, r1
 800668e:	46ac      	mov	ip, r5
 8006690:	4601      	mov	r1, r0
 8006692:	e7c5      	b.n	8006620 <greq_process+0x470>
 8006694:	4619      	mov	r1, r3
 8006696:	46bc      	mov	ip, r7
 8006698:	4633      	mov	r3, r6
 800669a:	4677      	mov	r7, lr
 800669c:	e6e0      	b.n	8006460 <greq_process+0x2b0>
 800669e:	f04f 30ff 	mov.w	r0, #4294967295
 80066a2:	4770      	bx	lr
 80066a4:	f06f 0001 	mvn.w	r0, #1
 80066a8:	4770      	bx	lr
 80066aa:	f06f 0004 	mvn.w	r0, #4
 80066ae:	4770      	bx	lr
 80066b0:	f06f 0005 	mvn.w	r0, #5
 80066b4:	e5b5      	b.n	8006222 <greq_process+0x72>
 80066b6:	bf00      	nop

080066b8 <__errno>:
 80066b8:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <__errno+0x8>)
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000024 	.word	0x20000024

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4e0d      	ldr	r6, [pc, #52]	; (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	; (8006700 <__libc_init_array+0x3c>)
 80066ca:	1ba4      	subs	r4, r4, r6
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2500      	movs	r5, #0
 80066d0:	42a5      	cmp	r5, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4e0b      	ldr	r6, [pc, #44]	; (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	; (8006708 <__libc_init_array+0x44>)
 80066d8:	f000 f8a0 	bl	800681c <_init>
 80066dc:	1ba4      	subs	r4, r4, r6
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2500      	movs	r5, #0
 80066e2:	42a5      	cmp	r5, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066ec:	4798      	blx	r3
 80066ee:	3501      	adds	r5, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066f6:	4798      	blx	r3
 80066f8:	3501      	adds	r5, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	08006e30 	.word	0x08006e30
 8006700:	08006e30 	.word	0x08006e30
 8006704:	08006e30 	.word	0x08006e30
 8006708:	08006e34 	.word	0x08006e34

0800670c <malloc>:
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <malloc+0xc>)
 800670e:	4601      	mov	r1, r0
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f000 b817 	b.w	8006744 <_malloc_r>
 8006716:	bf00      	nop
 8006718:	20000024 	.word	0x20000024

0800671c <memcpy>:
 800671c:	b510      	push	{r4, lr}
 800671e:	1e43      	subs	r3, r0, #1
 8006720:	440a      	add	r2, r1
 8006722:	4291      	cmp	r1, r2
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	bd10      	pop	{r4, pc}
 8006728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006730:	e7f7      	b.n	8006722 <memcpy+0x6>

08006732 <memset>:
 8006732:	4402      	add	r2, r0
 8006734:	4603      	mov	r3, r0
 8006736:	4293      	cmp	r3, r2
 8006738:	d100      	bne.n	800673c <memset+0xa>
 800673a:	4770      	bx	lr
 800673c:	f803 1b01 	strb.w	r1, [r3], #1
 8006740:	e7f9      	b.n	8006736 <memset+0x4>
	...

08006744 <_malloc_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	1ccd      	adds	r5, r1, #3
 8006748:	f025 0503 	bic.w	r5, r5, #3
 800674c:	3508      	adds	r5, #8
 800674e:	2d0c      	cmp	r5, #12
 8006750:	bf38      	it	cc
 8006752:	250c      	movcc	r5, #12
 8006754:	2d00      	cmp	r5, #0
 8006756:	4606      	mov	r6, r0
 8006758:	db01      	blt.n	800675e <_malloc_r+0x1a>
 800675a:	42a9      	cmp	r1, r5
 800675c:	d903      	bls.n	8006766 <_malloc_r+0x22>
 800675e:	230c      	movs	r3, #12
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	2000      	movs	r0, #0
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	f000 f857 	bl	8006818 <__malloc_lock>
 800676a:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <_malloc_r+0xac>)
 800676c:	6814      	ldr	r4, [r2, #0]
 800676e:	4621      	mov	r1, r4
 8006770:	b991      	cbnz	r1, 8006798 <_malloc_r+0x54>
 8006772:	4c20      	ldr	r4, [pc, #128]	; (80067f4 <_malloc_r+0xb0>)
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	b91b      	cbnz	r3, 8006780 <_malloc_r+0x3c>
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f83d 	bl	80067f8 <_sbrk_r>
 800677e:	6020      	str	r0, [r4, #0]
 8006780:	4629      	mov	r1, r5
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f838 	bl	80067f8 <_sbrk_r>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d124      	bne.n	80067d6 <_malloc_r+0x92>
 800678c:	230c      	movs	r3, #12
 800678e:	6033      	str	r3, [r6, #0]
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f842 	bl	800681a <__malloc_unlock>
 8006796:	e7e4      	b.n	8006762 <_malloc_r+0x1e>
 8006798:	680b      	ldr	r3, [r1, #0]
 800679a:	1b5b      	subs	r3, r3, r5
 800679c:	d418      	bmi.n	80067d0 <_malloc_r+0x8c>
 800679e:	2b0b      	cmp	r3, #11
 80067a0:	d90f      	bls.n	80067c2 <_malloc_r+0x7e>
 80067a2:	600b      	str	r3, [r1, #0]
 80067a4:	50cd      	str	r5, [r1, r3]
 80067a6:	18cc      	adds	r4, r1, r3
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f836 	bl	800681a <__malloc_unlock>
 80067ae:	f104 000b 	add.w	r0, r4, #11
 80067b2:	1d23      	adds	r3, r4, #4
 80067b4:	f020 0007 	bic.w	r0, r0, #7
 80067b8:	1ac3      	subs	r3, r0, r3
 80067ba:	d0d3      	beq.n	8006764 <_malloc_r+0x20>
 80067bc:	425a      	negs	r2, r3
 80067be:	50e2      	str	r2, [r4, r3]
 80067c0:	e7d0      	b.n	8006764 <_malloc_r+0x20>
 80067c2:	428c      	cmp	r4, r1
 80067c4:	684b      	ldr	r3, [r1, #4]
 80067c6:	bf16      	itet	ne
 80067c8:	6063      	strne	r3, [r4, #4]
 80067ca:	6013      	streq	r3, [r2, #0]
 80067cc:	460c      	movne	r4, r1
 80067ce:	e7eb      	b.n	80067a8 <_malloc_r+0x64>
 80067d0:	460c      	mov	r4, r1
 80067d2:	6849      	ldr	r1, [r1, #4]
 80067d4:	e7cc      	b.n	8006770 <_malloc_r+0x2c>
 80067d6:	1cc4      	adds	r4, r0, #3
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	42a0      	cmp	r0, r4
 80067de:	d005      	beq.n	80067ec <_malloc_r+0xa8>
 80067e0:	1a21      	subs	r1, r4, r0
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f808 	bl	80067f8 <_sbrk_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0cf      	beq.n	800678c <_malloc_r+0x48>
 80067ec:	6025      	str	r5, [r4, #0]
 80067ee:	e7db      	b.n	80067a8 <_malloc_r+0x64>
 80067f0:	20007e80 	.word	0x20007e80
 80067f4:	20007e84 	.word	0x20007e84

080067f8 <_sbrk_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4c06      	ldr	r4, [pc, #24]	; (8006814 <_sbrk_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4605      	mov	r5, r0
 8006800:	4608      	mov	r0, r1
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	f7fa fdd8 	bl	80013b8 <_sbrk>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_sbrk_r+0x1a>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	b103      	cbz	r3, 8006812 <_sbrk_r+0x1a>
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20008138 	.word	0x20008138

08006818 <__malloc_lock>:
 8006818:	4770      	bx	lr

0800681a <__malloc_unlock>:
 800681a:	4770      	bx	lr

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
